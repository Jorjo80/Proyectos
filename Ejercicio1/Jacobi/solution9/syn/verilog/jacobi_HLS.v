// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="jacobi_HLS,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.418020,HLS_SYN_LAT=174,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=59,HLS_SYN_FF=21380,HLS_SYN_LUT=29680,HLS_VERSION=2018_3}" *)

module jacobi_HLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        J_address0,
        J_ce0,
        J_q0,
        J_address1,
        J_ce1,
        J_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_address1,
        x_ce1,
        x_we1,
        x_d1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 159'd1;
parameter    ap_ST_fsm_state2 = 159'd2;
parameter    ap_ST_fsm_state3 = 159'd4;
parameter    ap_ST_fsm_state4 = 159'd8;
parameter    ap_ST_fsm_state5 = 159'd16;
parameter    ap_ST_fsm_state6 = 159'd32;
parameter    ap_ST_fsm_state7 = 159'd64;
parameter    ap_ST_fsm_state8 = 159'd128;
parameter    ap_ST_fsm_state9 = 159'd256;
parameter    ap_ST_fsm_state10 = 159'd512;
parameter    ap_ST_fsm_state11 = 159'd1024;
parameter    ap_ST_fsm_state12 = 159'd2048;
parameter    ap_ST_fsm_state13 = 159'd4096;
parameter    ap_ST_fsm_state14 = 159'd8192;
parameter    ap_ST_fsm_state15 = 159'd16384;
parameter    ap_ST_fsm_state16 = 159'd32768;
parameter    ap_ST_fsm_state17 = 159'd65536;
parameter    ap_ST_fsm_state18 = 159'd131072;
parameter    ap_ST_fsm_state19 = 159'd262144;
parameter    ap_ST_fsm_state20 = 159'd524288;
parameter    ap_ST_fsm_state21 = 159'd1048576;
parameter    ap_ST_fsm_state22 = 159'd2097152;
parameter    ap_ST_fsm_state23 = 159'd4194304;
parameter    ap_ST_fsm_state24 = 159'd8388608;
parameter    ap_ST_fsm_state25 = 159'd16777216;
parameter    ap_ST_fsm_state26 = 159'd33554432;
parameter    ap_ST_fsm_state27 = 159'd67108864;
parameter    ap_ST_fsm_state28 = 159'd134217728;
parameter    ap_ST_fsm_state29 = 159'd268435456;
parameter    ap_ST_fsm_state30 = 159'd536870912;
parameter    ap_ST_fsm_state31 = 159'd1073741824;
parameter    ap_ST_fsm_state32 = 159'd2147483648;
parameter    ap_ST_fsm_state33 = 159'd4294967296;
parameter    ap_ST_fsm_state34 = 159'd8589934592;
parameter    ap_ST_fsm_state35 = 159'd17179869184;
parameter    ap_ST_fsm_state36 = 159'd34359738368;
parameter    ap_ST_fsm_state37 = 159'd68719476736;
parameter    ap_ST_fsm_state38 = 159'd137438953472;
parameter    ap_ST_fsm_state39 = 159'd274877906944;
parameter    ap_ST_fsm_state40 = 159'd549755813888;
parameter    ap_ST_fsm_state41 = 159'd1099511627776;
parameter    ap_ST_fsm_state42 = 159'd2199023255552;
parameter    ap_ST_fsm_state43 = 159'd4398046511104;
parameter    ap_ST_fsm_state44 = 159'd8796093022208;
parameter    ap_ST_fsm_state45 = 159'd17592186044416;
parameter    ap_ST_fsm_pp0_stage0 = 159'd35184372088832;
parameter    ap_ST_fsm_state48 = 159'd70368744177664;
parameter    ap_ST_fsm_state49 = 159'd140737488355328;
parameter    ap_ST_fsm_state50 = 159'd281474976710656;
parameter    ap_ST_fsm_state51 = 159'd562949953421312;
parameter    ap_ST_fsm_state52 = 159'd1125899906842624;
parameter    ap_ST_fsm_state53 = 159'd2251799813685248;
parameter    ap_ST_fsm_state54 = 159'd4503599627370496;
parameter    ap_ST_fsm_state55 = 159'd9007199254740992;
parameter    ap_ST_fsm_state56 = 159'd18014398509481984;
parameter    ap_ST_fsm_state57 = 159'd36028797018963968;
parameter    ap_ST_fsm_state58 = 159'd72057594037927936;
parameter    ap_ST_fsm_state59 = 159'd144115188075855872;
parameter    ap_ST_fsm_state60 = 159'd288230376151711744;
parameter    ap_ST_fsm_state61 = 159'd576460752303423488;
parameter    ap_ST_fsm_state62 = 159'd1152921504606846976;
parameter    ap_ST_fsm_state63 = 159'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 159'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 159'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 159'd18446744073709551616;
parameter    ap_ST_fsm_state67 = 159'd36893488147419103232;
parameter    ap_ST_fsm_state68 = 159'd73786976294838206464;
parameter    ap_ST_fsm_state69 = 159'd147573952589676412928;
parameter    ap_ST_fsm_state70 = 159'd295147905179352825856;
parameter    ap_ST_fsm_state71 = 159'd590295810358705651712;
parameter    ap_ST_fsm_state72 = 159'd1180591620717411303424;
parameter    ap_ST_fsm_state73 = 159'd2361183241434822606848;
parameter    ap_ST_fsm_state74 = 159'd4722366482869645213696;
parameter    ap_ST_fsm_state75 = 159'd9444732965739290427392;
parameter    ap_ST_fsm_state76 = 159'd18889465931478580854784;
parameter    ap_ST_fsm_state77 = 159'd37778931862957161709568;
parameter    ap_ST_fsm_state78 = 159'd75557863725914323419136;
parameter    ap_ST_fsm_state79 = 159'd151115727451828646838272;
parameter    ap_ST_fsm_state80 = 159'd302231454903657293676544;
parameter    ap_ST_fsm_state81 = 159'd604462909807314587353088;
parameter    ap_ST_fsm_state82 = 159'd1208925819614629174706176;
parameter    ap_ST_fsm_state83 = 159'd2417851639229258349412352;
parameter    ap_ST_fsm_state84 = 159'd4835703278458516698824704;
parameter    ap_ST_fsm_state85 = 159'd9671406556917033397649408;
parameter    ap_ST_fsm_state86 = 159'd19342813113834066795298816;
parameter    ap_ST_fsm_state87 = 159'd38685626227668133590597632;
parameter    ap_ST_fsm_state88 = 159'd77371252455336267181195264;
parameter    ap_ST_fsm_state89 = 159'd154742504910672534362390528;
parameter    ap_ST_fsm_state90 = 159'd309485009821345068724781056;
parameter    ap_ST_fsm_state91 = 159'd618970019642690137449562112;
parameter    ap_ST_fsm_state92 = 159'd1237940039285380274899124224;
parameter    ap_ST_fsm_state93 = 159'd2475880078570760549798248448;
parameter    ap_ST_fsm_state94 = 159'd4951760157141521099596496896;
parameter    ap_ST_fsm_state95 = 159'd9903520314283042199192993792;
parameter    ap_ST_fsm_state96 = 159'd19807040628566084398385987584;
parameter    ap_ST_fsm_state97 = 159'd39614081257132168796771975168;
parameter    ap_ST_fsm_state98 = 159'd79228162514264337593543950336;
parameter    ap_ST_fsm_state99 = 159'd158456325028528675187087900672;
parameter    ap_ST_fsm_state100 = 159'd316912650057057350374175801344;
parameter    ap_ST_fsm_state101 = 159'd633825300114114700748351602688;
parameter    ap_ST_fsm_state102 = 159'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state103 = 159'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state104 = 159'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state105 = 159'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state106 = 159'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state107 = 159'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state108 = 159'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state109 = 159'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state110 = 159'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state111 = 159'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state112 = 159'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state113 = 159'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state114 = 159'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state115 = 159'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state116 = 159'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state117 = 159'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state118 = 159'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state119 = 159'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state120 = 159'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state121 = 159'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state122 = 159'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state123 = 159'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state124 = 159'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state125 = 159'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state126 = 159'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state127 = 159'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state128 = 159'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state129 = 159'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state130 = 159'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state131 = 159'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state132 = 159'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state133 = 159'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state134 = 159'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state135 = 159'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state136 = 159'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state137 = 159'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state138 = 159'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state139 = 159'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state140 = 159'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state141 = 159'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state142 = 159'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state143 = 159'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state144 = 159'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state145 = 159'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state146 = 159'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state147 = 159'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state148 = 159'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state149 = 159'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state150 = 159'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state151 = 159'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state152 = 159'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state153 = 159'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state154 = 159'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state155 = 159'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state156 = 159'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state157 = 159'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state158 = 159'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state159 = 159'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state160 = 159'd365375409332725729550921208179070754913983135744;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] J_address0;
output   J_ce0;
input  [31:0] J_q0;
output  [3:0] J_address1;
output   J_ce1;
input  [31:0] J_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [3:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
output  [3:0] x_address1;
output   x_ce1;
output   x_we1;
output  [31:0] x_d1;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] J_address0;
reg J_ce0;
reg[3:0] J_address1;
reg J_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg[1:0] b_address1;
reg b_ce1;
reg[3:0] x_address0;
reg x_ce0;
reg x_we0;
reg[31:0] x_d0;
reg[3:0] x_address1;
reg x_ce1;
reg x_we1;
reg[31:0] x_d1;

(* fsm_encoding = "none" *) reg   [158:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] x_new_load_1_2_reg_357;
reg  signed [31:0] x_new_load_1_1_reg_370;
reg  signed [31:0] x_new_load_1_reg_383;
reg  signed [31:0] x_new_load_1_3_reg_396;
reg   [4:0] t_reg_409;
wire   [63:0] grp_fu_461_p1;
reg   [63:0] reg_494;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state64;
wire   [63:0] grp_fu_464_p1;
reg   [63:0] reg_501;
wire   [63:0] grp_fu_420_p2;
reg   [63:0] reg_507;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state2;
reg   [31:0] J_load_reg_1135;
reg   [31:0] b_load_reg_1140;
reg   [31:0] J_load_1_reg_1145;
reg   [31:0] b_load_1_reg_1150;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_467_p1;
reg   [63:0] tmp_6_1_reg_1185;
wire   [63:0] grp_fu_470_p1;
reg   [63:0] tmp_7_1_reg_1190;
wire   [63:0] grp_fu_473_p1;
reg   [63:0] tmp_6_2_reg_1195;
wire   [63:0] grp_fu_477_p1;
reg   [63:0] tmp_7_2_reg_1200;
wire   [63:0] grp_fu_481_p1;
reg   [63:0] tmp_6_3_reg_1205;
wire   [63:0] grp_fu_485_p1;
reg   [63:0] tmp_7_3_reg_1210;
wire   [63:0] grp_fu_425_p2;
reg   [63:0] tmp_s_reg_1215;
wire    ap_CS_fsm_state14;
wire   [63:0] grp_fu_429_p2;
reg   [63:0] tmp_10_1_reg_1220;
wire   [63:0] grp_fu_433_p2;
reg   [63:0] tmp_10_2_reg_1225;
wire   [63:0] grp_fu_437_p2;
reg   [63:0] tmp_10_3_reg_1230;
wire   [63:0] p_Val2_s_fu_513_p1;
reg   [63:0] p_Val2_s_reg_1235;
wire    ap_CS_fsm_state45;
reg   [0:0] p_Result_s_reg_1241;
wire   [63:0] p_Val2_4_fu_525_p1;
reg   [63:0] p_Val2_4_reg_1246;
reg   [0:0] p_Result_1_reg_1252;
wire   [63:0] p_Val2_7_fu_537_p1;
reg   [63:0] p_Val2_7_reg_1257;
reg   [0:0] p_Result_2_reg_1263;
wire   [63:0] p_Val2_12_fu_549_p1;
reg   [63:0] p_Val2_12_reg_1268;
reg   [0:0] p_Result_3_reg_1274;
wire   [0:0] exitcond3_fu_561_p2;
reg   [0:0] exitcond3_reg_1279;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state46_pp0_stage0_iter0;
wire    ap_block_state47_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] t_1_fu_567_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] isNeg_fu_592_p3;
reg   [0:0] isNeg_reg_1288;
wire   [11:0] ush_fu_610_p3;
reg   [11:0] ush_reg_1293;
wire   [0:0] isNeg_1_fu_637_p3;
reg   [0:0] isNeg_1_reg_1298;
wire   [11:0] ush_1_fu_655_p3;
reg   [11:0] ush_1_reg_1303;
wire   [0:0] isNeg_2_fu_682_p3;
reg   [0:0] isNeg_2_reg_1308;
wire   [11:0] ush_2_fu_700_p3;
reg   [11:0] ush_2_reg_1313;
wire   [0:0] isNeg_3_fu_727_p3;
reg   [0:0] isNeg_3_reg_1318;
wire   [11:0] ush_3_fu_745_p3;
reg   [11:0] ush_3_reg_1323;
wire   [31:0] p_Val2_18_fu_828_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] p_Val2_20_fu_910_p3;
wire   [31:0] p_Val2_22_fu_992_p3;
wire   [31:0] p_Val2_24_fu_1074_p3;
wire   [31:0] tmp_4_fu_1081_p2;
reg   [31:0] tmp_4_reg_1348;
wire    ap_CS_fsm_state48;
wire   [31:0] tmp_4_1_fu_1087_p2;
reg   [31:0] tmp_4_1_reg_1353;
wire   [31:0] tmp_4_2_fu_1093_p2;
reg   [31:0] tmp_4_2_reg_1358;
wire    ap_CS_fsm_state49;
wire   [31:0] tmp_4_3_fu_1099_p2;
reg   [31:0] tmp_4_3_reg_1363;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state46;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state155;
wire    ap_CS_fsm_state156;
wire    ap_CS_fsm_state157;
wire    ap_CS_fsm_state158;
wire    ap_CS_fsm_state159;
wire    ap_CS_fsm_state160;
reg   [63:0] grp_fu_420_p0;
reg   [63:0] grp_fu_420_p1;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
reg   [31:0] grp_fu_461_p0;
reg   [31:0] grp_fu_464_p0;
wire    ap_CS_fsm_state130;
wire   [63:0] grp_fu_441_p2;
wire   [63:0] grp_fu_446_p2;
wire   [63:0] grp_fu_451_p2;
wire   [63:0] grp_fu_456_p2;
wire   [10:0] tmp_V_fu_573_p4;
wire   [11:0] tmp_i_i_i_i_cast4_fu_582_p1;
wire   [11:0] sh_assign_fu_586_p2;
wire   [10:0] tmp_i_i_i_fu_600_p2;
wire  signed [11:0] tmp_i_i_i_cast_fu_606_p1;
wire   [10:0] tmp_V_2_fu_618_p4;
wire   [11:0] tmp_i_i_i_i1_cast3_fu_627_p1;
wire   [11:0] sh_assign_3_fu_631_p2;
wire   [10:0] tmp_i_i_i1_fu_645_p2;
wire  signed [11:0] tmp_i_i_i1_cast_fu_651_p1;
wire   [10:0] tmp_V_4_fu_663_p4;
wire   [11:0] tmp_i_i_i_i2_cast2_fu_672_p1;
wire   [11:0] sh_assign_6_fu_676_p2;
wire   [10:0] tmp_i_i_i2_fu_690_p2;
wire  signed [11:0] tmp_i_i_i2_cast_fu_696_p1;
wire   [10:0] tmp_V_6_fu_708_p4;
wire   [11:0] tmp_i_i_i_i3_cast1_fu_717_p1;
wire   [11:0] sh_assign_9_fu_721_p2;
wire   [10:0] tmp_i_i_i3_fu_735_p2;
wire  signed [11:0] tmp_i_i_i3_cast_fu_741_p1;
wire   [51:0] tmp_V_1_fu_753_p1;
wire   [53:0] mantissa_V_fu_756_p4;
wire  signed [31:0] sh_assign_2_cast_fu_770_p1;
wire   [53:0] tmp_i_i_i_cast_7_fu_777_p1;
wire   [136:0] mantissa_V_1_cast_fu_766_p1;
wire   [136:0] tmp_i_i_i_6_fu_773_p1;
wire   [53:0] r_V_fu_781_p2;
wire   [0:0] tmp_17_fu_793_p3;
wire   [136:0] r_V_1_fu_787_p2;
wire   [31:0] tmp_2_fu_801_p1;
wire   [31:0] tmp_3_fu_805_p4;
wire   [31:0] p_Val2_17_fu_815_p3;
wire   [31:0] result_V_1_fu_822_p2;
wire   [51:0] tmp_V_3_fu_835_p1;
wire   [53:0] mantissa_V_1_fu_838_p4;
wire  signed [31:0] sh_assign_5_cast_fu_852_p1;
wire   [53:0] tmp_i_i_i1_cast_9_fu_859_p1;
wire   [136:0] mantissa_V_3_cast_fu_848_p1;
wire   [136:0] tmp_i_i_i1_8_fu_855_p1;
wire   [53:0] r_V_2_fu_863_p2;
wire   [0:0] tmp_22_fu_875_p3;
wire   [136:0] r_V_3_fu_869_p2;
wire   [31:0] tmp_1_fu_883_p1;
wire   [31:0] tmp_8_fu_887_p4;
wire   [31:0] p_Val2_19_fu_897_p3;
wire   [31:0] result_V_3_fu_904_p2;
wire   [51:0] tmp_V_5_fu_917_p1;
wire   [53:0] mantissa_V_2_fu_920_p4;
wire  signed [31:0] sh_assign_8_cast_fu_934_p1;
wire   [53:0] tmp_i_i_i2_cast_11_fu_941_p1;
wire   [136:0] mantissa_V_5_cast_fu_930_p1;
wire   [136:0] tmp_i_i_i2_10_fu_937_p1;
wire   [53:0] r_V_4_fu_945_p2;
wire   [0:0] tmp_25_fu_957_p3;
wire   [136:0] r_V_5_fu_951_p2;
wire   [31:0] tmp_9_fu_965_p1;
wire   [31:0] tmp_10_fu_969_p4;
wire   [31:0] p_Val2_21_fu_979_p3;
wire   [31:0] result_V_5_fu_986_p2;
wire   [51:0] tmp_V_7_fu_999_p1;
wire   [53:0] mantissa_V_3_fu_1002_p4;
wire  signed [31:0] sh_assign_11_cast_fu_1016_p1;
wire   [53:0] tmp_i_i_i3_cast_13_fu_1023_p1;
wire   [136:0] mantissa_V_7_cast_fu_1012_p1;
wire   [136:0] tmp_i_i_i3_12_fu_1019_p1;
wire   [53:0] r_V_6_fu_1027_p2;
wire   [0:0] tmp_28_fu_1039_p3;
wire   [136:0] r_V_7_fu_1033_p2;
wire   [31:0] tmp_11_fu_1047_p1;
wire   [31:0] tmp_12_fu_1051_p4;
wire   [31:0] p_Val2_23_fu_1061_p3;
wire   [31:0] result_V_7_fu_1068_p2;
wire   [63:0] grp_fu_489_p2;
reg   [158:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 159'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

jacobi_HLS_dadd_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dadd_6bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_420_p0),
    .din1(grp_fu_420_p1),
    .ce(1'b1),
    .dout(grp_fu_420_p2)
);

jacobi_HLS_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_494),
    .din1(reg_501),
    .ce(1'b1),
    .dout(grp_fu_425_p2)
);

jacobi_HLS_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_1_reg_1185),
    .din1(tmp_7_1_reg_1190),
    .ce(1'b1),
    .dout(grp_fu_429_p2)
);

jacobi_HLS_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_2_reg_1195),
    .din1(tmp_7_2_reg_1200),
    .ce(1'b1),
    .dout(grp_fu_433_p2)
);

jacobi_HLS_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_3_reg_1205),
    .din1(tmp_7_3_reg_1210),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

jacobi_HLS_ddiv_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_s_reg_1215),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

jacobi_HLS_ddiv_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_10_1_reg_1220),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

jacobi_HLS_ddiv_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_10_2_reg_1225),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

jacobi_HLS_ddiv_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_10_3_reg_1230),
    .ce(1'b1),
    .dout(grp_fu_456_p2)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_461_p0),
    .ce(1'b1),
    .dout(grp_fu_461_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_464_p0),
    .ce(1'b1),
    .dout(grp_fu_464_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(J_load_1_reg_1145),
    .ce(1'b1),
    .dout(grp_fu_467_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_load_1_reg_1150),
    .ce(1'b1),
    .dout(grp_fu_470_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(J_q0),
    .ce(1'b1),
    .dout(grp_fu_473_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q0),
    .ce(1'b1),
    .dout(grp_fu_477_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(J_q1),
    .ce(1'b1),
    .dout(grp_fu_481_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q1),
    .ce(1'b1),
    .dout(grp_fu_485_p1)
);

jacobi_HLS_dsqrt_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dsqrt_fYi_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_507),
    .ce(1'b1),
    .dout(grp_fu_489_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state46) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state46))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state46);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        t_reg_409 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_fu_561_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_409 <= t_1_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        x_new_load_1_1_reg_370 <= 32'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_1279 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_new_load_1_1_reg_370 <= p_Val2_20_fu_910_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        x_new_load_1_2_reg_357 <= 32'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_1279 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_new_load_1_2_reg_357 <= p_Val2_22_fu_992_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        x_new_load_1_3_reg_396 <= 32'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_1279 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_new_load_1_3_reg_396 <= p_Val2_24_fu_1074_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        x_new_load_1_reg_383 <= 32'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_1279 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_new_load_1_reg_383 <= p_Val2_18_fu_828_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        J_load_1_reg_1145 <= J_q1;
        J_load_reg_1135 <= J_q0;
        b_load_1_reg_1150 <= b_q1;
        b_load_reg_1140 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond3_reg_1279 <= exitcond3_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        isNeg_1_reg_1298 <= sh_assign_3_fu_631_p2[32'd11];
        isNeg_2_reg_1308 <= sh_assign_6_fu_676_p2[32'd11];
        isNeg_3_reg_1318 <= sh_assign_9_fu_721_p2[32'd11];
        isNeg_reg_1288 <= sh_assign_fu_586_p2[32'd11];
        ush_1_reg_1303 <= ush_1_fu_655_p3;
        ush_2_reg_1313 <= ush_2_fu_700_p3;
        ush_3_reg_1323 <= ush_3_fu_745_p3;
        ush_reg_1293 <= ush_fu_610_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        p_Result_1_reg_1252 <= p_Val2_4_fu_525_p1[32'd63];
        p_Result_2_reg_1263 <= p_Val2_7_fu_537_p1[32'd63];
        p_Result_3_reg_1274 <= p_Val2_12_fu_549_p1[32'd63];
        p_Result_s_reg_1241 <= p_Val2_s_fu_513_p1[32'd63];
        p_Val2_12_reg_1268 <= p_Val2_12_fu_549_p1;
        p_Val2_4_reg_1246 <= p_Val2_4_fu_525_p1;
        p_Val2_7_reg_1257 <= p_Val2_7_fu_537_p1;
        p_Val2_s_reg_1235 <= p_Val2_s_fu_513_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_494 <= grp_fu_461_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_501 <= grp_fu_464_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state59))) begin
        reg_507 <= grp_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_10_1_reg_1220 <= grp_fu_429_p2;
        tmp_10_2_reg_1225 <= grp_fu_433_p2;
        tmp_10_3_reg_1230 <= grp_fu_437_p2;
        tmp_s_reg_1215 <= grp_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_4_1_reg_1353 <= tmp_4_1_fu_1087_p2;
        tmp_4_reg_1348 <= tmp_4_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_4_2_reg_1358 <= tmp_4_2_fu_1093_p2;
        tmp_4_3_reg_1363 <= tmp_4_3_fu_1099_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_6_1_reg_1185 <= grp_fu_467_p1;
        tmp_6_2_reg_1195 <= grp_fu_473_p1;
        tmp_6_3_reg_1205 <= grp_fu_481_p1;
        tmp_7_1_reg_1190 <= grp_fu_470_p1;
        tmp_7_2_reg_1200 <= grp_fu_477_p1;
        tmp_7_3_reg_1210 <= grp_fu_485_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        J_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        J_address0 = 64'd18446744073709551612;
    end else begin
        J_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        J_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        J_address1 = 64'd1;
    end else begin
        J_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        J_ce0 = 1'b1;
    end else begin
        J_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        J_ce1 = 1'b1;
    end else begin
        J_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_561_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state46 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state46 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd0;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address1 = 64'd1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state60))) begin
        grp_fu_420_p0 = reg_507;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_420_p0 = reg_494;
    end else begin
        grp_fu_420_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state70))) begin
        grp_fu_420_p1 = 64'd4607182418800017408;
    end else if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state60))) begin
        grp_fu_420_p1 = reg_494;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_420_p1 = reg_501;
    end else begin
        grp_fu_420_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_461_p0 = tmp_4_3_reg_1363;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_461_p0 = tmp_4_2_reg_1358;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_461_p0 = tmp_4_reg_1348;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_461_p0 = J_load_reg_1135;
    end else begin
        grp_fu_461_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_464_p0 = tmp_4_1_reg_1353;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_464_p0 = b_load_reg_1140;
    end else begin
        grp_fu_464_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        x_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        x_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        x_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        x_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        x_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        x_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        x_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        x_address0 = 64'd0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        x_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        x_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        x_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        x_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        x_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        x_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        x_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        x_address1 = 64'd1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state155))) begin
        x_d0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        x_d0 = x_new_load_1_2_reg_357;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        x_d0 = x_new_load_1_reg_383;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state155))) begin
        x_d1 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        x_d1 = x_new_load_1_3_reg_396;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        x_d1 = x_new_load_1_1_reg_370;
    end else begin
        x_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        x_we1 = 1'b1;
    end else begin
        x_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_561_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_561_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd97];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = grp_fu_489_p2;

assign exitcond3_fu_561_p2 = ((t_reg_409 == 5'd16) ? 1'b1 : 1'b0);

assign isNeg_1_fu_637_p3 = sh_assign_3_fu_631_p2[32'd11];

assign isNeg_2_fu_682_p3 = sh_assign_6_fu_676_p2[32'd11];

assign isNeg_3_fu_727_p3 = sh_assign_9_fu_721_p2[32'd11];

assign isNeg_fu_592_p3 = sh_assign_fu_586_p2[32'd11];

assign mantissa_V_1_cast_fu_766_p1 = mantissa_V_fu_756_p4;

assign mantissa_V_1_fu_838_p4 = {{{{1'd1}, {tmp_V_3_fu_835_p1}}}, {1'd0}};

assign mantissa_V_2_fu_920_p4 = {{{{1'd1}, {tmp_V_5_fu_917_p1}}}, {1'd0}};

assign mantissa_V_3_cast_fu_848_p1 = mantissa_V_1_fu_838_p4;

assign mantissa_V_3_fu_1002_p4 = {{{{1'd1}, {tmp_V_7_fu_999_p1}}}, {1'd0}};

assign mantissa_V_5_cast_fu_930_p1 = mantissa_V_2_fu_920_p4;

assign mantissa_V_7_cast_fu_1012_p1 = mantissa_V_3_fu_1002_p4;

assign mantissa_V_fu_756_p4 = {{{{1'd1}, {tmp_V_1_fu_753_p1}}}, {1'd0}};

assign p_Val2_12_fu_549_p1 = grp_fu_456_p2;

assign p_Val2_17_fu_815_p3 = ((isNeg_reg_1288[0:0] === 1'b1) ? tmp_2_fu_801_p1 : tmp_3_fu_805_p4);

assign p_Val2_18_fu_828_p3 = ((p_Result_s_reg_1241[0:0] === 1'b1) ? result_V_1_fu_822_p2 : p_Val2_17_fu_815_p3);

assign p_Val2_19_fu_897_p3 = ((isNeg_1_reg_1298[0:0] === 1'b1) ? tmp_1_fu_883_p1 : tmp_8_fu_887_p4);

assign p_Val2_20_fu_910_p3 = ((p_Result_1_reg_1252[0:0] === 1'b1) ? result_V_3_fu_904_p2 : p_Val2_19_fu_897_p3);

assign p_Val2_21_fu_979_p3 = ((isNeg_2_reg_1308[0:0] === 1'b1) ? tmp_9_fu_965_p1 : tmp_10_fu_969_p4);

assign p_Val2_22_fu_992_p3 = ((p_Result_2_reg_1263[0:0] === 1'b1) ? result_V_5_fu_986_p2 : p_Val2_21_fu_979_p3);

assign p_Val2_23_fu_1061_p3 = ((isNeg_3_reg_1318[0:0] === 1'b1) ? tmp_11_fu_1047_p1 : tmp_12_fu_1051_p4);

assign p_Val2_24_fu_1074_p3 = ((p_Result_3_reg_1274[0:0] === 1'b1) ? result_V_7_fu_1068_p2 : p_Val2_23_fu_1061_p3);

assign p_Val2_4_fu_525_p1 = grp_fu_446_p2;

assign p_Val2_7_fu_537_p1 = grp_fu_451_p2;

assign p_Val2_s_fu_513_p1 = grp_fu_441_p2;

assign r_V_1_fu_787_p2 = mantissa_V_1_cast_fu_766_p1 << tmp_i_i_i_6_fu_773_p1;

assign r_V_2_fu_863_p2 = mantissa_V_1_fu_838_p4 >> tmp_i_i_i1_cast_9_fu_859_p1;

assign r_V_3_fu_869_p2 = mantissa_V_3_cast_fu_848_p1 << tmp_i_i_i1_8_fu_855_p1;

assign r_V_4_fu_945_p2 = mantissa_V_2_fu_920_p4 >> tmp_i_i_i2_cast_11_fu_941_p1;

assign r_V_5_fu_951_p2 = mantissa_V_5_cast_fu_930_p1 << tmp_i_i_i2_10_fu_937_p1;

assign r_V_6_fu_1027_p2 = mantissa_V_3_fu_1002_p4 >> tmp_i_i_i3_cast_13_fu_1023_p1;

assign r_V_7_fu_1033_p2 = mantissa_V_7_cast_fu_1012_p1 << tmp_i_i_i3_12_fu_1019_p1;

assign r_V_fu_781_p2 = mantissa_V_fu_756_p4 >> tmp_i_i_i_cast_7_fu_777_p1;

assign result_V_1_fu_822_p2 = (32'd0 - p_Val2_17_fu_815_p3);

assign result_V_3_fu_904_p2 = (32'd0 - p_Val2_19_fu_897_p3);

assign result_V_5_fu_986_p2 = (32'd0 - p_Val2_21_fu_979_p3);

assign result_V_7_fu_1068_p2 = (32'd0 - p_Val2_23_fu_1061_p3);

assign sh_assign_11_cast_fu_1016_p1 = $signed(ush_3_reg_1323);

assign sh_assign_2_cast_fu_770_p1 = $signed(ush_reg_1293);

assign sh_assign_3_fu_631_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i1_cast3_fu_627_p1));

assign sh_assign_5_cast_fu_852_p1 = $signed(ush_1_reg_1303);

assign sh_assign_6_fu_676_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i2_cast2_fu_672_p1));

assign sh_assign_8_cast_fu_934_p1 = $signed(ush_2_reg_1313);

assign sh_assign_9_fu_721_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i3_cast1_fu_717_p1));

assign sh_assign_fu_586_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast4_fu_582_p1));

assign t_1_fu_567_p2 = (t_reg_409 + 5'd1);

assign tmp_10_fu_969_p4 = {{r_V_5_fu_951_p2[84:53]}};

assign tmp_11_fu_1047_p1 = tmp_28_fu_1039_p3;

assign tmp_12_fu_1051_p4 = {{r_V_7_fu_1033_p2[84:53]}};

assign tmp_17_fu_793_p3 = r_V_fu_781_p2[32'd53];

assign tmp_1_fu_883_p1 = tmp_22_fu_875_p3;

assign tmp_22_fu_875_p3 = r_V_2_fu_863_p2[32'd53];

assign tmp_25_fu_957_p3 = r_V_4_fu_945_p2[32'd53];

assign tmp_28_fu_1039_p3 = r_V_6_fu_1027_p2[32'd53];

assign tmp_2_fu_801_p1 = tmp_17_fu_793_p3;

assign tmp_3_fu_805_p4 = {{r_V_1_fu_787_p2[84:53]}};

assign tmp_4_1_fu_1087_p2 = ($signed(x_new_load_1_1_reg_370) * $signed(x_new_load_1_1_reg_370));

assign tmp_4_2_fu_1093_p2 = ($signed(x_new_load_1_2_reg_357) * $signed(x_new_load_1_2_reg_357));

assign tmp_4_3_fu_1099_p2 = ($signed(x_new_load_1_3_reg_396) * $signed(x_new_load_1_3_reg_396));

assign tmp_4_fu_1081_p2 = ($signed(x_new_load_1_reg_383) * $signed(x_new_load_1_reg_383));

assign tmp_8_fu_887_p4 = {{r_V_3_fu_869_p2[84:53]}};

assign tmp_9_fu_965_p1 = tmp_25_fu_957_p3;

assign tmp_V_1_fu_753_p1 = p_Val2_s_reg_1235[51:0];

assign tmp_V_2_fu_618_p4 = {{p_Val2_4_reg_1246[62:52]}};

assign tmp_V_3_fu_835_p1 = p_Val2_4_reg_1246[51:0];

assign tmp_V_4_fu_663_p4 = {{p_Val2_7_reg_1257[62:52]}};

assign tmp_V_5_fu_917_p1 = p_Val2_7_reg_1257[51:0];

assign tmp_V_6_fu_708_p4 = {{p_Val2_12_reg_1268[62:52]}};

assign tmp_V_7_fu_999_p1 = p_Val2_12_reg_1268[51:0];

assign tmp_V_fu_573_p4 = {{p_Val2_s_reg_1235[62:52]}};

assign tmp_i_i_i1_8_fu_855_p1 = $unsigned(sh_assign_5_cast_fu_852_p1);

assign tmp_i_i_i1_cast_9_fu_859_p1 = $unsigned(sh_assign_5_cast_fu_852_p1);

assign tmp_i_i_i1_cast_fu_651_p1 = $signed(tmp_i_i_i1_fu_645_p2);

assign tmp_i_i_i1_fu_645_p2 = (11'd1023 - tmp_V_2_fu_618_p4);

assign tmp_i_i_i2_10_fu_937_p1 = $unsigned(sh_assign_8_cast_fu_934_p1);

assign tmp_i_i_i2_cast_11_fu_941_p1 = $unsigned(sh_assign_8_cast_fu_934_p1);

assign tmp_i_i_i2_cast_fu_696_p1 = $signed(tmp_i_i_i2_fu_690_p2);

assign tmp_i_i_i2_fu_690_p2 = (11'd1023 - tmp_V_4_fu_663_p4);

assign tmp_i_i_i3_12_fu_1019_p1 = $unsigned(sh_assign_11_cast_fu_1016_p1);

assign tmp_i_i_i3_cast_13_fu_1023_p1 = $unsigned(sh_assign_11_cast_fu_1016_p1);

assign tmp_i_i_i3_cast_fu_741_p1 = $signed(tmp_i_i_i3_fu_735_p2);

assign tmp_i_i_i3_fu_735_p2 = (11'd1023 - tmp_V_6_fu_708_p4);

assign tmp_i_i_i_6_fu_773_p1 = $unsigned(sh_assign_2_cast_fu_770_p1);

assign tmp_i_i_i_cast_7_fu_777_p1 = $unsigned(sh_assign_2_cast_fu_770_p1);

assign tmp_i_i_i_cast_fu_606_p1 = $signed(tmp_i_i_i_fu_600_p2);

assign tmp_i_i_i_fu_600_p2 = (11'd1023 - tmp_V_fu_573_p4);

assign tmp_i_i_i_i1_cast3_fu_627_p1 = tmp_V_2_fu_618_p4;

assign tmp_i_i_i_i2_cast2_fu_672_p1 = tmp_V_4_fu_663_p4;

assign tmp_i_i_i_i3_cast1_fu_717_p1 = tmp_V_6_fu_708_p4;

assign tmp_i_i_i_i_cast4_fu_582_p1 = tmp_V_fu_573_p4;

assign ush_1_fu_655_p3 = ((isNeg_1_fu_637_p3[0:0] === 1'b1) ? tmp_i_i_i1_cast_fu_651_p1 : sh_assign_3_fu_631_p2);

assign ush_2_fu_700_p3 = ((isNeg_2_fu_682_p3[0:0] === 1'b1) ? tmp_i_i_i2_cast_fu_696_p1 : sh_assign_6_fu_676_p2);

assign ush_3_fu_745_p3 = ((isNeg_3_fu_727_p3[0:0] === 1'b1) ? tmp_i_i_i3_cast_fu_741_p1 : sh_assign_9_fu_721_p2);

assign ush_fu_610_p3 = ((isNeg_fu_592_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_606_p1 : sh_assign_fu_586_p2);

endmodule //jacobi_HLS
