// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="jacobi_HLS,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=7480,HLS_SYN_LUT=10222,HLS_VERSION=2018_3}" *)

module jacobi_HLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        J_address0,
        J_ce0,
        J_q0,
        b_address0,
        b_ce0,
        b_q0,
        n,
        iter,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 107'd1;
parameter    ap_ST_fsm_state2 = 107'd2;
parameter    ap_ST_fsm_state3 = 107'd4;
parameter    ap_ST_fsm_state4 = 107'd8;
parameter    ap_ST_fsm_state5 = 107'd16;
parameter    ap_ST_fsm_state6 = 107'd32;
parameter    ap_ST_fsm_state7 = 107'd64;
parameter    ap_ST_fsm_state8 = 107'd128;
parameter    ap_ST_fsm_state9 = 107'd256;
parameter    ap_ST_fsm_state10 = 107'd512;
parameter    ap_ST_fsm_state11 = 107'd1024;
parameter    ap_ST_fsm_state12 = 107'd2048;
parameter    ap_ST_fsm_state13 = 107'd4096;
parameter    ap_ST_fsm_state14 = 107'd8192;
parameter    ap_ST_fsm_state15 = 107'd16384;
parameter    ap_ST_fsm_state16 = 107'd32768;
parameter    ap_ST_fsm_state17 = 107'd65536;
parameter    ap_ST_fsm_state18 = 107'd131072;
parameter    ap_ST_fsm_state19 = 107'd262144;
parameter    ap_ST_fsm_state20 = 107'd524288;
parameter    ap_ST_fsm_state21 = 107'd1048576;
parameter    ap_ST_fsm_state22 = 107'd2097152;
parameter    ap_ST_fsm_state23 = 107'd4194304;
parameter    ap_ST_fsm_state24 = 107'd8388608;
parameter    ap_ST_fsm_state25 = 107'd16777216;
parameter    ap_ST_fsm_state26 = 107'd33554432;
parameter    ap_ST_fsm_state27 = 107'd67108864;
parameter    ap_ST_fsm_state28 = 107'd134217728;
parameter    ap_ST_fsm_state29 = 107'd268435456;
parameter    ap_ST_fsm_state30 = 107'd536870912;
parameter    ap_ST_fsm_state31 = 107'd1073741824;
parameter    ap_ST_fsm_state32 = 107'd2147483648;
parameter    ap_ST_fsm_state33 = 107'd4294967296;
parameter    ap_ST_fsm_state34 = 107'd8589934592;
parameter    ap_ST_fsm_state35 = 107'd17179869184;
parameter    ap_ST_fsm_state36 = 107'd34359738368;
parameter    ap_ST_fsm_state37 = 107'd68719476736;
parameter    ap_ST_fsm_state38 = 107'd137438953472;
parameter    ap_ST_fsm_state39 = 107'd274877906944;
parameter    ap_ST_fsm_state40 = 107'd549755813888;
parameter    ap_ST_fsm_state41 = 107'd1099511627776;
parameter    ap_ST_fsm_state42 = 107'd2199023255552;
parameter    ap_ST_fsm_state43 = 107'd4398046511104;
parameter    ap_ST_fsm_state44 = 107'd8796093022208;
parameter    ap_ST_fsm_state45 = 107'd17592186044416;
parameter    ap_ST_fsm_state46 = 107'd35184372088832;
parameter    ap_ST_fsm_state47 = 107'd70368744177664;
parameter    ap_ST_fsm_state48 = 107'd140737488355328;
parameter    ap_ST_fsm_state49 = 107'd281474976710656;
parameter    ap_ST_fsm_state50 = 107'd562949953421312;
parameter    ap_ST_fsm_state51 = 107'd1125899906842624;
parameter    ap_ST_fsm_state52 = 107'd2251799813685248;
parameter    ap_ST_fsm_state53 = 107'd4503599627370496;
parameter    ap_ST_fsm_state54 = 107'd9007199254740992;
parameter    ap_ST_fsm_state55 = 107'd18014398509481984;
parameter    ap_ST_fsm_state56 = 107'd36028797018963968;
parameter    ap_ST_fsm_state57 = 107'd72057594037927936;
parameter    ap_ST_fsm_state58 = 107'd144115188075855872;
parameter    ap_ST_fsm_state59 = 107'd288230376151711744;
parameter    ap_ST_fsm_state60 = 107'd576460752303423488;
parameter    ap_ST_fsm_state61 = 107'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 107'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 107'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 107'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 107'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 107'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 107'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 107'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 107'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 107'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 107'd1180591620717411303424;
parameter    ap_ST_fsm_pp1_stage0 = 107'd2361183241434822606848;
parameter    ap_ST_fsm_pp1_stage1 = 107'd4722366482869645213696;
parameter    ap_ST_fsm_pp1_stage2 = 107'd9444732965739290427392;
parameter    ap_ST_fsm_pp1_stage3 = 107'd18889465931478580854784;
parameter    ap_ST_fsm_pp1_stage4 = 107'd37778931862957161709568;
parameter    ap_ST_fsm_state86 = 107'd75557863725914323419136;
parameter    ap_ST_fsm_state87 = 107'd151115727451828646838272;
parameter    ap_ST_fsm_state88 = 107'd302231454903657293676544;
parameter    ap_ST_fsm_state89 = 107'd604462909807314587353088;
parameter    ap_ST_fsm_state90 = 107'd1208925819614629174706176;
parameter    ap_ST_fsm_state91 = 107'd2417851639229258349412352;
parameter    ap_ST_fsm_state92 = 107'd4835703278458516698824704;
parameter    ap_ST_fsm_state93 = 107'd9671406556917033397649408;
parameter    ap_ST_fsm_state94 = 107'd19342813113834066795298816;
parameter    ap_ST_fsm_state95 = 107'd38685626227668133590597632;
parameter    ap_ST_fsm_state96 = 107'd77371252455336267181195264;
parameter    ap_ST_fsm_state97 = 107'd154742504910672534362390528;
parameter    ap_ST_fsm_state98 = 107'd309485009821345068724781056;
parameter    ap_ST_fsm_state99 = 107'd618970019642690137449562112;
parameter    ap_ST_fsm_state100 = 107'd1237940039285380274899124224;
parameter    ap_ST_fsm_state101 = 107'd2475880078570760549798248448;
parameter    ap_ST_fsm_state102 = 107'd4951760157141521099596496896;
parameter    ap_ST_fsm_state103 = 107'd9903520314283042199192993792;
parameter    ap_ST_fsm_state104 = 107'd19807040628566084398385987584;
parameter    ap_ST_fsm_state105 = 107'd39614081257132168796771975168;
parameter    ap_ST_fsm_state106 = 107'd79228162514264337593543950336;
parameter    ap_ST_fsm_state107 = 107'd158456325028528675187087900672;
parameter    ap_ST_fsm_state108 = 107'd316912650057057350374175801344;
parameter    ap_ST_fsm_state109 = 107'd633825300114114700748351602688;
parameter    ap_ST_fsm_state110 = 107'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state111 = 107'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state112 = 107'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state113 = 107'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state114 = 107'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state115 = 107'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state116 = 107'd81129638414606681695789005144064;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] J_address0;
output   J_ce0;
input  [31:0] J_q0;
output  [1:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
input  [31:0] n;
input  [31:0] iter;
output  [3:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg J_ce0;
reg b_ce0;
reg x_ce0;
reg x_we0;

(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] sum_reg_271;
reg   [30:0] q_reg_283;
wire   [63:0] grp_fu_310_p1;
reg   [63:0] reg_320;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_pp1_stage3;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state75_pp1_stage3_iter0;
wire    ap_block_state80_pp1_stage3_iter1;
wire    ap_block_state85_pp1_stage3_iter2;
wire    ap_block_pp1_stage3_11001;
reg   [0:0] tmp_6_reg_761;
reg   [0:0] tmp_6_reg_761_pp1_iter1_reg;
wire   [63:0] grp_fu_294_p2;
reg   [63:0] reg_327;
wire    ap_CS_fsm_state20;
reg   [0:0] tmp_18_reg_720;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_6_reg_761_pp1_iter2_reg;
wire   [30:0] i_1_fu_342_p2;
wire    ap_CS_fsm_state2;
reg   [3:0] x_new_addr_1_reg_648;
wire    ap_CS_fsm_state3;
reg   [3:0] x_prev_addr_1_reg_653;
wire   [0:0] tmp_4_fu_363_p2;
wire    ap_CS_fsm_state4;
wire   [30:0] t_1_fu_368_p2;
reg   [30:0] t_1_reg_662;
wire   [31:0] i1_cast_fu_374_p1;
reg   [31:0] i1_cast_reg_667;
wire    ap_CS_fsm_state6;
wire   [30:0] i_2_fu_383_p2;
reg   [30:0] i_2_reg_675;
wire   [63:0] tmp_16_fu_407_p1;
reg   [63:0] tmp_16_reg_680;
wire   [0:0] tmp_5_fu_378_p2;
reg  signed [31:0] J_load_reg_696;
wire    ap_CS_fsm_state7;
wire   [31:0] x_prev_q0;
reg  signed [31:0] x_prev_load_1_reg_702;
wire   [31:0] tmp_17_fu_427_p2;
reg   [31:0] tmp_17_reg_707;
wire    ap_CS_fsm_state8;
wire   [31:0] j_1_fu_436_p2;
reg   [31:0] j_1_reg_715;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_18_fu_442_p2;
wire   [0:0] exitcond_fu_431_p2;
wire   [63:0] sigma_1_fu_447_p3;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [63:0] grp_fu_301_p2;
reg   [63:0] tmp_15_reg_740;
wire    ap_CS_fsm_state38;
wire   [63:0] grp_fu_305_p2;
reg   [63:0] x_assign_reg_745;
wire    ap_CS_fsm_state69;
reg   [0:0] p_Result_s_reg_750;
wire    ap_CS_fsm_state70;
wire   [31:0] p_Val2_5_fu_575_p3;
reg   [31:0] p_Val2_5_reg_755;
wire   [0:0] tmp_6_fu_599_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state72_pp1_stage0_iter0;
wire    ap_block_state77_pp1_stage0_iter1;
wire    ap_block_state82_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [30:0] q_1_fu_604_p2;
reg   [30:0] q_1_reg_765;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_s_fu_610_p1;
reg   [63:0] tmp_s_reg_770;
wire  signed [31:0] tmp_2_fu_616_p2;
reg  signed [31:0] tmp_2_reg_785;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state73_pp1_stage1_iter0;
wire    ap_block_state78_pp1_stage1_iter1;
wire    ap_block_state83_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
wire   [31:0] tmp_9_fu_622_p2;
reg   [31:0] tmp_9_reg_791;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state74_pp1_stage2_iter0;
wire    ap_block_state79_pp1_stage2_iter1;
wire    ap_block_state84_pp1_stage2_iter2;
wire    ap_block_pp1_stage2_11001;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state72;
wire    ap_block_state76_pp1_stage4_iter0;
wire    ap_block_state81_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_subdone;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage3_subdone;
reg   [3:0] x_prev_address0;
reg    x_prev_ce0;
reg    x_prev_we0;
reg   [31:0] x_prev_d0;
reg   [3:0] x_new_address0;
reg    x_new_ce0;
reg    x_new_we0;
reg   [31:0] x_new_d0;
wire   [31:0] x_new_q0;
reg   [30:0] i_reg_215;
wire   [0:0] tmp_fu_337_p2;
reg   [30:0] t_reg_226;
reg   [30:0] i1_reg_237;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state71;
reg   [63:0] sigma_reg_248;
reg   [31:0] j_reg_260;
reg   [30:0] ap_phi_mux_q_phi_fu_287_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_1_fu_348_p1;
wire  signed [63:0] tmp_3_fu_354_p1;
wire  signed [63:0] tmp_22_cast_fu_422_p1;
wire    ap_block_pp1_stage1;
wire   [31:0] p_Val2_6_fu_588_p3;
reg   [63:0] grp_fu_294_p0;
reg   [63:0] grp_fu_294_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state28;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state39;
reg   [31:0] grp_fu_310_p0;
wire    ap_CS_fsm_state9;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_state86;
wire   [31:0] i_cast_fu_333_p1;
wire  signed [31:0] tmp_fu_337_p1;
wire  signed [31:0] tmp_3_fu_354_p0;
wire   [31:0] t_cast_fu_359_p1;
wire  signed [31:0] tmp_4_fu_363_p1;
wire   [3:0] tmp_7_fu_389_p1;
wire   [3:0] tmp_11_fu_393_p2;
wire   [5:0] tmp_21_cast_fu_399_p3;
wire   [5:0] tmp_21_fu_412_p1;
wire   [5:0] tmp_22_fu_416_p2;
wire   [63:0] p_Val2_s_fu_454_p1;
wire   [51:0] tmp_V_1_fu_475_p1;
wire   [53:0] mantissa_V_fu_479_p4;
wire   [10:0] tmp_V_fu_465_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_493_p1;
wire   [11:0] sh_assign_fu_497_p2;
wire   [10:0] tmp_i_i_i_fu_511_p2;
wire   [0:0] isNeg_fu_503_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_517_p1;
wire   [11:0] ush_fu_521_p3;
wire  signed [31:0] sh_assign_2_cast_fu_529_p1;
wire   [53:0] tmp_i_i_i_cast_8_fu_537_p1;
wire   [136:0] mantissa_V_1_cast_fu_489_p1;
wire   [136:0] tmp_i_i_i_7_fu_533_p1;
wire   [53:0] r_V_fu_541_p2;
wire   [0:0] tmp_28_fu_553_p3;
wire   [136:0] r_V_1_fu_547_p2;
wire   [31:0] tmp_23_fu_561_p1;
wire   [31:0] tmp_24_fu_565_p4;
wire   [31:0] result_V_1_fu_583_p2;
wire   [31:0] q_cast_fu_595_p1;
wire  signed [31:0] tmp_6_fu_599_p1;
wire    ap_block_pp1_stage2;
reg   [1:0] grp_fu_294_opcode;
wire    ap_block_pp1_stage4_00001;
wire   [63:0] grp_fu_314_p2;
wire    ap_CS_fsm_state116;
reg   [106:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage4_11001;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 107'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

jacobi_HLS_x_prev #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_prev_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_prev_address0),
    .ce0(x_prev_ce0),
    .we0(x_prev_we0),
    .d0(x_prev_d0),
    .q0(x_prev_q0)
);

jacobi_HLS_x_prev #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_new_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_new_address0),
    .ce0(x_new_ce0),
    .we0(x_new_we0),
    .d0(x_new_d0),
    .q0(x_new_q0)
);

jacobi_HLS_dadddsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dadddsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_294_p0),
    .din1(grp_fu_294_p1),
    .opcode(grp_fu_294_opcode),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

jacobi_HLS_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_320),
    .din1(reg_327),
    .ce(1'b1),
    .dout(grp_fu_301_p2)
);

jacobi_HLS_ddiv_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_15_reg_740),
    .ce(1'b1),
    .dout(grp_fu_305_p2)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_310_p0),
    .ce(1'b1),
    .dout(grp_fu_310_p1)
);

jacobi_HLS_dsqrt_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dsqrt_fYi_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(sum_reg_271),
    .ce(1'b1),
    .dout(grp_fu_314_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state72) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((tmp_4_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((tmp_4_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        i1_reg_237 <= i_2_reg_675;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_reg_237 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_337_p2 == 1'd1))) begin
        i_reg_215 <= i_1_fu_342_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_215 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_260 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        j_reg_260 <= j_1_reg_715;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        q_reg_283 <= 31'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (tmp_6_reg_761 == 1'd1))) begin
        q_reg_283 <= q_1_reg_765;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sigma_reg_248 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        sigma_reg_248 <= sigma_1_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_reg_271 <= 64'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (tmp_6_reg_761_pp1_iter2_reg == 1'd1) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        sum_reg_271 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_reg_226 <= t_1_reg_662;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_reg_226 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        J_load_reg_696 <= J_q0;
        x_prev_load_1_reg_702 <= x_prev_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i1_cast_reg_667[30 : 0] <= i1_cast_fu_374_p1[30 : 0];
        i_2_reg_675 <= i_2_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_715 <= j_1_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        p_Result_s_reg_750 <= p_Val2_s_fu_454_p1[32'd63];
        p_Val2_5_reg_755 <= p_Val2_5_fu_575_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        q_1_reg_765 <= q_1_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (tmp_6_reg_761_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage3_11001)))) begin
        reg_320 <= grp_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | ((1'b1 == ap_CS_fsm_state20) & (tmp_18_reg_720 == 1'd1)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (tmp_6_reg_761_pp1_iter2_reg == 1'd1) & (1'b0 == ap_block_pp1_stage3_11001)))) begin
        reg_327 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_1_reg_662 <= t_1_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_15_reg_740 <= grp_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_5_fu_378_p2 == 1'd1))) begin
        tmp_16_reg_680[30 : 0] <= tmp_16_fu_407_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_17_reg_707 <= tmp_17_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        tmp_18_reg_720 <= tmp_18_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (tmp_6_reg_761 == 1'd1))) begin
        tmp_2_reg_785 <= tmp_2_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_6_reg_761 <= tmp_6_fu_599_p2;
        tmp_6_reg_761_pp1_iter1_reg <= tmp_6_reg_761;
        tmp_6_reg_761_pp1_iter2_reg <= tmp_6_reg_761_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_6_reg_761 == 1'd1))) begin
        tmp_9_reg_791 <= tmp_9_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_6_fu_599_p2 == 1'd1))) begin
        tmp_s_reg_770[30 : 0] <= tmp_s_fu_610_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        x_assign_reg_745 <= grp_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_new_addr_1_reg_648 <= tmp_3_fu_354_p1;
        x_prev_addr_1_reg_653 <= tmp_3_fu_354_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        J_ce0 = 1'b1;
    end else begin
        J_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_6_fu_599_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state72 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state72 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (tmp_6_reg_761 == 1'd1))) begin
        ap_phi_mux_q_phi_fu_287_p4 = q_1_reg_765;
    end else begin
        ap_phi_mux_q_phi_fu_287_p4 = q_reg_283;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_294_opcode = 2'd1;
    end else if ((((1'b1 == ap_CS_fsm_state16) & (tmp_18_reg_720 == 1'd1)) | ((1'b0 == ap_block_pp1_stage4_00001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (tmp_6_reg_761_pp1_iter1_reg == 1'd1)))) begin
        grp_fu_294_opcode = 2'd0;
    end else begin
        grp_fu_294_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_294_p0 = sum_reg_271;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_294_p0 = reg_320;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_294_p0 = sigma_reg_248;
    end else begin
        grp_fu_294_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_294_p1 = sigma_reg_248;
    end else if (((1'b1 == ap_CS_fsm_state16) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        grp_fu_294_p1 = reg_320;
    end else begin
        grp_fu_294_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        grp_fu_310_p0 = tmp_9_reg_791;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_310_p0 = J_load_reg_696;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_310_p0 = b_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_310_p0 = tmp_17_reg_707;
    end else begin
        grp_fu_310_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        x_new_address0 = tmp_s_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        x_new_address0 = tmp_16_reg_680;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_new_address0 = x_new_addr_1_reg_648;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_new_address0 = tmp_1_fu_348_p1;
    end else begin
        x_new_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        x_new_ce0 = 1'b1;
    end else begin
        x_new_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        x_new_d0 = p_Val2_6_fu_588_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_new_d0 = 32'd1;
    end else begin
        x_new_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_337_p2 == 1'd1)))) begin
        x_new_we0 = 1'b1;
    end else begin
        x_new_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        x_prev_address0 = tmp_s_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_prev_address0 = tmp_16_fu_407_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_prev_address0 = x_prev_addr_1_reg_653;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_prev_address0 = tmp_1_fu_348_p1;
    end else begin
        x_prev_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        x_prev_ce0 = 1'b1;
    end else begin
        x_prev_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_prev_d0 = x_new_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_prev_d0 = 32'd0;
    end else begin
        x_prev_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_337_p2 == 1'd1)))) begin
        x_prev_we0 = 1'b1;
    end else begin
        x_prev_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_6_reg_761 == 1'd1))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_337_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_4_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_5_fu_378_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_431_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (tmp_6_fu_599_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (tmp_6_fu_599_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((~((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else if (((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign J_address0 = tmp_22_cast_fu_422_p1;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = grp_fu_314_p2;

assign b_address0 = tmp_16_reg_680;

assign exitcond_fu_431_p2 = ((j_reg_260 == n) ? 1'b1 : 1'b0);

assign i1_cast_fu_374_p1 = i1_reg_237;

assign i_1_fu_342_p2 = (i_reg_215 + 31'd1);

assign i_2_fu_383_p2 = (i1_reg_237 + 31'd1);

assign i_cast_fu_333_p1 = i_reg_215;

assign isNeg_fu_503_p3 = sh_assign_fu_497_p2[32'd11];

assign j_1_fu_436_p2 = (j_reg_260 + 32'd1);

assign mantissa_V_1_cast_fu_489_p1 = mantissa_V_fu_479_p4;

assign mantissa_V_fu_479_p4 = {{{{1'd1}, {tmp_V_1_fu_475_p1}}}, {1'd0}};

assign p_Val2_5_fu_575_p3 = ((isNeg_fu_503_p3[0:0] === 1'b1) ? tmp_23_fu_561_p1 : tmp_24_fu_565_p4);

assign p_Val2_6_fu_588_p3 = ((p_Result_s_reg_750[0:0] === 1'b1) ? result_V_1_fu_583_p2 : p_Val2_5_reg_755);

assign p_Val2_s_fu_454_p1 = x_assign_reg_745;

assign q_1_fu_604_p2 = (ap_phi_mux_q_phi_fu_287_p4 + 31'd1);

assign q_cast_fu_595_p1 = ap_phi_mux_q_phi_fu_287_p4;

assign r_V_1_fu_547_p2 = mantissa_V_1_cast_fu_489_p1 << tmp_i_i_i_7_fu_533_p1;

assign r_V_fu_541_p2 = mantissa_V_fu_479_p4 >> tmp_i_i_i_cast_8_fu_537_p1;

assign result_V_1_fu_583_p2 = (32'd0 - p_Val2_5_reg_755);

assign sh_assign_2_cast_fu_529_p1 = $signed(ush_fu_521_p3);

assign sh_assign_fu_497_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_493_p1));

assign sigma_1_fu_447_p3 = ((tmp_18_reg_720[0:0] === 1'b1) ? reg_327 : sigma_reg_248);

assign t_1_fu_368_p2 = (t_reg_226 + 31'd1);

assign t_cast_fu_359_p1 = t_reg_226;

assign tmp_11_fu_393_p2 = ($signed(4'd15) + $signed(tmp_7_fu_389_p1));

assign tmp_16_fu_407_p1 = i1_reg_237;

assign tmp_17_fu_427_p2 = ($signed(x_prev_load_1_reg_702) * $signed(J_load_reg_696));

assign tmp_18_fu_442_p2 = ((j_reg_260 == i1_cast_reg_667) ? 1'b1 : 1'b0);

assign tmp_1_fu_348_p1 = i_reg_215;

assign tmp_21_cast_fu_399_p3 = {{tmp_11_fu_393_p2}, {2'd0}};

assign tmp_21_fu_412_p1 = i1_reg_237[5:0];

assign tmp_22_cast_fu_422_p1 = $signed(tmp_22_fu_416_p2);

assign tmp_22_fu_416_p2 = (tmp_21_cast_fu_399_p3 + tmp_21_fu_412_p1);

assign tmp_23_fu_561_p1 = tmp_28_fu_553_p3;

assign tmp_24_fu_565_p4 = {{r_V_1_fu_547_p2[84:53]}};

assign tmp_28_fu_553_p3 = r_V_fu_541_p2[32'd53];

assign tmp_2_fu_616_p2 = (x_new_q0 - x_prev_q0);

assign tmp_3_fu_354_p0 = iter;

assign tmp_3_fu_354_p1 = tmp_3_fu_354_p0;

assign tmp_4_fu_363_p1 = iter;

assign tmp_4_fu_363_p2 = (($signed(t_cast_fu_359_p1) < $signed(tmp_4_fu_363_p1)) ? 1'b1 : 1'b0);

assign tmp_5_fu_378_p2 = (($signed(i1_cast_fu_374_p1) < $signed(n)) ? 1'b1 : 1'b0);

assign tmp_6_fu_599_p1 = iter;

assign tmp_6_fu_599_p2 = (($signed(q_cast_fu_595_p1) < $signed(tmp_6_fu_599_p1)) ? 1'b1 : 1'b0);

assign tmp_7_fu_389_p1 = i1_reg_237[3:0];

assign tmp_9_fu_622_p2 = ($signed(tmp_2_reg_785) * $signed(tmp_2_reg_785));

assign tmp_V_1_fu_475_p1 = p_Val2_s_fu_454_p1[51:0];

assign tmp_V_fu_465_p4 = {{p_Val2_s_fu_454_p1[62:52]}};

assign tmp_fu_337_p1 = iter;

assign tmp_fu_337_p2 = (($signed(i_cast_fu_333_p1) < $signed(tmp_fu_337_p1)) ? 1'b1 : 1'b0);

assign tmp_i_i_i_7_fu_533_p1 = $unsigned(sh_assign_2_cast_fu_529_p1);

assign tmp_i_i_i_cast_8_fu_537_p1 = $unsigned(sh_assign_2_cast_fu_529_p1);

assign tmp_i_i_i_cast_fu_517_p1 = $signed(tmp_i_i_i_fu_511_p2);

assign tmp_i_i_i_fu_511_p2 = (11'd1023 - tmp_V_fu_465_p4);

assign tmp_i_i_i_i_cast1_fu_493_p1 = tmp_V_fu_465_p4;

assign tmp_s_fu_610_p1 = ap_phi_mux_q_phi_fu_287_p4;

assign ush_fu_521_p3 = ((isNeg_fu_503_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_517_p1 : sh_assign_fu_497_p2);

assign x_address0 = tmp_s_reg_770;

assign x_d0 = x_new_q0;

always @ (posedge ap_clk) begin
    i1_cast_reg_667[31] <= 1'b0;
    tmp_16_reg_680[63:31] <= 33'b000000000000000000000000000000000;
    tmp_s_reg_770[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //jacobi_HLS
