// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="jacobi_HLS,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=191,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=43,HLS_SYN_FF=13338,HLS_SYN_LUT=19759,HLS_VERSION=2018_3}" *)

module jacobi_HLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        J_address0,
        J_ce0,
        J_q0,
        J_address1,
        J_ce1,
        J_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 92'd1;
parameter    ap_ST_fsm_state2 = 92'd2;
parameter    ap_ST_fsm_state3 = 92'd4;
parameter    ap_ST_fsm_state4 = 92'd8;
parameter    ap_ST_fsm_state5 = 92'd16;
parameter    ap_ST_fsm_state6 = 92'd32;
parameter    ap_ST_fsm_state7 = 92'd64;
parameter    ap_ST_fsm_state8 = 92'd128;
parameter    ap_ST_fsm_state9 = 92'd256;
parameter    ap_ST_fsm_state10 = 92'd512;
parameter    ap_ST_fsm_state11 = 92'd1024;
parameter    ap_ST_fsm_state12 = 92'd2048;
parameter    ap_ST_fsm_state13 = 92'd4096;
parameter    ap_ST_fsm_state14 = 92'd8192;
parameter    ap_ST_fsm_state15 = 92'd16384;
parameter    ap_ST_fsm_state16 = 92'd32768;
parameter    ap_ST_fsm_state17 = 92'd65536;
parameter    ap_ST_fsm_state18 = 92'd131072;
parameter    ap_ST_fsm_state19 = 92'd262144;
parameter    ap_ST_fsm_state20 = 92'd524288;
parameter    ap_ST_fsm_state21 = 92'd1048576;
parameter    ap_ST_fsm_state22 = 92'd2097152;
parameter    ap_ST_fsm_state23 = 92'd4194304;
parameter    ap_ST_fsm_state24 = 92'd8388608;
parameter    ap_ST_fsm_state25 = 92'd16777216;
parameter    ap_ST_fsm_state26 = 92'd33554432;
parameter    ap_ST_fsm_state27 = 92'd67108864;
parameter    ap_ST_fsm_state28 = 92'd134217728;
parameter    ap_ST_fsm_state29 = 92'd268435456;
parameter    ap_ST_fsm_state30 = 92'd536870912;
parameter    ap_ST_fsm_state31 = 92'd1073741824;
parameter    ap_ST_fsm_state32 = 92'd2147483648;
parameter    ap_ST_fsm_state33 = 92'd4294967296;
parameter    ap_ST_fsm_state34 = 92'd8589934592;
parameter    ap_ST_fsm_state35 = 92'd17179869184;
parameter    ap_ST_fsm_state36 = 92'd34359738368;
parameter    ap_ST_fsm_state37 = 92'd68719476736;
parameter    ap_ST_fsm_state38 = 92'd137438953472;
parameter    ap_ST_fsm_state39 = 92'd274877906944;
parameter    ap_ST_fsm_state40 = 92'd549755813888;
parameter    ap_ST_fsm_state41 = 92'd1099511627776;
parameter    ap_ST_fsm_state42 = 92'd2199023255552;
parameter    ap_ST_fsm_state43 = 92'd4398046511104;
parameter    ap_ST_fsm_state44 = 92'd8796093022208;
parameter    ap_ST_fsm_state45 = 92'd17592186044416;
parameter    ap_ST_fsm_state46 = 92'd35184372088832;
parameter    ap_ST_fsm_state47 = 92'd70368744177664;
parameter    ap_ST_fsm_state48 = 92'd140737488355328;
parameter    ap_ST_fsm_state49 = 92'd281474976710656;
parameter    ap_ST_fsm_state50 = 92'd562949953421312;
parameter    ap_ST_fsm_state51 = 92'd1125899906842624;
parameter    ap_ST_fsm_state52 = 92'd2251799813685248;
parameter    ap_ST_fsm_state53 = 92'd4503599627370496;
parameter    ap_ST_fsm_state54 = 92'd9007199254740992;
parameter    ap_ST_fsm_state55 = 92'd18014398509481984;
parameter    ap_ST_fsm_state56 = 92'd36028797018963968;
parameter    ap_ST_fsm_pp1_stage0 = 92'd72057594037927936;
parameter    ap_ST_fsm_pp1_stage1 = 92'd144115188075855872;
parameter    ap_ST_fsm_pp1_stage2 = 92'd288230376151711744;
parameter    ap_ST_fsm_pp1_stage3 = 92'd576460752303423488;
parameter    ap_ST_fsm_pp1_stage4 = 92'd1152921504606846976;
parameter    ap_ST_fsm_state71 = 92'd2305843009213693952;
parameter    ap_ST_fsm_state72 = 92'd4611686018427387904;
parameter    ap_ST_fsm_state73 = 92'd9223372036854775808;
parameter    ap_ST_fsm_state74 = 92'd18446744073709551616;
parameter    ap_ST_fsm_state75 = 92'd36893488147419103232;
parameter    ap_ST_fsm_state76 = 92'd73786976294838206464;
parameter    ap_ST_fsm_state77 = 92'd147573952589676412928;
parameter    ap_ST_fsm_state78 = 92'd295147905179352825856;
parameter    ap_ST_fsm_state79 = 92'd590295810358705651712;
parameter    ap_ST_fsm_state80 = 92'd1180591620717411303424;
parameter    ap_ST_fsm_state81 = 92'd2361183241434822606848;
parameter    ap_ST_fsm_state82 = 92'd4722366482869645213696;
parameter    ap_ST_fsm_state83 = 92'd9444732965739290427392;
parameter    ap_ST_fsm_state84 = 92'd18889465931478580854784;
parameter    ap_ST_fsm_state85 = 92'd37778931862957161709568;
parameter    ap_ST_fsm_state86 = 92'd75557863725914323419136;
parameter    ap_ST_fsm_state87 = 92'd151115727451828646838272;
parameter    ap_ST_fsm_state88 = 92'd302231454903657293676544;
parameter    ap_ST_fsm_state89 = 92'd604462909807314587353088;
parameter    ap_ST_fsm_state90 = 92'd1208925819614629174706176;
parameter    ap_ST_fsm_state91 = 92'd2417851639229258349412352;
parameter    ap_ST_fsm_state92 = 92'd4835703278458516698824704;
parameter    ap_ST_fsm_state93 = 92'd9671406556917033397649408;
parameter    ap_ST_fsm_state94 = 92'd19342813113834066795298816;
parameter    ap_ST_fsm_state95 = 92'd38685626227668133590597632;
parameter    ap_ST_fsm_state96 = 92'd77371252455336267181195264;
parameter    ap_ST_fsm_state97 = 92'd154742504910672534362390528;
parameter    ap_ST_fsm_state98 = 92'd309485009821345068724781056;
parameter    ap_ST_fsm_state99 = 92'd618970019642690137449562112;
parameter    ap_ST_fsm_state100 = 92'd1237940039285380274899124224;
parameter    ap_ST_fsm_state101 = 92'd2475880078570760549798248448;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] J_address0;
output   J_ce0;
input  [31:0] J_q0;
output  [3:0] J_address1;
output   J_ce1;
input  [31:0] J_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [3:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] J_address0;
reg J_ce0;
reg[3:0] J_address1;
reg J_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg[1:0] b_address1;
reg b_ce1;
reg x_ce0;
reg x_we0;

(* fsm_encoding = "none" *) reg   [91:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] sum_reg_342;
reg   [4:0] q_reg_354;
wire   [31:0] x_prev_q0;
reg  signed [31:0] reg_412;
wire    ap_CS_fsm_state4;
wire   [31:0] x_prev_q1;
wire    ap_CS_fsm_state5;
reg  signed [31:0] reg_417;
wire   [63:0] grp_fu_392_p1;
reg   [63:0] reg_422;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_pp1_stage3;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state60_pp1_stage3_iter0;
wire    ap_block_state65_pp1_stage3_iter1;
wire    ap_block_state70_pp1_stage3_iter2;
wire    ap_block_pp1_stage3_11001;
reg   [0:0] exitcond_reg_1330;
reg   [0:0] exitcond_reg_1330_pp1_iter1_reg;
wire   [63:0] grp_fu_395_p1;
reg   [63:0] reg_428;
reg   [63:0] reg_434;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
reg   [63:0] reg_440;
wire   [63:0] grp_fu_365_p2;
reg   [63:0] reg_446;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond_reg_1330_pp1_iter2_reg;
wire   [63:0] grp_fu_382_p2;
reg   [63:0] reg_452;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire   [63:0] grp_fu_387_p2;
reg   [63:0] reg_456;
wire   [4:0] i_1_fu_466_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg  signed [31:0] J_load_reg_1132;
reg  signed [31:0] J_load_1_reg_1138;
wire   [31:0] tmp_10_fu_478_p2;
reg   [31:0] tmp_10_reg_1154;
wire   [31:0] tmp_15_0_1_1_fu_483_p2;
reg   [31:0] tmp_15_0_1_1_reg_1164;
reg  signed [31:0] J_load_2_reg_1174;
reg  signed [31:0] J_load_3_reg_1180;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_15_0_2_2_fu_488_p2;
reg   [31:0] tmp_15_0_2_2_reg_1196;
wire   [31:0] tmp_15_0_3_3_fu_493_p2;
reg   [31:0] tmp_15_0_3_3_reg_1206;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_399_p1;
reg   [63:0] tmp_16_0_1_1_reg_1226;
wire   [63:0] grp_fu_402_p1;
reg   [63:0] tmp_7_0_1_reg_1231;
reg   [63:0] tmp_16_0_3_3_reg_1236;
reg   [63:0] tmp_7_0_3_reg_1241;
wire   [63:0] grp_fu_369_p2;
reg   [63:0] tmp_8_0_1_reg_1246;
reg   [63:0] tmp_8_0_2_reg_1251;
reg   [63:0] tmp_8_0_3_reg_1256;
wire   [63:0] grp_fu_374_p2;
reg   [63:0] tmp_9_reg_1261;
wire    ap_CS_fsm_state22;
wire   [63:0] grp_fu_378_p2;
reg   [63:0] tmp_10_0_1_reg_1266;
reg   [63:0] tmp_10_0_2_reg_1271;
wire    ap_CS_fsm_state23;
reg   [63:0] tmp_10_0_3_reg_1276;
reg   [0:0] p_Result_s_reg_1286;
wire   [31:0] p_Val2_20_fu_620_p3;
reg   [31:0] p_Val2_20_reg_1291;
reg   [0:0] p_Result_1_reg_1297;
wire   [31:0] p_Val2_22_fu_750_p3;
reg   [31:0] p_Val2_22_reg_1302;
reg   [0:0] p_Result_2_reg_1308;
wire    ap_CS_fsm_state55;
wire   [31:0] p_Val2_24_fu_904_p3;
reg   [31:0] p_Val2_24_reg_1313;
reg   [0:0] p_Result_3_reg_1319;
wire   [31:0] p_Val2_26_fu_1034_p3;
reg   [31:0] p_Val2_26_reg_1324;
wire   [0:0] exitcond_fu_1066_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state57_pp1_stage0_iter0;
wire    ap_block_state62_pp1_stage0_iter1;
wire    ap_block_state67_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [4:0] q_1_fu_1072_p2;
reg   [4:0] q_1_reg_1334;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_2_fu_1078_p1;
reg   [63:0] tmp_2_reg_1339;
wire  signed [31:0] tmp_3_fu_1084_p2;
reg  signed [31:0] tmp_3_reg_1354;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state58_pp1_stage1_iter0;
wire    ap_block_state63_pp1_stage1_iter1;
wire    ap_block_state68_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
wire   [31:0] tmp_4_fu_1090_p2;
reg   [31:0] tmp_4_reg_1360;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state59_pp1_stage2_iter0;
wire    ap_block_state64_pp1_stage2_iter1;
wire    ap_block_state69_pp1_stage2_iter2;
wire    ap_block_pp1_stage2_11001;
wire    ap_CS_fsm_state56;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state57;
wire    ap_block_state61_pp1_stage4_iter0;
wire    ap_block_state66_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_subdone;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage3_subdone;
reg   [3:0] x_prev_address0;
reg    x_prev_ce0;
reg    x_prev_we0;
reg   [3:0] x_prev_address1;
reg    x_prev_ce1;
reg    x_prev_we1;
reg   [3:0] x_new_address0;
reg    x_new_ce0;
reg    x_new_we0;
reg   [31:0] x_new_d0;
wire   [31:0] x_new_q0;
reg   [3:0] x_new_address1;
reg    x_new_ce1;
reg    x_new_we1;
reg   [31:0] x_new_d1;
wire   [31:0] x_new_q1;
reg   [4:0] i_reg_331;
wire   [0:0] exitcond4_fu_460_p2;
reg   [4:0] ap_phi_mux_q_phi_fu_358_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_fu_472_p1;
wire    ap_block_pp1_stage1;
wire   [31:0] p_Val2_21_fu_763_p3;
wire   [31:0] p_Val2_23_fu_775_p3;
wire   [31:0] p_Val2_25_fu_1047_p3;
wire   [31:0] p_Val2_27_fu_1059_p3;
reg   [63:0] grp_fu_365_p0;
reg   [63:0] grp_fu_365_p1;
wire    ap_CS_fsm_state13;
wire    ap_block_pp1_stage4;
reg   [63:0] grp_fu_369_p0;
reg   [63:0] grp_fu_369_p1;
reg   [63:0] grp_fu_374_p0;
reg   [63:0] grp_fu_374_p1;
wire    ap_CS_fsm_state18;
reg   [63:0] grp_fu_378_p0;
reg   [63:0] grp_fu_378_p1;
reg   [63:0] grp_fu_382_p1;
wire    ap_CS_fsm_state24;
reg   [63:0] grp_fu_387_p1;
reg   [31:0] grp_fu_392_p0;
wire    ap_block_pp1_stage3;
reg   [31:0] grp_fu_395_p0;
reg   [31:0] grp_fu_399_p0;
wire    ap_CS_fsm_state71;
wire   [63:0] p_Val2_s_fu_498_p1;
wire   [51:0] tmp_V_1_fu_520_p1;
wire   [53:0] mantissa_V_fu_524_p4;
wire   [10:0] tmp_V_fu_510_p4;
wire   [11:0] tmp_i_i_i_i_cast5_fu_538_p1;
wire   [11:0] sh_assign_fu_542_p2;
wire   [10:0] tmp_i_i_i_fu_556_p2;
wire   [0:0] isNeg_fu_548_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_562_p1;
wire   [11:0] ush_fu_566_p3;
wire  signed [31:0] sh_assign_2_cast_fu_574_p1;
wire   [53:0] tmp_i_i_i_cast_8_fu_582_p1;
wire   [136:0] mantissa_V_1_cast_fu_534_p1;
wire   [136:0] tmp_i_i_i_7_fu_578_p1;
wire   [53:0] r_V_fu_586_p2;
wire   [0:0] tmp_19_fu_598_p3;
wire   [136:0] r_V_1_fu_592_p2;
wire   [31:0] tmp_12_fu_606_p1;
wire   [31:0] tmp_13_fu_610_p4;
wire   [63:0] p_Val2_5_fu_628_p1;
wire   [51:0] tmp_V_3_fu_650_p1;
wire   [53:0] mantissa_V_1_fu_654_p4;
wire   [10:0] tmp_V_2_fu_640_p4;
wire   [11:0] tmp_i_i_i_i1_cast4_fu_668_p1;
wire   [11:0] sh_assign_3_fu_672_p2;
wire   [10:0] tmp_i_i_i1_fu_686_p2;
wire   [0:0] isNeg_1_fu_678_p3;
wire  signed [11:0] tmp_i_i_i1_cast_fu_692_p1;
wire   [11:0] ush_1_fu_696_p3;
wire  signed [31:0] sh_assign_5_cast_fu_704_p1;
wire   [53:0] tmp_i_i_i1_cast_10_fu_712_p1;
wire   [136:0] mantissa_V_3_cast_fu_664_p1;
wire   [136:0] tmp_i_i_i1_9_fu_708_p1;
wire   [53:0] r_V_2_fu_716_p2;
wire   [0:0] tmp_27_fu_728_p3;
wire   [136:0] r_V_3_fu_722_p2;
wire   [31:0] tmp_14_fu_736_p1;
wire   [31:0] tmp_15_fu_740_p4;
wire   [31:0] result_V_1_fu_758_p2;
wire   [31:0] result_V_3_fu_770_p2;
wire   [63:0] p_Val2_10_fu_782_p1;
wire   [51:0] tmp_V_5_fu_804_p1;
wire   [53:0] mantissa_V_2_fu_808_p4;
wire   [10:0] tmp_V_4_fu_794_p4;
wire   [11:0] tmp_i_i_i_i2_cast3_fu_822_p1;
wire   [11:0] sh_assign_6_fu_826_p2;
wire   [10:0] tmp_i_i_i2_fu_840_p2;
wire   [0:0] isNeg_2_fu_832_p3;
wire  signed [11:0] tmp_i_i_i2_cast_fu_846_p1;
wire   [11:0] ush_2_fu_850_p3;
wire  signed [31:0] sh_assign_8_cast_fu_858_p1;
wire   [53:0] tmp_i_i_i2_cast_12_fu_866_p1;
wire   [136:0] mantissa_V_5_cast_fu_818_p1;
wire   [136:0] tmp_i_i_i2_11_fu_862_p1;
wire   [53:0] r_V_4_fu_870_p2;
wire   [0:0] tmp_31_fu_882_p3;
wire   [136:0] r_V_5_fu_876_p2;
wire   [31:0] tmp_16_fu_890_p1;
wire   [31:0] tmp_17_fu_894_p4;
wire   [63:0] p_Val2_15_fu_912_p1;
wire   [51:0] tmp_V_7_fu_934_p1;
wire   [53:0] mantissa_V_3_fu_938_p4;
wire   [10:0] tmp_V_6_fu_924_p4;
wire   [11:0] tmp_i_i_i_i3_cast2_fu_952_p1;
wire   [11:0] sh_assign_9_fu_956_p2;
wire   [10:0] tmp_i_i_i3_fu_970_p2;
wire   [0:0] isNeg_3_fu_962_p3;
wire  signed [11:0] tmp_i_i_i3_cast_fu_976_p1;
wire   [11:0] ush_3_fu_980_p3;
wire  signed [31:0] sh_assign_11_cast_fu_988_p1;
wire   [53:0] tmp_i_i_i3_cast_14_fu_996_p1;
wire   [136:0] mantissa_V_7_cast_fu_948_p1;
wire   [136:0] tmp_i_i_i3_13_fu_992_p1;
wire   [53:0] r_V_6_fu_1000_p2;
wire   [0:0] tmp_35_fu_1012_p3;
wire   [136:0] r_V_7_fu_1006_p2;
wire   [31:0] tmp_18_fu_1020_p1;
wire   [31:0] tmp_20_fu_1024_p4;
wire   [31:0] result_V_5_fu_1042_p2;
wire   [31:0] result_V_7_fu_1054_p2;
wire    ap_block_pp1_stage2;
reg   [1:0] grp_fu_365_opcode;
wire    ap_block_pp1_stage4_00001;
wire   [63:0] grp_fu_406_p2;
wire    ap_CS_fsm_state101;
reg   [91:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage4_11001;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 92'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

jacobi_HLS_x_prev #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_prev_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_prev_address0),
    .ce0(x_prev_ce0),
    .we0(x_prev_we0),
    .d0(32'd0),
    .q0(x_prev_q0),
    .address1(x_prev_address1),
    .ce1(x_prev_ce1),
    .we1(x_prev_we1),
    .d1(x_new_q0),
    .q1(x_prev_q1)
);

jacobi_HLS_x_prev #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_new_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_new_address0),
    .ce0(x_new_ce0),
    .we0(x_new_we0),
    .d0(x_new_d0),
    .q0(x_new_q0),
    .address1(x_new_address1),
    .ce1(x_new_ce1),
    .we1(x_new_we1),
    .d1(x_new_d1),
    .q1(x_new_q1)
);

jacobi_HLS_dadddsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dadddsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_365_p0),
    .din1(grp_fu_365_p1),
    .opcode(grp_fu_365_opcode),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

jacobi_HLS_dsub_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dsub_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_369_p0),
    .din1(grp_fu_369_p1),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

jacobi_HLS_dmul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_374_p0),
    .din1(grp_fu_374_p1),
    .ce(1'b1),
    .dout(grp_fu_374_p2)
);

jacobi_HLS_dmul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_378_p0),
    .din1(grp_fu_378_p1),
    .ce(1'b1),
    .dout(grp_fu_378_p2)
);

jacobi_HLS_ddiv_6eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(grp_fu_382_p1),
    .ce(1'b1),
    .dout(grp_fu_382_p2)
);

jacobi_HLS_ddiv_6eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(grp_fu_387_p1),
    .ce(1'b1),
    .dout(grp_fu_387_p2)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_392_p0),
    .ce(1'b1),
    .dout(grp_fu_392_p1)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p0),
    .ce(1'b1),
    .dout(grp_fu_395_p1)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_399_p0),
    .ce(1'b1),
    .dout(grp_fu_399_p1)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q1),
    .ce(1'b1),
    .dout(grp_fu_402_p1)
);

jacobi_HLS_dsqrt_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dsqrt_g8j_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(sum_reg_342),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state57) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state56)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state56)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_460_p2 == 1'd0))) begin
        i_reg_331 <= i_1_fu_466_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_331 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        q_reg_354 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_reg_1330 == 1'd0))) begin
        q_reg_354 <= q_1_reg_1334;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_412 <= x_prev_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_412 <= x_prev_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_417 <= x_prev_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_417 <= x_prev_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        sum_reg_342 <= 64'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (exitcond_reg_1330_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        sum_reg_342 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        J_load_1_reg_1138 <= J_q1;
        J_load_reg_1132 <= J_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        J_load_2_reg_1174 <= J_q0;
        J_load_3_reg_1180 <= J_q1;
        tmp_10_reg_1154 <= tmp_10_fu_478_p2;
        tmp_15_0_1_1_reg_1164 <= tmp_15_0_1_1_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_1330 <= exitcond_fu_1066_p2;
        exitcond_reg_1330_pp1_iter1_reg <= exitcond_reg_1330;
        exitcond_reg_1330_pp1_iter2_reg <= exitcond_reg_1330_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_Result_1_reg_1297 <= p_Val2_5_fu_628_p1[32'd63];
        p_Result_s_reg_1286 <= p_Val2_s_fu_498_p1[32'd63];
        p_Val2_20_reg_1291 <= p_Val2_20_fu_620_p3;
        p_Val2_22_reg_1302 <= p_Val2_22_fu_750_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        p_Result_2_reg_1308 <= p_Val2_10_fu_782_p1[32'd63];
        p_Result_3_reg_1319 <= p_Val2_15_fu_912_p1[32'd63];
        p_Val2_24_reg_1313 <= p_Val2_24_fu_904_p3;
        p_Val2_26_reg_1324 <= p_Val2_26_fu_1034_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        q_1_reg_1334 <= q_1_fu_1072_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (exitcond_reg_1330_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001)))) begin
        reg_422 <= grp_fu_392_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_428 <= grp_fu_395_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_434 <= grp_fu_392_p1;
        reg_440 <= grp_fu_395_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (exitcond_reg_1330_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001)))) begin
        reg_446 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_452 <= grp_fu_382_p2;
        reg_456 <= grp_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_10_0_1_reg_1266 <= grp_fu_378_p2;
        tmp_9_reg_1261 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_10_0_2_reg_1271 <= grp_fu_374_p2;
        tmp_10_0_3_reg_1276 <= grp_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_15_0_2_2_reg_1196 <= tmp_15_0_2_2_fu_488_p2;
        tmp_15_0_3_3_reg_1206 <= tmp_15_0_3_3_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_16_0_1_1_reg_1226 <= grp_fu_399_p1;
        tmp_7_0_1_reg_1231 <= grp_fu_402_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_16_0_3_3_reg_1236 <= grp_fu_399_p1;
        tmp_7_0_3_reg_1241 <= grp_fu_402_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_1066_p2 == 1'd0))) begin
        tmp_2_reg_1339[4 : 0] <= tmp_2_fu_1078_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1330 == 1'd0))) begin
        tmp_3_reg_1354 <= tmp_3_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond_reg_1330 == 1'd0))) begin
        tmp_4_reg_1360 <= tmp_4_fu_1090_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_8_0_1_reg_1246 <= grp_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_8_0_2_reg_1251 <= grp_fu_365_p2;
        tmp_8_0_3_reg_1256 <= grp_fu_369_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        J_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        J_address0 = 64'd18446744073709551612;
    end else begin
        J_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        J_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        J_address1 = 64'd1;
    end else begin
        J_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        J_ce0 = 1'b1;
    end else begin
        J_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        J_ce1 = 1'b1;
    end else begin
        J_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_1066_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state57 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state57 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_reg_1330 == 1'd0))) begin
        ap_phi_mux_q_phi_fu_358_p4 = q_1_reg_1334;
    end else begin
        ap_phi_mux_q_phi_fu_358_p4 = q_reg_354;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = 64'd0;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address1 = 64'd1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_365_opcode = 2'd1;
    end else if (((1'b0 == ap_block_pp1_stage4_00001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_reg_1330_pp1_iter1_reg == 1'd0))) begin
        grp_fu_365_opcode = 2'd0;
    end else begin
        grp_fu_365_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_365_p0 = sum_reg_342;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_365_p0 = reg_440;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_365_p0 = reg_428;
    end else begin
        grp_fu_365_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_365_p1 = reg_434;
    end else if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        grp_fu_365_p1 = reg_422;
    end else begin
        grp_fu_365_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_369_p0 = tmp_7_0_3_reg_1241;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_369_p0 = tmp_7_0_1_reg_1231;
    end else begin
        grp_fu_369_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_369_p1 = tmp_16_0_3_3_reg_1236;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_369_p1 = tmp_16_0_1_1_reg_1226;
    end else begin
        grp_fu_369_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_374_p0 = reg_434;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_374_p0 = reg_422;
    end else begin
        grp_fu_374_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_374_p1 = tmp_8_0_2_reg_1251;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_374_p1 = reg_446;
    end else begin
        grp_fu_374_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_378_p0 = reg_440;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_378_p0 = reg_428;
    end else begin
        grp_fu_378_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_378_p1 = tmp_8_0_3_reg_1256;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_378_p1 = tmp_8_0_1_reg_1246;
    end else begin
        grp_fu_378_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_382_p1 = tmp_10_0_2_reg_1271;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_382_p1 = tmp_9_reg_1261;
    end else begin
        grp_fu_382_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_387_p1 = tmp_10_0_3_reg_1276;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_387_p1 = tmp_10_0_1_reg_1266;
    end else begin
        grp_fu_387_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        grp_fu_392_p0 = tmp_4_reg_1360;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_392_p0 = J_load_2_reg_1174;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_392_p0 = J_load_reg_1132;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_392_p0 = tmp_15_0_2_2_reg_1196;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_392_p0 = tmp_10_reg_1154;
    end else begin
        grp_fu_392_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_395_p0 = J_load_3_reg_1180;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_395_p0 = J_load_1_reg_1138;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_395_p0 = b_q0;
    end else begin
        grp_fu_395_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_399_p0 = tmp_15_0_3_3_reg_1206;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_399_p0 = tmp_15_0_1_1_reg_1164;
    end else begin
        grp_fu_399_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        x_new_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        x_new_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        x_new_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_new_address0 = tmp_fu_472_p1;
    end else begin
        x_new_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        x_new_address1 = tmp_2_fu_1078_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        x_new_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        x_new_address1 = 64'd1;
    end else begin
        x_new_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state54))) begin
        x_new_ce0 = 1'b1;
    end else begin
        x_new_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        x_new_ce1 = 1'b1;
    end else begin
        x_new_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        x_new_d0 = p_Val2_27_fu_1059_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        x_new_d0 = p_Val2_21_fu_763_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_new_d0 = 32'd1;
    end else begin
        x_new_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        x_new_d1 = p_Val2_25_fu_1047_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        x_new_d1 = p_Val2_23_fu_775_p3;
    end else begin
        x_new_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_460_p2 == 1'd0)))) begin
        x_new_we0 = 1'b1;
    end else begin
        x_new_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55))) begin
        x_new_we1 = 1'b1;
    end else begin
        x_new_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        x_prev_address0 = tmp_2_fu_1078_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_prev_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_prev_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_prev_address0 = tmp_fu_472_p1;
    end else begin
        x_prev_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        x_prev_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_prev_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_prev_address1 = 64'd1;
    end else begin
        x_prev_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        x_prev_ce0 = 1'b1;
    end else begin
        x_prev_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        x_prev_ce1 = 1'b1;
    end else begin
        x_prev_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_460_p2 == 1'd0))) begin
        x_prev_we0 = 1'b1;
    end else begin
        x_prev_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        x_prev_we1 = 1'b1;
    end else begin
        x_prev_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_reg_1330 == 1'd0))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_460_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_1066_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_1066_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((~((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else if (((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd61];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state57_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = grp_fu_406_p2;

assign exitcond4_fu_460_p2 = ((i_reg_331 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_1066_p2 = ((ap_phi_mux_q_phi_fu_358_p4 == 5'd16) ? 1'b1 : 1'b0);

assign i_1_fu_466_p2 = (i_reg_331 + 5'd1);

assign isNeg_1_fu_678_p3 = sh_assign_3_fu_672_p2[32'd11];

assign isNeg_2_fu_832_p3 = sh_assign_6_fu_826_p2[32'd11];

assign isNeg_3_fu_962_p3 = sh_assign_9_fu_956_p2[32'd11];

assign isNeg_fu_548_p3 = sh_assign_fu_542_p2[32'd11];

assign mantissa_V_1_cast_fu_534_p1 = mantissa_V_fu_524_p4;

assign mantissa_V_1_fu_654_p4 = {{{{1'd1}, {tmp_V_3_fu_650_p1}}}, {1'd0}};

assign mantissa_V_2_fu_808_p4 = {{{{1'd1}, {tmp_V_5_fu_804_p1}}}, {1'd0}};

assign mantissa_V_3_cast_fu_664_p1 = mantissa_V_1_fu_654_p4;

assign mantissa_V_3_fu_938_p4 = {{{{1'd1}, {tmp_V_7_fu_934_p1}}}, {1'd0}};

assign mantissa_V_5_cast_fu_818_p1 = mantissa_V_2_fu_808_p4;

assign mantissa_V_7_cast_fu_948_p1 = mantissa_V_3_fu_938_p4;

assign mantissa_V_fu_524_p4 = {{{{1'd1}, {tmp_V_1_fu_520_p1}}}, {1'd0}};

assign p_Val2_10_fu_782_p1 = reg_452;

assign p_Val2_15_fu_912_p1 = reg_456;

assign p_Val2_20_fu_620_p3 = ((isNeg_fu_548_p3[0:0] === 1'b1) ? tmp_12_fu_606_p1 : tmp_13_fu_610_p4);

assign p_Val2_21_fu_763_p3 = ((p_Result_s_reg_1286[0:0] === 1'b1) ? result_V_1_fu_758_p2 : p_Val2_20_reg_1291);

assign p_Val2_22_fu_750_p3 = ((isNeg_1_fu_678_p3[0:0] === 1'b1) ? tmp_14_fu_736_p1 : tmp_15_fu_740_p4);

assign p_Val2_23_fu_775_p3 = ((p_Result_1_reg_1297[0:0] === 1'b1) ? result_V_3_fu_770_p2 : p_Val2_22_reg_1302);

assign p_Val2_24_fu_904_p3 = ((isNeg_2_fu_832_p3[0:0] === 1'b1) ? tmp_16_fu_890_p1 : tmp_17_fu_894_p4);

assign p_Val2_25_fu_1047_p3 = ((p_Result_2_reg_1308[0:0] === 1'b1) ? result_V_5_fu_1042_p2 : p_Val2_24_reg_1313);

assign p_Val2_26_fu_1034_p3 = ((isNeg_3_fu_962_p3[0:0] === 1'b1) ? tmp_18_fu_1020_p1 : tmp_20_fu_1024_p4);

assign p_Val2_27_fu_1059_p3 = ((p_Result_3_reg_1319[0:0] === 1'b1) ? result_V_7_fu_1054_p2 : p_Val2_26_reg_1324);

assign p_Val2_5_fu_628_p1 = reg_456;

assign p_Val2_s_fu_498_p1 = reg_452;

assign q_1_fu_1072_p2 = (ap_phi_mux_q_phi_fu_358_p4 + 5'd1);

assign r_V_1_fu_592_p2 = mantissa_V_1_cast_fu_534_p1 << tmp_i_i_i_7_fu_578_p1;

assign r_V_2_fu_716_p2 = mantissa_V_1_fu_654_p4 >> tmp_i_i_i1_cast_10_fu_712_p1;

assign r_V_3_fu_722_p2 = mantissa_V_3_cast_fu_664_p1 << tmp_i_i_i1_9_fu_708_p1;

assign r_V_4_fu_870_p2 = mantissa_V_2_fu_808_p4 >> tmp_i_i_i2_cast_12_fu_866_p1;

assign r_V_5_fu_876_p2 = mantissa_V_5_cast_fu_818_p1 << tmp_i_i_i2_11_fu_862_p1;

assign r_V_6_fu_1000_p2 = mantissa_V_3_fu_938_p4 >> tmp_i_i_i3_cast_14_fu_996_p1;

assign r_V_7_fu_1006_p2 = mantissa_V_7_cast_fu_948_p1 << tmp_i_i_i3_13_fu_992_p1;

assign r_V_fu_586_p2 = mantissa_V_fu_524_p4 >> tmp_i_i_i_cast_8_fu_582_p1;

assign result_V_1_fu_758_p2 = (32'd0 - p_Val2_20_reg_1291);

assign result_V_3_fu_770_p2 = (32'd0 - p_Val2_22_reg_1302);

assign result_V_5_fu_1042_p2 = (32'd0 - p_Val2_24_reg_1313);

assign result_V_7_fu_1054_p2 = (32'd0 - p_Val2_26_reg_1324);

assign sh_assign_11_cast_fu_988_p1 = $signed(ush_3_fu_980_p3);

assign sh_assign_2_cast_fu_574_p1 = $signed(ush_fu_566_p3);

assign sh_assign_3_fu_672_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i1_cast4_fu_668_p1));

assign sh_assign_5_cast_fu_704_p1 = $signed(ush_1_fu_696_p3);

assign sh_assign_6_fu_826_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i2_cast3_fu_822_p1));

assign sh_assign_8_cast_fu_858_p1 = $signed(ush_2_fu_850_p3);

assign sh_assign_9_fu_956_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i3_cast2_fu_952_p1));

assign sh_assign_fu_542_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast5_fu_538_p1));

assign tmp_10_fu_478_p2 = ($signed(J_load_reg_1132) * $signed(reg_412));

assign tmp_12_fu_606_p1 = tmp_19_fu_598_p3;

assign tmp_13_fu_610_p4 = {{r_V_1_fu_592_p2[84:53]}};

assign tmp_14_fu_736_p1 = tmp_27_fu_728_p3;

assign tmp_15_0_1_1_fu_483_p2 = ($signed(J_load_1_reg_1138) * $signed(reg_417));

assign tmp_15_0_2_2_fu_488_p2 = ($signed(J_load_2_reg_1174) * $signed(reg_412));

assign tmp_15_0_3_3_fu_493_p2 = ($signed(J_load_3_reg_1180) * $signed(reg_417));

assign tmp_15_fu_740_p4 = {{r_V_3_fu_722_p2[84:53]}};

assign tmp_16_fu_890_p1 = tmp_31_fu_882_p3;

assign tmp_17_fu_894_p4 = {{r_V_5_fu_876_p2[84:53]}};

assign tmp_18_fu_1020_p1 = tmp_35_fu_1012_p3;

assign tmp_19_fu_598_p3 = r_V_fu_586_p2[32'd53];

assign tmp_20_fu_1024_p4 = {{r_V_7_fu_1006_p2[84:53]}};

assign tmp_27_fu_728_p3 = r_V_2_fu_716_p2[32'd53];

assign tmp_2_fu_1078_p1 = ap_phi_mux_q_phi_fu_358_p4;

assign tmp_31_fu_882_p3 = r_V_4_fu_870_p2[32'd53];

assign tmp_35_fu_1012_p3 = r_V_6_fu_1000_p2[32'd53];

assign tmp_3_fu_1084_p2 = (x_new_q1 - x_prev_q0);

assign tmp_4_fu_1090_p2 = ($signed(tmp_3_reg_1354) * $signed(tmp_3_reg_1354));

assign tmp_V_1_fu_520_p1 = p_Val2_s_fu_498_p1[51:0];

assign tmp_V_2_fu_640_p4 = {{p_Val2_5_fu_628_p1[62:52]}};

assign tmp_V_3_fu_650_p1 = p_Val2_5_fu_628_p1[51:0];

assign tmp_V_4_fu_794_p4 = {{p_Val2_10_fu_782_p1[62:52]}};

assign tmp_V_5_fu_804_p1 = p_Val2_10_fu_782_p1[51:0];

assign tmp_V_6_fu_924_p4 = {{p_Val2_15_fu_912_p1[62:52]}};

assign tmp_V_7_fu_934_p1 = p_Val2_15_fu_912_p1[51:0];

assign tmp_V_fu_510_p4 = {{p_Val2_s_fu_498_p1[62:52]}};

assign tmp_fu_472_p1 = i_reg_331;

assign tmp_i_i_i1_9_fu_708_p1 = $unsigned(sh_assign_5_cast_fu_704_p1);

assign tmp_i_i_i1_cast_10_fu_712_p1 = $unsigned(sh_assign_5_cast_fu_704_p1);

assign tmp_i_i_i1_cast_fu_692_p1 = $signed(tmp_i_i_i1_fu_686_p2);

assign tmp_i_i_i1_fu_686_p2 = (11'd1023 - tmp_V_2_fu_640_p4);

assign tmp_i_i_i2_11_fu_862_p1 = $unsigned(sh_assign_8_cast_fu_858_p1);

assign tmp_i_i_i2_cast_12_fu_866_p1 = $unsigned(sh_assign_8_cast_fu_858_p1);

assign tmp_i_i_i2_cast_fu_846_p1 = $signed(tmp_i_i_i2_fu_840_p2);

assign tmp_i_i_i2_fu_840_p2 = (11'd1023 - tmp_V_4_fu_794_p4);

assign tmp_i_i_i3_13_fu_992_p1 = $unsigned(sh_assign_11_cast_fu_988_p1);

assign tmp_i_i_i3_cast_14_fu_996_p1 = $unsigned(sh_assign_11_cast_fu_988_p1);

assign tmp_i_i_i3_cast_fu_976_p1 = $signed(tmp_i_i_i3_fu_970_p2);

assign tmp_i_i_i3_fu_970_p2 = (11'd1023 - tmp_V_6_fu_924_p4);

assign tmp_i_i_i_7_fu_578_p1 = $unsigned(sh_assign_2_cast_fu_574_p1);

assign tmp_i_i_i_cast_8_fu_582_p1 = $unsigned(sh_assign_2_cast_fu_574_p1);

assign tmp_i_i_i_cast_fu_562_p1 = $signed(tmp_i_i_i_fu_556_p2);

assign tmp_i_i_i_fu_556_p2 = (11'd1023 - tmp_V_fu_510_p4);

assign tmp_i_i_i_i1_cast4_fu_668_p1 = tmp_V_2_fu_640_p4;

assign tmp_i_i_i_i2_cast3_fu_822_p1 = tmp_V_4_fu_794_p4;

assign tmp_i_i_i_i3_cast2_fu_952_p1 = tmp_V_6_fu_924_p4;

assign tmp_i_i_i_i_cast5_fu_538_p1 = tmp_V_fu_510_p4;

assign ush_1_fu_696_p3 = ((isNeg_1_fu_678_p3[0:0] === 1'b1) ? tmp_i_i_i1_cast_fu_692_p1 : sh_assign_3_fu_672_p2);

assign ush_2_fu_850_p3 = ((isNeg_2_fu_832_p3[0:0] === 1'b1) ? tmp_i_i_i2_cast_fu_846_p1 : sh_assign_6_fu_826_p2);

assign ush_3_fu_980_p3 = ((isNeg_3_fu_962_p3[0:0] === 1'b1) ? tmp_i_i_i3_cast_fu_976_p1 : sh_assign_9_fu_956_p2);

assign ush_fu_566_p3 = ((isNeg_fu_548_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_562_p1 : sh_assign_fu_542_p2);

assign x_address0 = tmp_2_reg_1339;

assign x_d0 = x_new_q1;

always @ (posedge ap_clk) begin
    tmp_2_reg_1339[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //jacobi_HLS
