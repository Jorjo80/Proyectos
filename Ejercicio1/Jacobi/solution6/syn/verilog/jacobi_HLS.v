// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="jacobi_HLS,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=166,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=28,HLS_SYN_FF=12303,HLS_SYN_LUT=18268,HLS_VERSION=2018_3}" *)

module jacobi_HLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        J_address0,
        J_ce0,
        J_q0,
        J_address1,
        J_ce1,
        J_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 83'd1;
parameter    ap_ST_fsm_state2 = 83'd2;
parameter    ap_ST_fsm_state3 = 83'd4;
parameter    ap_ST_fsm_state4 = 83'd8;
parameter    ap_ST_fsm_state5 = 83'd16;
parameter    ap_ST_fsm_state6 = 83'd32;
parameter    ap_ST_fsm_state7 = 83'd64;
parameter    ap_ST_fsm_state8 = 83'd128;
parameter    ap_ST_fsm_state9 = 83'd256;
parameter    ap_ST_fsm_state10 = 83'd512;
parameter    ap_ST_fsm_state11 = 83'd1024;
parameter    ap_ST_fsm_state12 = 83'd2048;
parameter    ap_ST_fsm_state13 = 83'd4096;
parameter    ap_ST_fsm_state14 = 83'd8192;
parameter    ap_ST_fsm_state15 = 83'd16384;
parameter    ap_ST_fsm_state16 = 83'd32768;
parameter    ap_ST_fsm_state17 = 83'd65536;
parameter    ap_ST_fsm_state18 = 83'd131072;
parameter    ap_ST_fsm_state19 = 83'd262144;
parameter    ap_ST_fsm_state20 = 83'd524288;
parameter    ap_ST_fsm_state21 = 83'd1048576;
parameter    ap_ST_fsm_state22 = 83'd2097152;
parameter    ap_ST_fsm_state23 = 83'd4194304;
parameter    ap_ST_fsm_state24 = 83'd8388608;
parameter    ap_ST_fsm_state25 = 83'd16777216;
parameter    ap_ST_fsm_state26 = 83'd33554432;
parameter    ap_ST_fsm_state27 = 83'd67108864;
parameter    ap_ST_fsm_state28 = 83'd134217728;
parameter    ap_ST_fsm_state29 = 83'd268435456;
parameter    ap_ST_fsm_state30 = 83'd536870912;
parameter    ap_ST_fsm_state31 = 83'd1073741824;
parameter    ap_ST_fsm_state32 = 83'd2147483648;
parameter    ap_ST_fsm_state33 = 83'd4294967296;
parameter    ap_ST_fsm_state34 = 83'd8589934592;
parameter    ap_ST_fsm_state35 = 83'd17179869184;
parameter    ap_ST_fsm_state36 = 83'd34359738368;
parameter    ap_ST_fsm_state37 = 83'd68719476736;
parameter    ap_ST_fsm_state38 = 83'd137438953472;
parameter    ap_ST_fsm_state39 = 83'd274877906944;
parameter    ap_ST_fsm_state40 = 83'd549755813888;
parameter    ap_ST_fsm_state41 = 83'd1099511627776;
parameter    ap_ST_fsm_state42 = 83'd2199023255552;
parameter    ap_ST_fsm_state43 = 83'd4398046511104;
parameter    ap_ST_fsm_state44 = 83'd8796093022208;
parameter    ap_ST_fsm_state45 = 83'd17592186044416;
parameter    ap_ST_fsm_state46 = 83'd35184372088832;
parameter    ap_ST_fsm_state47 = 83'd70368744177664;
parameter    ap_ST_fsm_pp0_stage0 = 83'd140737488355328;
parameter    ap_ST_fsm_pp0_stage1 = 83'd281474976710656;
parameter    ap_ST_fsm_pp0_stage2 = 83'd562949953421312;
parameter    ap_ST_fsm_pp0_stage3 = 83'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage4 = 83'd2251799813685248;
parameter    ap_ST_fsm_state62 = 83'd4503599627370496;
parameter    ap_ST_fsm_state63 = 83'd9007199254740992;
parameter    ap_ST_fsm_state64 = 83'd18014398509481984;
parameter    ap_ST_fsm_state65 = 83'd36028797018963968;
parameter    ap_ST_fsm_state66 = 83'd72057594037927936;
parameter    ap_ST_fsm_state67 = 83'd144115188075855872;
parameter    ap_ST_fsm_state68 = 83'd288230376151711744;
parameter    ap_ST_fsm_state69 = 83'd576460752303423488;
parameter    ap_ST_fsm_state70 = 83'd1152921504606846976;
parameter    ap_ST_fsm_state71 = 83'd2305843009213693952;
parameter    ap_ST_fsm_state72 = 83'd4611686018427387904;
parameter    ap_ST_fsm_state73 = 83'd9223372036854775808;
parameter    ap_ST_fsm_state74 = 83'd18446744073709551616;
parameter    ap_ST_fsm_state75 = 83'd36893488147419103232;
parameter    ap_ST_fsm_state76 = 83'd73786976294838206464;
parameter    ap_ST_fsm_state77 = 83'd147573952589676412928;
parameter    ap_ST_fsm_state78 = 83'd295147905179352825856;
parameter    ap_ST_fsm_state79 = 83'd590295810358705651712;
parameter    ap_ST_fsm_state80 = 83'd1180591620717411303424;
parameter    ap_ST_fsm_state81 = 83'd2361183241434822606848;
parameter    ap_ST_fsm_state82 = 83'd4722366482869645213696;
parameter    ap_ST_fsm_state83 = 83'd9444732965739290427392;
parameter    ap_ST_fsm_state84 = 83'd18889465931478580854784;
parameter    ap_ST_fsm_state85 = 83'd37778931862957161709568;
parameter    ap_ST_fsm_state86 = 83'd75557863725914323419136;
parameter    ap_ST_fsm_state87 = 83'd151115727451828646838272;
parameter    ap_ST_fsm_state88 = 83'd302231454903657293676544;
parameter    ap_ST_fsm_state89 = 83'd604462909807314587353088;
parameter    ap_ST_fsm_state90 = 83'd1208925819614629174706176;
parameter    ap_ST_fsm_state91 = 83'd2417851639229258349412352;
parameter    ap_ST_fsm_state92 = 83'd4835703278458516698824704;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] J_address0;
output   J_ce0;
input  [31:0] J_q0;
output  [3:0] J_address1;
output   J_ce1;
input  [31:0] J_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [3:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] J_address0;
reg J_ce0;
reg[3:0] J_address1;
reg J_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg[1:0] b_address1;
reg b_ce1;
reg x_ce0;
reg x_we0;

(* fsm_encoding = "none" *) reg   [82:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] sum_reg_366;
reg   [4:0] q_reg_378;
wire   [63:0] grp_fu_412_p1;
reg   [63:0] reg_434;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state51_pp0_stage3_iter0;
wire    ap_block_state56_pp0_stage3_iter1;
wire    ap_block_state61_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] exitcond_reg_1216;
reg   [0:0] exitcond_reg_1216_pp0_iter1_reg;
wire   [63:0] grp_fu_402_p2;
reg   [63:0] reg_440;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire   [63:0] grp_fu_407_p2;
reg   [63:0] reg_444;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_416_p1;
reg   [63:0] tmp_7_reg_1117;
wire   [63:0] grp_fu_420_p1;
reg   [63:0] tmp_6_0_1_reg_1122;
wire   [63:0] grp_fu_424_p1;
reg   [63:0] tmp_7_0_1_reg_1127;
reg   [63:0] tmp_6_0_2_reg_1132;
wire    ap_CS_fsm_state8;
reg   [63:0] tmp_7_0_2_reg_1137;
reg   [63:0] tmp_6_0_3_reg_1142;
reg   [63:0] tmp_7_0_3_reg_1147;
wire   [63:0] grp_fu_394_p2;
reg   [63:0] tmp_10_0_1_reg_1152;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_398_p2;
reg   [63:0] tmp_10_1_reg_1157;
reg   [63:0] tmp_10_0_2_reg_1162;
wire    ap_CS_fsm_state14;
reg   [63:0] tmp_10_0_3_reg_1167;
reg   [0:0] p_Result_s_reg_1172;
wire   [31:0] p_Val2_20_fu_570_p3;
reg   [31:0] p_Val2_20_reg_1177;
reg   [0:0] p_Result_3_reg_1183;
wire   [31:0] p_Val2_26_fu_700_p3;
reg   [31:0] p_Val2_26_reg_1188;
reg   [0:0] p_Result_1_reg_1194;
wire    ap_CS_fsm_state46;
wire   [31:0] p_Val2_22_fu_842_p3;
reg   [31:0] p_Val2_22_reg_1199;
reg   [0:0] p_Result_2_reg_1205;
wire   [31:0] p_Val2_24_fu_972_p3;
reg   [31:0] p_Val2_24_reg_1210;
wire   [0:0] exitcond_fu_1016_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state48_pp0_stage0_iter0;
wire    ap_block_state53_pp0_stage0_iter1;
wire    ap_block_state58_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_1216_pp0_iter2_reg;
wire   [4:0] q_1_fu_1022_p2;
reg   [4:0] q_1_reg_1220;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_2_fu_1028_p1;
reg   [63:0] tmp_2_reg_1225;
wire   [31:0] x_new_q0;
reg  signed [31:0] x_new_load_reg_1235;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state49_pp0_stage1_iter0;
wire    ap_block_state54_pp0_stage1_iter1;
wire    ap_block_state59_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_4_fu_1033_p2;
reg   [31:0] tmp_4_reg_1241;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state50_pp0_stage2_iter0;
wire    ap_block_state55_pp0_stage2_iter1;
wire    ap_block_state60_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] grp_fu_389_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state47;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state48;
wire    ap_block_state52_pp0_stage4_iter0;
wire    ap_block_state57_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage3_subdone;
reg   [3:0] x_new_address0;
reg    x_new_ce0;
reg    x_new_we0;
reg   [31:0] x_new_d0;
reg   [3:0] x_new_address1;
reg    x_new_ce1;
reg    x_new_we1;
reg   [31:0] x_new_d1;
reg   [4:0] ap_phi_mux_q_phi_fu_382_p4;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_block_pp0_stage1;
wire   [31:0] p_Val2_27_fu_985_p3;
wire   [31:0] p_Val2_21_fu_713_p3;
wire   [31:0] p_Val2_23_fu_997_p3;
wire   [31:0] p_Val2_25_fu_1009_p3;
wire    ap_block_pp0_stage4;
reg   [63:0] grp_fu_394_p0;
reg   [63:0] grp_fu_394_p1;
wire    ap_CS_fsm_state9;
reg   [63:0] grp_fu_398_p0;
reg   [63:0] grp_fu_398_p1;
reg   [63:0] grp_fu_402_p1;
wire    ap_CS_fsm_state15;
reg   [63:0] grp_fu_407_p1;
reg   [31:0] grp_fu_412_p0;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_state62;
wire   [63:0] p_Val2_s_fu_448_p1;
wire   [51:0] tmp_V_1_fu_470_p1;
wire   [53:0] mantissa_V_fu_474_p4;
wire   [10:0] tmp_V_fu_460_p4;
wire   [11:0] tmp_i_i_i_i_cast5_fu_488_p1;
wire   [11:0] sh_assign_fu_492_p2;
wire   [10:0] tmp_i_i_i_fu_506_p2;
wire   [0:0] isNeg_fu_498_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_512_p1;
wire   [11:0] ush_fu_516_p3;
wire  signed [31:0] sh_assign_2_cast_fu_524_p1;
wire   [53:0] tmp_i_i_i_cast_8_fu_532_p1;
wire   [136:0] mantissa_V_1_cast_fu_484_p1;
wire   [136:0] tmp_i_i_i_7_fu_528_p1;
wire   [53:0] r_V_fu_536_p2;
wire   [0:0] tmp_11_fu_548_p3;
wire   [136:0] r_V_1_fu_542_p2;
wire   [31:0] tmp_8_fu_556_p1;
wire   [31:0] tmp_9_fu_560_p4;
wire   [63:0] p_Val2_15_fu_578_p1;
wire   [51:0] tmp_V_7_fu_600_p1;
wire   [53:0] mantissa_V_3_fu_604_p4;
wire   [10:0] tmp_V_6_fu_590_p4;
wire   [11:0] tmp_i_i_i_i3_cast2_fu_618_p1;
wire   [11:0] sh_assign_9_fu_622_p2;
wire   [10:0] tmp_i_i_i3_fu_636_p2;
wire   [0:0] isNeg_3_fu_628_p3;
wire  signed [11:0] tmp_i_i_i3_cast_fu_642_p1;
wire   [11:0] ush_3_fu_646_p3;
wire  signed [31:0] sh_assign_11_cast_fu_654_p1;
wire   [53:0] tmp_i_i_i3_cast_14_fu_662_p1;
wire   [136:0] mantissa_V_7_cast_fu_614_p1;
wire   [136:0] tmp_i_i_i3_13_fu_658_p1;
wire   [53:0] r_V_6_fu_666_p2;
wire   [0:0] tmp_29_fu_678_p3;
wire   [136:0] r_V_7_fu_672_p2;
wire   [31:0] tmp_12_fu_686_p1;
wire   [31:0] tmp_13_fu_690_p4;
wire   [31:0] result_V_1_fu_708_p2;
wire   [63:0] p_Val2_5_fu_720_p1;
wire   [51:0] tmp_V_3_fu_742_p1;
wire   [53:0] mantissa_V_1_fu_746_p4;
wire   [10:0] tmp_V_2_fu_732_p4;
wire   [11:0] tmp_i_i_i_i1_cast4_fu_760_p1;
wire   [11:0] sh_assign_3_fu_764_p2;
wire   [10:0] tmp_i_i_i1_fu_778_p2;
wire   [0:0] isNeg_1_fu_770_p3;
wire  signed [11:0] tmp_i_i_i1_cast_fu_784_p1;
wire   [11:0] ush_1_fu_788_p3;
wire  signed [31:0] sh_assign_5_cast_fu_796_p1;
wire   [53:0] tmp_i_i_i1_cast_10_fu_804_p1;
wire   [136:0] mantissa_V_3_cast_fu_756_p1;
wire   [136:0] tmp_i_i_i1_9_fu_800_p1;
wire   [53:0] r_V_2_fu_808_p2;
wire   [0:0] tmp_19_fu_820_p3;
wire   [136:0] r_V_3_fu_814_p2;
wire   [31:0] tmp_s_fu_828_p1;
wire   [31:0] tmp_1_fu_832_p4;
wire   [63:0] p_Val2_10_fu_850_p1;
wire   [51:0] tmp_V_5_fu_872_p1;
wire   [53:0] mantissa_V_2_fu_876_p4;
wire   [10:0] tmp_V_4_fu_862_p4;
wire   [11:0] tmp_i_i_i_i2_cast3_fu_890_p1;
wire   [11:0] sh_assign_6_fu_894_p2;
wire   [10:0] tmp_i_i_i2_fu_908_p2;
wire   [0:0] isNeg_2_fu_900_p3;
wire  signed [11:0] tmp_i_i_i2_cast_fu_914_p1;
wire   [11:0] ush_2_fu_918_p3;
wire  signed [31:0] sh_assign_8_cast_fu_926_p1;
wire   [53:0] tmp_i_i_i2_cast_12_fu_934_p1;
wire   [136:0] mantissa_V_5_cast_fu_886_p1;
wire   [136:0] tmp_i_i_i2_11_fu_930_p1;
wire   [53:0] r_V_4_fu_938_p2;
wire   [0:0] tmp_25_fu_950_p3;
wire   [136:0] r_V_5_fu_944_p2;
wire   [31:0] tmp_3_fu_958_p1;
wire   [31:0] tmp_10_fu_962_p4;
wire   [31:0] result_V_7_fu_980_p2;
wire   [31:0] result_V_3_fu_992_p2;
wire   [31:0] result_V_5_fu_1004_p2;
wire    ap_block_pp0_stage2;
wire   [63:0] grp_fu_428_p2;
wire    ap_CS_fsm_state92;
reg   [82:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 83'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

jacobi_HLS_x_new #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_new_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_new_address0),
    .ce0(x_new_ce0),
    .we0(x_new_we0),
    .d0(x_new_d0),
    .q0(x_new_q0),
    .address1(x_new_address1),
    .ce1(x_new_ce1),
    .we1(x_new_we1),
    .d1(x_new_d1)
);

jacobi_HLS_dadd_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dadd_6bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_366),
    .din1(reg_434),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

jacobi_HLS_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_394_p0),
    .din1(grp_fu_394_p1),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

jacobi_HLS_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_398_p0),
    .din1(grp_fu_398_p1),
    .ce(1'b1),
    .dout(grp_fu_398_p2)
);

jacobi_HLS_ddiv_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(grp_fu_402_p1),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

jacobi_HLS_ddiv_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(grp_fu_407_p1),
    .ce(1'b1),
    .dout(grp_fu_407_p2)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_412_p0),
    .ce(1'b1),
    .dout(grp_fu_412_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q0),
    .ce(1'b1),
    .dout(grp_fu_416_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(J_q1),
    .ce(1'b1),
    .dout(grp_fu_420_p1)
);

jacobi_HLS_sitodpeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpeOg_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q1),
    .ce(1'b1),
    .dout(grp_fu_424_p1)
);

jacobi_HLS_dsqrt_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dsqrt_fYi_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(sum_reg_366),
    .ce(1'b1),
    .dout(grp_fu_428_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state48) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        q_reg_378 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_1216 == 1'd0))) begin
        q_reg_378 <= q_1_reg_1220;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        sum_reg_366 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_reg_1216_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sum_reg_366 <= grp_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_1216 <= exitcond_fu_1016_p2;
        exitcond_reg_1216_pp0_iter1_reg <= exitcond_reg_1216;
        exitcond_reg_1216_pp0_iter2_reg <= exitcond_reg_1216_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        p_Result_1_reg_1194 <= p_Val2_5_fu_720_p1[32'd63];
        p_Result_2_reg_1205 <= p_Val2_10_fu_850_p1[32'd63];
        p_Val2_22_reg_1199 <= p_Val2_22_fu_842_p3;
        p_Val2_24_reg_1210 <= p_Val2_24_fu_972_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        p_Result_3_reg_1183 <= p_Val2_15_fu_578_p1[32'd63];
        p_Result_s_reg_1172 <= p_Val2_s_fu_448_p1[32'd63];
        p_Val2_20_reg_1177 <= p_Val2_20_fu_570_p3;
        p_Val2_26_reg_1188 <= p_Val2_26_fu_700_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_1_reg_1220 <= q_1_fu_1022_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_reg_1216_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_434 <= grp_fu_412_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        reg_440 <= grp_fu_402_p2;
        reg_444 <= grp_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_10_0_1_reg_1152 <= grp_fu_394_p2;
        tmp_10_1_reg_1157 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_10_0_2_reg_1162 <= grp_fu_394_p2;
        tmp_10_0_3_reg_1167 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_1016_p2 == 1'd0))) begin
        tmp_2_reg_1225[4 : 0] <= tmp_2_fu_1028_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_reg_1216 == 1'd0))) begin
        tmp_4_reg_1241 <= tmp_4_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_6_0_1_reg_1122 <= grp_fu_420_p1;
        tmp_7_0_1_reg_1127 <= grp_fu_424_p1;
        tmp_7_reg_1117 <= grp_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_6_0_2_reg_1132 <= grp_fu_412_p1;
        tmp_6_0_3_reg_1142 <= grp_fu_420_p1;
        tmp_7_0_2_reg_1137 <= grp_fu_416_p1;
        tmp_7_0_3_reg_1147 <= grp_fu_424_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_reg_1216 == 1'd0))) begin
        x_new_load_reg_1235 <= x_new_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        J_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        J_address0 = 64'd18446744073709551612;
    end else begin
        J_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        J_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        J_address1 = 64'd1;
    end else begin
        J_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        J_ce0 = 1'b1;
    end else begin
        J_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        J_ce1 = 1'b1;
    end else begin
        J_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_1016_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state48 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state48 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_1216 == 1'd0))) begin
        ap_phi_mux_q_phi_fu_382_p4 = q_1_reg_1220;
    end else begin
        ap_phi_mux_q_phi_fu_382_p4 = q_reg_378;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd0;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address1 = 64'd1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_394_p0 = tmp_6_0_2_reg_1132;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_394_p0 = tmp_6_0_1_reg_1122;
    end else begin
        grp_fu_394_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_394_p1 = tmp_7_0_2_reg_1137;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_394_p1 = tmp_7_0_1_reg_1127;
    end else begin
        grp_fu_394_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_398_p0 = tmp_6_0_3_reg_1142;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_398_p0 = reg_434;
    end else begin
        grp_fu_398_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_398_p1 = tmp_7_0_3_reg_1147;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_398_p1 = tmp_7_reg_1117;
    end else begin
        grp_fu_398_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_402_p1 = tmp_10_0_2_reg_1162;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_402_p1 = tmp_10_0_1_reg_1152;
    end else begin
        grp_fu_402_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_407_p1 = tmp_10_0_3_reg_1167;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_407_p1 = tmp_10_1_reg_1157;
    end else begin
        grp_fu_407_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_412_p0 = tmp_4_reg_1241;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_412_p0 = J_q0;
    end else begin
        grp_fu_412_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_new_address0 = tmp_2_fu_1028_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        x_new_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        x_new_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        x_new_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        x_new_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        x_new_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        x_new_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        x_new_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        x_new_address0 = 64'd4;
    end else begin
        x_new_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        x_new_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        x_new_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        x_new_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        x_new_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        x_new_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        x_new_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        x_new_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        x_new_address1 = 64'd5;
    end else begin
        x_new_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        x_new_ce0 = 1'b1;
    end else begin
        x_new_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        x_new_ce1 = 1'b1;
    end else begin
        x_new_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        x_new_d0 = p_Val2_23_fu_997_p3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        x_new_d0 = p_Val2_27_fu_985_p3;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        x_new_d0 = 32'd1;
    end else begin
        x_new_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        x_new_d1 = p_Val2_25_fu_1009_p3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        x_new_d1 = p_Val2_21_fu_713_p3;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        x_new_d1 = 32'd1;
    end else begin
        x_new_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        x_new_we0 = 1'b1;
    end else begin
        x_new_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        x_new_we1 = 1'b1;
    end else begin
        x_new_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_reg_1216 == 1'd0))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_1016_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_1016_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd82];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = grp_fu_428_p2;

assign exitcond_fu_1016_p2 = ((ap_phi_mux_q_phi_fu_382_p4 == 5'd16) ? 1'b1 : 1'b0);

assign isNeg_1_fu_770_p3 = sh_assign_3_fu_764_p2[32'd11];

assign isNeg_2_fu_900_p3 = sh_assign_6_fu_894_p2[32'd11];

assign isNeg_3_fu_628_p3 = sh_assign_9_fu_622_p2[32'd11];

assign isNeg_fu_498_p3 = sh_assign_fu_492_p2[32'd11];

assign mantissa_V_1_cast_fu_484_p1 = mantissa_V_fu_474_p4;

assign mantissa_V_1_fu_746_p4 = {{{{1'd1}, {tmp_V_3_fu_742_p1}}}, {1'd0}};

assign mantissa_V_2_fu_876_p4 = {{{{1'd1}, {tmp_V_5_fu_872_p1}}}, {1'd0}};

assign mantissa_V_3_cast_fu_756_p1 = mantissa_V_1_fu_746_p4;

assign mantissa_V_3_fu_604_p4 = {{{{1'd1}, {tmp_V_7_fu_600_p1}}}, {1'd0}};

assign mantissa_V_5_cast_fu_886_p1 = mantissa_V_2_fu_876_p4;

assign mantissa_V_7_cast_fu_614_p1 = mantissa_V_3_fu_604_p4;

assign mantissa_V_fu_474_p4 = {{{{1'd1}, {tmp_V_1_fu_470_p1}}}, {1'd0}};

assign p_Val2_10_fu_850_p1 = reg_444;

assign p_Val2_15_fu_578_p1 = reg_444;

assign p_Val2_20_fu_570_p3 = ((isNeg_fu_498_p3[0:0] === 1'b1) ? tmp_8_fu_556_p1 : tmp_9_fu_560_p4);

assign p_Val2_21_fu_713_p3 = ((p_Result_s_reg_1172[0:0] === 1'b1) ? result_V_1_fu_708_p2 : p_Val2_20_reg_1177);

assign p_Val2_22_fu_842_p3 = ((isNeg_1_fu_770_p3[0:0] === 1'b1) ? tmp_s_fu_828_p1 : tmp_1_fu_832_p4);

assign p_Val2_23_fu_997_p3 = ((p_Result_1_reg_1194[0:0] === 1'b1) ? result_V_3_fu_992_p2 : p_Val2_22_reg_1199);

assign p_Val2_24_fu_972_p3 = ((isNeg_2_fu_900_p3[0:0] === 1'b1) ? tmp_3_fu_958_p1 : tmp_10_fu_962_p4);

assign p_Val2_25_fu_1009_p3 = ((p_Result_2_reg_1205[0:0] === 1'b1) ? result_V_5_fu_1004_p2 : p_Val2_24_reg_1210);

assign p_Val2_26_fu_700_p3 = ((isNeg_3_fu_628_p3[0:0] === 1'b1) ? tmp_12_fu_686_p1 : tmp_13_fu_690_p4);

assign p_Val2_27_fu_985_p3 = ((p_Result_3_reg_1183[0:0] === 1'b1) ? result_V_7_fu_980_p2 : p_Val2_26_reg_1188);

assign p_Val2_5_fu_720_p1 = reg_440;

assign p_Val2_s_fu_448_p1 = reg_440;

assign q_1_fu_1022_p2 = (ap_phi_mux_q_phi_fu_382_p4 + 5'd1);

assign r_V_1_fu_542_p2 = mantissa_V_1_cast_fu_484_p1 << tmp_i_i_i_7_fu_528_p1;

assign r_V_2_fu_808_p2 = mantissa_V_1_fu_746_p4 >> tmp_i_i_i1_cast_10_fu_804_p1;

assign r_V_3_fu_814_p2 = mantissa_V_3_cast_fu_756_p1 << tmp_i_i_i1_9_fu_800_p1;

assign r_V_4_fu_938_p2 = mantissa_V_2_fu_876_p4 >> tmp_i_i_i2_cast_12_fu_934_p1;

assign r_V_5_fu_944_p2 = mantissa_V_5_cast_fu_886_p1 << tmp_i_i_i2_11_fu_930_p1;

assign r_V_6_fu_666_p2 = mantissa_V_3_fu_604_p4 >> tmp_i_i_i3_cast_14_fu_662_p1;

assign r_V_7_fu_672_p2 = mantissa_V_7_cast_fu_614_p1 << tmp_i_i_i3_13_fu_658_p1;

assign r_V_fu_536_p2 = mantissa_V_fu_474_p4 >> tmp_i_i_i_cast_8_fu_532_p1;

assign result_V_1_fu_708_p2 = (32'd0 - p_Val2_20_reg_1177);

assign result_V_3_fu_992_p2 = (32'd0 - p_Val2_22_reg_1199);

assign result_V_5_fu_1004_p2 = (32'd0 - p_Val2_24_reg_1210);

assign result_V_7_fu_980_p2 = (32'd0 - p_Val2_26_reg_1188);

assign sh_assign_11_cast_fu_654_p1 = $signed(ush_3_fu_646_p3);

assign sh_assign_2_cast_fu_524_p1 = $signed(ush_fu_516_p3);

assign sh_assign_3_fu_764_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i1_cast4_fu_760_p1));

assign sh_assign_5_cast_fu_796_p1 = $signed(ush_1_fu_788_p3);

assign sh_assign_6_fu_894_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i2_cast3_fu_890_p1));

assign sh_assign_8_cast_fu_926_p1 = $signed(ush_2_fu_918_p3);

assign sh_assign_9_fu_622_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i3_cast2_fu_618_p1));

assign sh_assign_fu_492_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast5_fu_488_p1));

assign tmp_10_fu_962_p4 = {{r_V_5_fu_944_p2[84:53]}};

assign tmp_11_fu_548_p3 = r_V_fu_536_p2[32'd53];

assign tmp_12_fu_686_p1 = tmp_29_fu_678_p3;

assign tmp_13_fu_690_p4 = {{r_V_7_fu_672_p2[84:53]}};

assign tmp_19_fu_820_p3 = r_V_2_fu_808_p2[32'd53];

assign tmp_1_fu_832_p4 = {{r_V_3_fu_814_p2[84:53]}};

assign tmp_25_fu_950_p3 = r_V_4_fu_938_p2[32'd53];

assign tmp_29_fu_678_p3 = r_V_6_fu_666_p2[32'd53];

assign tmp_2_fu_1028_p1 = ap_phi_mux_q_phi_fu_382_p4;

assign tmp_3_fu_958_p1 = tmp_25_fu_950_p3;

assign tmp_4_fu_1033_p2 = ($signed(x_new_load_reg_1235) * $signed(x_new_load_reg_1235));

assign tmp_8_fu_556_p1 = tmp_11_fu_548_p3;

assign tmp_9_fu_560_p4 = {{r_V_1_fu_542_p2[84:53]}};

assign tmp_V_1_fu_470_p1 = p_Val2_s_fu_448_p1[51:0];

assign tmp_V_2_fu_732_p4 = {{p_Val2_5_fu_720_p1[62:52]}};

assign tmp_V_3_fu_742_p1 = p_Val2_5_fu_720_p1[51:0];

assign tmp_V_4_fu_862_p4 = {{p_Val2_10_fu_850_p1[62:52]}};

assign tmp_V_5_fu_872_p1 = p_Val2_10_fu_850_p1[51:0];

assign tmp_V_6_fu_590_p4 = {{p_Val2_15_fu_578_p1[62:52]}};

assign tmp_V_7_fu_600_p1 = p_Val2_15_fu_578_p1[51:0];

assign tmp_V_fu_460_p4 = {{p_Val2_s_fu_448_p1[62:52]}};

assign tmp_i_i_i1_9_fu_800_p1 = $unsigned(sh_assign_5_cast_fu_796_p1);

assign tmp_i_i_i1_cast_10_fu_804_p1 = $unsigned(sh_assign_5_cast_fu_796_p1);

assign tmp_i_i_i1_cast_fu_784_p1 = $signed(tmp_i_i_i1_fu_778_p2);

assign tmp_i_i_i1_fu_778_p2 = (11'd1023 - tmp_V_2_fu_732_p4);

assign tmp_i_i_i2_11_fu_930_p1 = $unsigned(sh_assign_8_cast_fu_926_p1);

assign tmp_i_i_i2_cast_12_fu_934_p1 = $unsigned(sh_assign_8_cast_fu_926_p1);

assign tmp_i_i_i2_cast_fu_914_p1 = $signed(tmp_i_i_i2_fu_908_p2);

assign tmp_i_i_i2_fu_908_p2 = (11'd1023 - tmp_V_4_fu_862_p4);

assign tmp_i_i_i3_13_fu_658_p1 = $unsigned(sh_assign_11_cast_fu_654_p1);

assign tmp_i_i_i3_cast_14_fu_662_p1 = $unsigned(sh_assign_11_cast_fu_654_p1);

assign tmp_i_i_i3_cast_fu_642_p1 = $signed(tmp_i_i_i3_fu_636_p2);

assign tmp_i_i_i3_fu_636_p2 = (11'd1023 - tmp_V_6_fu_590_p4);

assign tmp_i_i_i_7_fu_528_p1 = $unsigned(sh_assign_2_cast_fu_524_p1);

assign tmp_i_i_i_cast_8_fu_532_p1 = $unsigned(sh_assign_2_cast_fu_524_p1);

assign tmp_i_i_i_cast_fu_512_p1 = $signed(tmp_i_i_i_fu_506_p2);

assign tmp_i_i_i_fu_506_p2 = (11'd1023 - tmp_V_fu_460_p4);

assign tmp_i_i_i_i1_cast4_fu_760_p1 = tmp_V_2_fu_732_p4;

assign tmp_i_i_i_i2_cast3_fu_890_p1 = tmp_V_4_fu_862_p4;

assign tmp_i_i_i_i3_cast2_fu_618_p1 = tmp_V_6_fu_590_p4;

assign tmp_i_i_i_i_cast5_fu_488_p1 = tmp_V_fu_460_p4;

assign tmp_s_fu_828_p1 = tmp_19_fu_820_p3;

assign ush_1_fu_788_p3 = ((isNeg_1_fu_770_p3[0:0] === 1'b1) ? tmp_i_i_i1_cast_fu_784_p1 : sh_assign_3_fu_764_p2);

assign ush_2_fu_918_p3 = ((isNeg_2_fu_900_p3[0:0] === 1'b1) ? tmp_i_i_i2_cast_fu_914_p1 : sh_assign_6_fu_894_p2);

assign ush_3_fu_646_p3 = ((isNeg_3_fu_628_p3[0:0] === 1'b1) ? tmp_i_i_i3_cast_fu_642_p1 : sh_assign_9_fu_622_p2);

assign ush_fu_516_p3 = ((isNeg_fu_498_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_512_p1 : sh_assign_fu_492_p2);

assign x_address0 = tmp_2_reg_1225;

assign x_d0 = x_new_q0;

always @ (posedge ap_clk) begin
    tmp_2_reg_1225[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //jacobi_HLS
