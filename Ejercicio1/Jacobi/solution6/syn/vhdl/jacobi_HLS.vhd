-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jacobi_HLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    J_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    J_ce0 : OUT STD_LOGIC;
    J_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    J_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    J_ce1 : OUT STD_LOGIC;
    J_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of jacobi_HLS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "jacobi_HLS,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=166,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=28,HLS_SYN_FF=12303,HLS_SYN_LUT=18268,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (82 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (82 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (82 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (82 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (82 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (82 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (82 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (82 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (82 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (82 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (82 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (82 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFC : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (82 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sum_reg_366 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_reg_378 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_434 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state51_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state56_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state61_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal exitcond_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1216_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_1117 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_0_1_reg_1122 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_0_1_reg_1127 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_0_2_reg_1132 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_7_0_2_reg_1137 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_0_3_reg_1142 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_0_3_reg_1147 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_0_1_reg_1152 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_1_reg_1157 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_0_2_reg_1162 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_10_0_3_reg_1167 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_20_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_20_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_26_fu_700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_26_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_1194 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal p_Val2_22_fu_842_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_22_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_972_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_24_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state48_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_1216_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal q_1_fu_1022_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal q_1_reg_1220 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_2_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_1225 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_new_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_new_load_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state49_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_4_fu_1033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state50_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state55_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state60_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state48 : STD_LOGIC;
    signal ap_block_state52_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state57_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal x_new_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_new_ce0 : STD_LOGIC;
    signal x_new_we0 : STD_LOGIC;
    signal x_new_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_new_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_new_ce1 : STD_LOGIC;
    signal x_new_we1 : STD_LOGIC;
    signal x_new_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_q_phi_fu_382_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal p_Val2_27_fu_985_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_21_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_23_fu_997_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_25_fu_1009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_394_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_398_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_412_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal p_Val2_s_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_470_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_474_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_460_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast5_fu_488_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_492_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_506_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_512_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_516_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_cast_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_cast_8_fu_532_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_1_cast_fu_484_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_7_fu_528_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_536_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_11_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_542_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_8_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_560_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_7_fu_600_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_3_fu_604_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_6_fu_590_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i3_cast2_fu_618_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_9_fu_622_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i3_fu_636_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_3_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i3_cast_fu_642_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_3_fu_646_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_11_cast_fu_654_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i3_cast_14_fu_662_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_7_cast_fu_614_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i3_13_fu_658_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_6_fu_666_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_29_fu_678_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_7_fu_672_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_12_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_690_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_3_fu_742_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_1_fu_746_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_2_fu_732_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i1_cast4_fu_760_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_764_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i1_fu_778_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i1_cast_fu_784_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_788_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_cast_fu_796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i1_cast_10_fu_804_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_3_cast_fu_756_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i1_9_fu_800_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_808_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_19_fu_820_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_814_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_s_fu_828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_832_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_5_fu_872_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_2_fu_876_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_4_fu_862_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i2_cast3_fu_890_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_6_fu_894_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i2_fu_908_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_900_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i2_cast_fu_914_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_2_fu_918_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_8_cast_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i2_cast_12_fu_934_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_5_cast_fu_886_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i2_11_fu_930_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_4_fu_938_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_25_fu_950_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_944_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_3_fu_958_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_962_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_992_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (82 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component jacobi_HLS_dadd_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_dmul_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_ddiv_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_sitodpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_dsqrt_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_x_new IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_new_U : component jacobi_HLS_x_new
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_new_address0,
        ce0 => x_new_ce0,
        we0 => x_new_we0,
        d0 => x_new_d0,
        q0 => x_new_q0,
        address1 => x_new_address1,
        ce1 => x_new_ce1,
        we1 => x_new_we1,
        d1 => x_new_d1);

    jacobi_HLS_dadd_6bkb_U1 : component jacobi_HLS_dadd_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_366,
        din1 => reg_434,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    jacobi_HLS_dmul_6cud_U2 : component jacobi_HLS_dmul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_394_p0,
        din1 => grp_fu_394_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p2);

    jacobi_HLS_dmul_6cud_U3 : component jacobi_HLS_dmul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_398_p0,
        din1 => grp_fu_398_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_398_p2);

    jacobi_HLS_ddiv_6dEe_U4 : component jacobi_HLS_ddiv_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => grp_fu_402_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    jacobi_HLS_ddiv_6dEe_U5 : component jacobi_HLS_ddiv_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => grp_fu_407_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_407_p2);

    jacobi_HLS_sitodpeOg_U6 : component jacobi_HLS_sitodpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_412_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_412_p1);

    jacobi_HLS_sitodpeOg_U7 : component jacobi_HLS_sitodpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_416_p1);

    jacobi_HLS_sitodpeOg_U8 : component jacobi_HLS_sitodpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => J_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_420_p1);

    jacobi_HLS_sitodpeOg_U9 : component jacobi_HLS_sitodpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_424_p1);

    jacobi_HLS_dsqrt_fYi_U10 : component jacobi_HLS_dsqrt_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => sum_reg_366,
        ce => ap_const_logic_1,
        dout => grp_fu_428_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    q_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                q_reg_378 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_1216 = ap_const_lv1_0))) then 
                q_reg_378 <= q_1_reg_1220;
            end if; 
        end if;
    end process;

    sum_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sum_reg_366 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_reg_1216_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                sum_reg_366 <= grp_fu_389_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_1216 <= exitcond_fu_1016_p2;
                exitcond_reg_1216_pp0_iter1_reg <= exitcond_reg_1216;
                exitcond_reg_1216_pp0_iter2_reg <= exitcond_reg_1216_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                p_Result_1_reg_1194 <= p_Val2_5_fu_720_p1(63 downto 63);
                p_Result_2_reg_1205 <= p_Val2_10_fu_850_p1(63 downto 63);
                p_Val2_22_reg_1199 <= p_Val2_22_fu_842_p3;
                p_Val2_24_reg_1210 <= p_Val2_24_fu_972_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                p_Result_3_reg_1183 <= p_Val2_15_fu_578_p1(63 downto 63);
                p_Result_s_reg_1172 <= p_Val2_s_fu_448_p1(63 downto 63);
                p_Val2_20_reg_1177 <= p_Val2_20_fu_570_p3;
                p_Val2_26_reg_1188 <= p_Val2_26_fu_700_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                q_1_reg_1220 <= q_1_fu_1022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_reg_1216_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_434 <= grp_fu_412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_440 <= grp_fu_402_p2;
                reg_444 <= grp_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_10_0_1_reg_1152 <= grp_fu_394_p2;
                tmp_10_1_reg_1157 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_10_0_2_reg_1162 <= grp_fu_394_p2;
                tmp_10_0_3_reg_1167 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_fu_1016_p2 = ap_const_lv1_0))) then
                    tmp_2_reg_1225(4 downto 0) <= tmp_2_fu_1028_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_reg_1216 = ap_const_lv1_0))) then
                tmp_4_reg_1241 <= tmp_4_fu_1033_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_6_0_1_reg_1122 <= grp_fu_420_p1;
                tmp_7_0_1_reg_1127 <= grp_fu_424_p1;
                tmp_7_reg_1117 <= grp_fu_416_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_6_0_2_reg_1132 <= grp_fu_412_p1;
                tmp_6_0_3_reg_1142 <= grp_fu_420_p1;
                tmp_7_0_2_reg_1137 <= grp_fu_416_p1;
                tmp_7_0_3_reg_1147 <= grp_fu_424_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_reg_1216 = ap_const_lv1_0))) then
                x_new_load_reg_1235 <= x_new_q0;
            end if;
        end if;
    end process;
    tmp_2_reg_1225(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, exitcond_fu_1016_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_1016_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_1016_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    J_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            J_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            J_address0 <= ap_const_lv64_FFFFFFFFFFFFFFFC(4 - 1 downto 0);
        else 
            J_address0 <= "XXXX";
        end if; 
    end process;


    J_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            J_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            J_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            J_address1 <= "XXXX";
        end if; 
    end process;


    J_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            J_ce0 <= ap_const_logic_1;
        else 
            J_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    J_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            J_ce1 <= ap_const_logic_1;
        else 
            J_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(48);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(49);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(50);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(51);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state62 <= ap_CS_fsm(52);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(82);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state48_assign_proc : process(exitcond_fu_1016_p2)
    begin
        if ((exitcond_fu_1016_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_q_phi_fu_382_p4_assign_proc : process(q_reg_378, ap_enable_reg_pp0_iter1, exitcond_reg_1216, ap_CS_fsm_pp0_stage0, q_1_reg_1220, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_1216 = ap_const_lv1_0))) then 
            ap_phi_mux_q_phi_fu_382_p4 <= q_1_reg_1220;
        else 
            ap_phi_mux_q_phi_fu_382_p4 <= q_reg_378;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_428_p2;

    b_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            b_address0 <= "XX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            b_address1 <= "XX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_1016_p2 <= "1" when (ap_phi_mux_q_phi_fu_382_p4 = ap_const_lv5_10) else "0";

    grp_fu_394_p0_assign_proc : process(tmp_6_0_1_reg_1122, tmp_6_0_2_reg_1132, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_394_p0 <= tmp_6_0_2_reg_1132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_394_p0 <= tmp_6_0_1_reg_1122;
        else 
            grp_fu_394_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_394_p1_assign_proc : process(tmp_7_0_1_reg_1127, ap_CS_fsm_state8, tmp_7_0_2_reg_1137, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_394_p1 <= tmp_7_0_2_reg_1137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_394_p1 <= tmp_7_0_1_reg_1127;
        else 
            grp_fu_394_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_398_p0_assign_proc : process(reg_434, ap_CS_fsm_state8, tmp_6_0_3_reg_1142, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_398_p0 <= tmp_6_0_3_reg_1142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_398_p0 <= reg_434;
        else 
            grp_fu_398_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_398_p1_assign_proc : process(tmp_7_reg_1117, ap_CS_fsm_state8, tmp_7_0_3_reg_1147, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_398_p1 <= tmp_7_0_3_reg_1147;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_398_p1 <= tmp_7_reg_1117;
        else 
            grp_fu_398_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_402_p1_assign_proc : process(tmp_10_0_1_reg_1152, tmp_10_0_2_reg_1162, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_402_p1 <= tmp_10_0_2_reg_1162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_402_p1 <= tmp_10_0_1_reg_1152;
        else 
            grp_fu_402_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_407_p1_assign_proc : process(tmp_10_1_reg_1157, ap_CS_fsm_state14, tmp_10_0_3_reg_1167, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_407_p1 <= tmp_10_0_3_reg_1167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_407_p1 <= tmp_10_1_reg_1157;
        else 
            grp_fu_407_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_412_p0_assign_proc : process(J_q0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, tmp_4_reg_1241, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_412_p0 <= tmp_4_reg_1241;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_412_p0 <= J_q0;
        else 
            grp_fu_412_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    isNeg_1_fu_770_p3 <= sh_assign_3_fu_764_p2(11 downto 11);
    isNeg_2_fu_900_p3 <= sh_assign_6_fu_894_p2(11 downto 11);
    isNeg_3_fu_628_p3 <= sh_assign_9_fu_622_p2(11 downto 11);
    isNeg_fu_498_p3 <= sh_assign_fu_492_p2(11 downto 11);
    mantissa_V_1_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_474_p4),137));
    mantissa_V_1_fu_746_p4 <= ((ap_const_lv1_1 & tmp_V_3_fu_742_p1) & ap_const_lv1_0);
    mantissa_V_2_fu_876_p4 <= ((ap_const_lv1_1 & tmp_V_5_fu_872_p1) & ap_const_lv1_0);
    mantissa_V_3_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_746_p4),137));
    mantissa_V_3_fu_604_p4 <= ((ap_const_lv1_1 & tmp_V_7_fu_600_p1) & ap_const_lv1_0);
    mantissa_V_5_cast_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_2_fu_876_p4),137));
    mantissa_V_7_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_3_fu_604_p4),137));
    mantissa_V_fu_474_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_470_p1) & ap_const_lv1_0);
    p_Val2_10_fu_850_p1 <= reg_444;
    p_Val2_15_fu_578_p1 <= reg_444;
    p_Val2_20_fu_570_p3 <= 
        tmp_8_fu_556_p1 when (isNeg_fu_498_p3(0) = '1') else 
        tmp_9_fu_560_p4;
    p_Val2_21_fu_713_p3 <= 
        result_V_1_fu_708_p2 when (p_Result_s_reg_1172(0) = '1') else 
        p_Val2_20_reg_1177;
    p_Val2_22_fu_842_p3 <= 
        tmp_s_fu_828_p1 when (isNeg_1_fu_770_p3(0) = '1') else 
        tmp_1_fu_832_p4;
    p_Val2_23_fu_997_p3 <= 
        result_V_3_fu_992_p2 when (p_Result_1_reg_1194(0) = '1') else 
        p_Val2_22_reg_1199;
    p_Val2_24_fu_972_p3 <= 
        tmp_3_fu_958_p1 when (isNeg_2_fu_900_p3(0) = '1') else 
        tmp_10_fu_962_p4;
    p_Val2_25_fu_1009_p3 <= 
        result_V_5_fu_1004_p2 when (p_Result_2_reg_1205(0) = '1') else 
        p_Val2_24_reg_1210;
    p_Val2_26_fu_700_p3 <= 
        tmp_12_fu_686_p1 when (isNeg_3_fu_628_p3(0) = '1') else 
        tmp_13_fu_690_p4;
    p_Val2_27_fu_985_p3 <= 
        result_V_7_fu_980_p2 when (p_Result_3_reg_1183(0) = '1') else 
        p_Val2_26_reg_1188;
    p_Val2_5_fu_720_p1 <= reg_440;
    p_Val2_s_fu_448_p1 <= reg_440;
    q_1_fu_1022_p2 <= std_logic_vector(unsigned(ap_phi_mux_q_phi_fu_382_p4) + unsigned(ap_const_lv5_1));
    r_V_1_fu_542_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast_fu_484_p1),to_integer(unsigned('0' & tmp_i_i_i_7_fu_528_p1(31-1 downto 0)))));
    r_V_2_fu_808_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_746_p4),to_integer(unsigned('0' & tmp_i_i_i1_cast_10_fu_804_p1(31-1 downto 0)))));
    r_V_3_fu_814_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_3_cast_fu_756_p1),to_integer(unsigned('0' & tmp_i_i_i1_9_fu_800_p1(31-1 downto 0)))));
    r_V_4_fu_938_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_2_fu_876_p4),to_integer(unsigned('0' & tmp_i_i_i2_cast_12_fu_934_p1(31-1 downto 0)))));
    r_V_5_fu_944_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_5_cast_fu_886_p1),to_integer(unsigned('0' & tmp_i_i_i2_11_fu_930_p1(31-1 downto 0)))));
    r_V_6_fu_666_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_3_fu_604_p4),to_integer(unsigned('0' & tmp_i_i_i3_cast_14_fu_662_p1(31-1 downto 0)))));
    r_V_7_fu_672_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_7_cast_fu_614_p1),to_integer(unsigned('0' & tmp_i_i_i3_13_fu_658_p1(31-1 downto 0)))));
    r_V_fu_536_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_474_p4),to_integer(unsigned('0' & tmp_i_i_i_cast_8_fu_532_p1(31-1 downto 0)))));
    result_V_1_fu_708_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_20_reg_1177));
    result_V_3_fu_992_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_22_reg_1199));
    result_V_5_fu_1004_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_24_reg_1210));
    result_V_7_fu_980_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_26_reg_1188));
        sh_assign_11_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_646_p3),32));

        sh_assign_2_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_516_p3),32));

    sh_assign_3_fu_764_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i1_cast4_fu_760_p1));
        sh_assign_5_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_788_p3),32));

    sh_assign_6_fu_894_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i2_cast3_fu_890_p1));
        sh_assign_8_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_918_p3),32));

    sh_assign_9_fu_622_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i3_cast2_fu_618_p1));
    sh_assign_fu_492_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast5_fu_488_p1));
    tmp_10_fu_962_p4 <= r_V_5_fu_944_p2(84 downto 53);
    tmp_11_fu_548_p3 <= r_V_fu_536_p2(53 downto 53);
    tmp_12_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_678_p3),32));
    tmp_13_fu_690_p4 <= r_V_7_fu_672_p2(84 downto 53);
    tmp_19_fu_820_p3 <= r_V_2_fu_808_p2(53 downto 53);
    tmp_1_fu_832_p4 <= r_V_3_fu_814_p2(84 downto 53);
    tmp_25_fu_950_p3 <= r_V_4_fu_938_p2(53 downto 53);
    tmp_29_fu_678_p3 <= r_V_6_fu_666_p2(53 downto 53);
    tmp_2_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_q_phi_fu_382_p4),64));
    tmp_3_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_950_p3),32));
    tmp_4_fu_1033_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(x_new_load_reg_1235) * signed(x_new_load_reg_1235))), 32));
    tmp_8_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_548_p3),32));
    tmp_9_fu_560_p4 <= r_V_1_fu_542_p2(84 downto 53);
    tmp_V_1_fu_470_p1 <= p_Val2_s_fu_448_p1(52 - 1 downto 0);
    tmp_V_2_fu_732_p4 <= p_Val2_5_fu_720_p1(62 downto 52);
    tmp_V_3_fu_742_p1 <= p_Val2_5_fu_720_p1(52 - 1 downto 0);
    tmp_V_4_fu_862_p4 <= p_Val2_10_fu_850_p1(62 downto 52);
    tmp_V_5_fu_872_p1 <= p_Val2_10_fu_850_p1(52 - 1 downto 0);
    tmp_V_6_fu_590_p4 <= p_Val2_15_fu_578_p1(62 downto 52);
    tmp_V_7_fu_600_p1 <= p_Val2_15_fu_578_p1(52 - 1 downto 0);
    tmp_V_fu_460_p4 <= p_Val2_s_fu_448_p1(62 downto 52);
    tmp_i_i_i1_9_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_796_p1),137));
    tmp_i_i_i1_cast_10_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_796_p1),54));
        tmp_i_i_i1_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i1_fu_778_p2),12));

    tmp_i_i_i1_fu_778_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_2_fu_732_p4));
    tmp_i_i_i2_11_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_8_cast_fu_926_p1),137));
    tmp_i_i_i2_cast_12_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_8_cast_fu_926_p1),54));
        tmp_i_i_i2_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i2_fu_908_p2),12));

    tmp_i_i_i2_fu_908_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_4_fu_862_p4));
    tmp_i_i_i3_13_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_11_cast_fu_654_p1),137));
    tmp_i_i_i3_cast_14_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_11_cast_fu_654_p1),54));
        tmp_i_i_i3_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i3_fu_636_p2),12));

    tmp_i_i_i3_fu_636_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_6_fu_590_p4));
    tmp_i_i_i_7_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_524_p1),137));
    tmp_i_i_i_cast_8_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_524_p1),54));
        tmp_i_i_i_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_506_p2),12));

    tmp_i_i_i_fu_506_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_460_p4));
    tmp_i_i_i_i1_cast4_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_732_p4),12));
    tmp_i_i_i_i2_cast3_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_fu_862_p4),12));
    tmp_i_i_i_i3_cast2_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_6_fu_590_p4),12));
    tmp_i_i_i_i_cast5_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_460_p4),12));
    tmp_s_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_820_p3),32));
    ush_1_fu_788_p3 <= 
        tmp_i_i_i1_cast_fu_784_p1 when (isNeg_1_fu_770_p3(0) = '1') else 
        sh_assign_3_fu_764_p2;
    ush_2_fu_918_p3 <= 
        tmp_i_i_i2_cast_fu_914_p1 when (isNeg_2_fu_900_p3(0) = '1') else 
        sh_assign_6_fu_894_p2;
    ush_3_fu_646_p3 <= 
        tmp_i_i_i3_cast_fu_642_p1 when (isNeg_3_fu_628_p3(0) = '1') else 
        sh_assign_9_fu_622_p2;
    ush_fu_516_p3 <= 
        tmp_i_i_i_cast_fu_512_p1 when (isNeg_fu_498_p3(0) = '1') else 
        sh_assign_fu_492_p2;
    x_address0 <= tmp_2_reg_1225(4 - 1 downto 0);

    x_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= x_new_q0;

    x_new_address0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_2_fu_1028_p1, ap_CS_fsm_state47, ap_block_pp0_stage0, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_new_address0 <= tmp_2_fu_1028_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            x_new_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            x_new_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            x_new_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            x_new_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            x_new_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            x_new_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            x_new_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            x_new_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        else 
            x_new_address0 <= "XXXX";
        end if; 
    end process;


    x_new_address1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            x_new_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            x_new_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            x_new_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            x_new_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            x_new_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            x_new_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            x_new_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            x_new_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        else 
            x_new_address1 <= "XXXX";
        end if; 
    end process;


    x_new_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state47, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            x_new_ce0 <= ap_const_logic_1;
        else 
            x_new_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_new_ce1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            x_new_ce1 <= ap_const_logic_1;
        else 
            x_new_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_new_d0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, p_Val2_27_fu_985_p3, p_Val2_23_fu_997_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            x_new_d0 <= p_Val2_23_fu_997_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            x_new_d0 <= p_Val2_27_fu_985_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            x_new_d0 <= ap_const_lv32_1;
        else 
            x_new_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_new_d1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, p_Val2_21_fu_713_p3, p_Val2_25_fu_1009_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            x_new_d1 <= p_Val2_25_fu_1009_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            x_new_d1 <= p_Val2_21_fu_713_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            x_new_d1 <= ap_const_lv32_1;
        else 
            x_new_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_new_we0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            x_new_we0 <= ap_const_logic_1;
        else 
            x_new_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_new_we1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            x_new_we1 <= ap_const_logic_1;
        else 
            x_new_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x_we0_assign_proc : process(exitcond_reg_1216, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_reg_1216 = ap_const_lv1_0))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
