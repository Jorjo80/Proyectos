// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="jacobi_HLS,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.354800,HLS_SYN_LAT=183,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=67,HLS_SYN_FF=13875,HLS_SYN_LUT=20679,HLS_VERSION=2018_3}" *)

module jacobi_HLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        J_address0,
        J_ce0,
        J_q0,
        J_address1,
        J_ce1,
        J_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_address1,
        x_ce1,
        x_we1,
        x_d1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 168'd1;
parameter    ap_ST_fsm_state2 = 168'd2;
parameter    ap_ST_fsm_state3 = 168'd4;
parameter    ap_ST_fsm_state4 = 168'd8;
parameter    ap_ST_fsm_state5 = 168'd16;
parameter    ap_ST_fsm_state6 = 168'd32;
parameter    ap_ST_fsm_state7 = 168'd64;
parameter    ap_ST_fsm_state8 = 168'd128;
parameter    ap_ST_fsm_state9 = 168'd256;
parameter    ap_ST_fsm_state10 = 168'd512;
parameter    ap_ST_fsm_state11 = 168'd1024;
parameter    ap_ST_fsm_state12 = 168'd2048;
parameter    ap_ST_fsm_state13 = 168'd4096;
parameter    ap_ST_fsm_state14 = 168'd8192;
parameter    ap_ST_fsm_state15 = 168'd16384;
parameter    ap_ST_fsm_state16 = 168'd32768;
parameter    ap_ST_fsm_state17 = 168'd65536;
parameter    ap_ST_fsm_state18 = 168'd131072;
parameter    ap_ST_fsm_state19 = 168'd262144;
parameter    ap_ST_fsm_state20 = 168'd524288;
parameter    ap_ST_fsm_state21 = 168'd1048576;
parameter    ap_ST_fsm_state22 = 168'd2097152;
parameter    ap_ST_fsm_state23 = 168'd4194304;
parameter    ap_ST_fsm_state24 = 168'd8388608;
parameter    ap_ST_fsm_state25 = 168'd16777216;
parameter    ap_ST_fsm_state26 = 168'd33554432;
parameter    ap_ST_fsm_state27 = 168'd67108864;
parameter    ap_ST_fsm_state28 = 168'd134217728;
parameter    ap_ST_fsm_state29 = 168'd268435456;
parameter    ap_ST_fsm_state30 = 168'd536870912;
parameter    ap_ST_fsm_state31 = 168'd1073741824;
parameter    ap_ST_fsm_state32 = 168'd2147483648;
parameter    ap_ST_fsm_state33 = 168'd4294967296;
parameter    ap_ST_fsm_state34 = 168'd8589934592;
parameter    ap_ST_fsm_state35 = 168'd17179869184;
parameter    ap_ST_fsm_state36 = 168'd34359738368;
parameter    ap_ST_fsm_state37 = 168'd68719476736;
parameter    ap_ST_fsm_state38 = 168'd137438953472;
parameter    ap_ST_fsm_state39 = 168'd274877906944;
parameter    ap_ST_fsm_state40 = 168'd549755813888;
parameter    ap_ST_fsm_state41 = 168'd1099511627776;
parameter    ap_ST_fsm_state42 = 168'd2199023255552;
parameter    ap_ST_fsm_state43 = 168'd4398046511104;
parameter    ap_ST_fsm_state44 = 168'd8796093022208;
parameter    ap_ST_fsm_state45 = 168'd17592186044416;
parameter    ap_ST_fsm_state46 = 168'd35184372088832;
parameter    ap_ST_fsm_state47 = 168'd70368744177664;
parameter    ap_ST_fsm_state48 = 168'd140737488355328;
parameter    ap_ST_fsm_state49 = 168'd281474976710656;
parameter    ap_ST_fsm_state50 = 168'd562949953421312;
parameter    ap_ST_fsm_state51 = 168'd1125899906842624;
parameter    ap_ST_fsm_state52 = 168'd2251799813685248;
parameter    ap_ST_fsm_state53 = 168'd4503599627370496;
parameter    ap_ST_fsm_state54 = 168'd9007199254740992;
parameter    ap_ST_fsm_state55 = 168'd18014398509481984;
parameter    ap_ST_fsm_state56 = 168'd36028797018963968;
parameter    ap_ST_fsm_state57 = 168'd72057594037927936;
parameter    ap_ST_fsm_state58 = 168'd144115188075855872;
parameter    ap_ST_fsm_state59 = 168'd288230376151711744;
parameter    ap_ST_fsm_state60 = 168'd576460752303423488;
parameter    ap_ST_fsm_state61 = 168'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 168'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 168'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 168'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 168'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 168'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 168'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 168'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 168'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 168'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 168'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 168'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 168'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 168'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 168'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 168'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 168'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 168'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 168'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 168'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 168'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 168'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 168'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 168'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 168'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 168'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 168'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 168'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 168'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 168'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 168'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 168'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 168'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 168'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 168'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 168'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 168'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 168'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 168'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 168'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 168'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 168'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 168'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 168'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 168'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 168'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 168'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 168'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 168'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 168'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 168'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 168'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 168'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 168'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 168'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 168'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 168'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 168'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 168'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 168'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 168'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 168'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 168'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 168'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 168'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 168'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 168'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 168'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 168'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 168'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 168'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 168'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 168'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 168'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 168'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 168'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 168'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 168'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 168'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 168'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 168'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 168'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 168'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 168'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 168'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 168'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 168'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 168'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 168'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 168'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 168'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 168'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 168'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 168'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 168'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 168'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 168'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 168'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 168'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 168'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 168'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 168'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 168'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 168'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 168'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 168'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 168'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 168'd187072209578355573530071658587684226515959365500928;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] J_address0;
output   J_ce0;
input  [31:0] J_q0;
output  [3:0] J_address1;
output   J_ce1;
input  [31:0] J_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [3:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
output  [3:0] x_address1;
output   x_ce1;
output   x_we1;
output  [31:0] x_d1;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] J_address0;
reg J_ce0;
reg[3:0] J_address1;
reg J_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg[1:0] b_address1;
reg b_ce1;
reg[3:0] x_address0;
reg x_ce0;
reg x_we0;
reg[31:0] x_d0;
reg[3:0] x_address1;
reg x_ce1;
reg x_we1;
reg[31:0] x_d1;

(* fsm_encoding = "none" *) reg   [167:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire   [63:0] grp_fu_706_p1;
reg   [63:0] reg_747;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state132;
wire   [63:0] grp_fu_709_p1;
reg   [63:0] reg_754;
wire   [63:0] grp_fu_713_p1;
reg   [63:0] reg_761;
wire    ap_CS_fsm_state21;
wire   [63:0] grp_fu_716_p1;
reg   [63:0] reg_768;
wire   [63:0] grp_fu_680_p2;
reg   [63:0] reg_774;
wire    ap_CS_fsm_state137;
wire   [63:0] grp_fu_696_p2;
reg   [63:0] reg_781;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state63;
wire  signed [31:0] grp_fu_727_p2;
reg  signed [31:0] reg_785;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state110;
wire  signed [31:0] grp_fu_733_p2;
reg  signed [31:0] reg_789;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state105;
wire   [31:0] grp_fu_793_p2;
reg   [31:0] reg_805;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state111;
wire   [31:0] grp_fu_799_p2;
reg   [31:0] reg_810;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state106;
wire   [4:0] i_1_fu_821_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg  signed [31:0] J_load_reg_1513;
wire    ap_CS_fsm_state4;
wire   [31:0] x_prev_q0;
reg  signed [31:0] x_prev_load_reg_1519;
reg  signed [31:0] J_load_1_reg_1525;
wire   [31:0] x_prev_q1;
reg  signed [31:0] x_prev_load_1_reg_1531;
wire   [31:0] tmp_2_fu_833_p2;
reg   [31:0] tmp_2_reg_1537;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_15_0_1_1_fu_837_p2;
reg   [31:0] tmp_15_0_1_1_reg_1547;
wire    ap_CS_fsm_state8;
reg  signed [31:0] J_load_2_reg_1567;
wire    ap_CS_fsm_state9;
reg  signed [31:0] x_prev_load_2_reg_1573;
wire   [31:0] tmp_15_0_2_2_fu_841_p2;
reg   [31:0] tmp_15_0_2_2_reg_1579;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
reg  signed [31:0] J_load_3_reg_1594;
wire    ap_CS_fsm_state14;
reg  signed [31:0] x_prev_load_3_reg_1600;
wire   [31:0] tmp_15_0_3_3_fu_845_p2;
reg   [31:0] tmp_15_0_3_3_reg_1606;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_684_p2;
reg   [63:0] tmp_8_0_1_reg_1616;
reg   [63:0] tmp_6_0_2_reg_1621;
reg   [63:0] tmp_8_0_2_reg_1626;
reg   [63:0] tmp_16_0_3_3_reg_1631;
wire   [63:0] grp_fu_688_p2;
reg   [63:0] tmp_s_reg_1636;
wire    ap_CS_fsm_state22;
wire   [63:0] grp_fu_692_p2;
reg   [63:0] tmp_10_0_1_reg_1641;
reg   [63:0] tmp_10_0_2_reg_1646;
wire    ap_CS_fsm_state27;
reg   [63:0] tmp_10_0_3_reg_1651;
wire    ap_CS_fsm_state32;
wire   [63:0] grp_fu_701_p2;
reg   [63:0] x_assign_1_reg_1656;
reg   [0:0] p_Result_s_reg_1661;
wire    ap_CS_fsm_state54;
wire   [31:0] p_Val2_20_fu_971_p3;
reg   [31:0] p_Val2_20_reg_1666;
reg   [0:0] p_Result_1_reg_1672;
wire   [31:0] p_Val2_22_fu_1100_p3;
reg   [31:0] p_Val2_22_reg_1677;
wire   [31:0] p_Val2_21_fu_1113_p3;
reg   [31:0] p_Val2_21_reg_1683;
wire    ap_CS_fsm_state55;
wire   [31:0] p_Val2_23_fu_1124_p3;
reg   [31:0] p_Val2_23_reg_1689;
wire  signed [31:0] tmp_3_fu_1130_p2;
reg  signed [31:0] tmp_3_reg_1695;
wire  signed [31:0] tmp_3_1_fu_1135_p2;
reg  signed [31:0] tmp_3_1_reg_1701;
wire   [31:0] tmp_4_fu_1140_p2;
reg   [31:0] tmp_4_reg_1707;
wire    ap_CS_fsm_state56;
wire   [31:0] tmp_4_1_fu_1144_p2;
reg   [31:0] tmp_4_1_reg_1712;
reg   [0:0] p_Result_2_reg_1717;
wire    ap_CS_fsm_state59;
wire   [31:0] p_Val2_24_fu_1270_p3;
reg   [31:0] p_Val2_24_reg_1722;
wire   [31:0] p_Val2_25_fu_1283_p3;
reg   [31:0] p_Val2_25_reg_1728;
wire    ap_CS_fsm_state60;
wire  signed [31:0] tmp_3_2_fu_1289_p2;
reg  signed [31:0] tmp_3_2_reg_1734;
wire   [31:0] tmp_4_2_fu_1294_p2;
reg   [31:0] tmp_4_2_reg_1740;
wire    ap_CS_fsm_state61;
reg   [0:0] p_Result_3_reg_1745;
wire    ap_CS_fsm_state64;
wire   [31:0] p_Val2_26_fu_1420_p3;
reg   [31:0] p_Val2_26_reg_1750;
wire   [31:0] p_Val2_27_fu_1433_p3;
reg   [31:0] p_Val2_27_reg_1756;
wire    ap_CS_fsm_state65;
wire  signed [31:0] tmp_3_3_fu_1439_p2;
reg  signed [31:0] tmp_3_3_reg_1762;
wire   [31:0] tmp_4_3_fu_1444_p2;
reg   [31:0] tmp_4_3_reg_1768;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state109;
wire   [31:0] x_new_q0;
reg   [31:0] x_new_load_10_reg_1873;
wire   [31:0] x_new_q1;
reg   [31:0] x_new_load_11_reg_1878;
reg   [31:0] x_new_load_12_reg_1898;
wire  signed [31:0] tmp_3_13_fu_1448_p2;
reg  signed [31:0] tmp_3_13_reg_1903;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
wire  signed [31:0] tmp_3_12_fu_1453_p2;
reg  signed [31:0] tmp_3_12_reg_1914;
wire    ap_CS_fsm_state115;
wire   [31:0] tmp_4_12_fu_1458_p2;
reg   [31:0] tmp_4_12_reg_1920;
wire    ap_CS_fsm_state116;
wire   [31:0] tmp_4_13_fu_1462_p2;
reg   [31:0] tmp_4_13_reg_1925;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state124;
wire  signed [31:0] tmp_3_14_fu_1466_p2;
reg  signed [31:0] tmp_3_14_reg_1935;
wire    ap_CS_fsm_state125;
wire   [31:0] tmp_4_14_fu_1471_p2;
reg   [31:0] tmp_4_14_reg_1941;
wire    ap_CS_fsm_state126;
reg   [3:0] x_prev_address0;
reg    x_prev_ce0;
reg    x_prev_we0;
reg   [3:0] x_prev_address1;
reg    x_prev_ce1;
reg    x_prev_we1;
reg   [3:0] x_new_address0;
reg    x_new_ce0;
reg    x_new_we0;
reg   [31:0] x_new_d0;
reg   [3:0] x_new_address1;
reg    x_new_ce1;
reg    x_new_we1;
reg   [31:0] x_new_d1;
reg   [4:0] i_reg_669;
wire   [0:0] exitcond4_fu_815_p2;
wire   [63:0] tmp_fu_827_p1;
reg   [63:0] grp_fu_680_p0;
reg   [63:0] grp_fu_680_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state133;
reg   [63:0] grp_fu_688_p0;
reg   [63:0] grp_fu_688_p1;
reg   [63:0] grp_fu_696_p1;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_706_p0;
wire    ap_CS_fsm_state57;
reg   [31:0] grp_fu_709_p0;
reg   [31:0] grp_fu_713_p0;
reg   [31:0] grp_fu_716_p0;
wire    ap_CS_fsm_state138;
wire   [63:0] p_Val2_s_fu_849_p1;
wire   [51:0] tmp_V_1_fu_871_p1;
wire   [53:0] mantissa_V_fu_875_p4;
wire   [10:0] tmp_V_fu_861_p4;
wire   [11:0] tmp_i_i_i_i_cast4_fu_889_p1;
wire   [11:0] sh_assign_fu_893_p2;
wire   [10:0] tmp_i_i_i_fu_907_p2;
wire   [0:0] isNeg_fu_899_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_913_p1;
wire   [11:0] ush_fu_917_p3;
wire  signed [31:0] sh_assign_2_cast_fu_925_p1;
wire   [53:0] tmp_i_i_i_cast_8_fu_933_p1;
wire   [136:0] mantissa_V_1_cast_fu_885_p1;
wire   [136:0] tmp_i_i_i_7_fu_929_p1;
wire   [53:0] r_V_fu_937_p2;
wire   [0:0] tmp_17_fu_949_p3;
wire   [136:0] r_V_1_fu_943_p2;
wire   [31:0] tmp_10_fu_957_p1;
wire   [31:0] tmp_11_fu_961_p4;
wire   [63:0] p_Val2_5_fu_979_p1;
wire   [51:0] tmp_V_3_fu_1000_p1;
wire   [53:0] mantissa_V_1_fu_1004_p4;
wire   [10:0] tmp_V_2_fu_990_p4;
wire   [11:0] tmp_i_i_i_i1_cast3_fu_1018_p1;
wire   [11:0] sh_assign_3_fu_1022_p2;
wire   [10:0] tmp_i_i_i1_fu_1036_p2;
wire   [0:0] isNeg_1_fu_1028_p3;
wire  signed [11:0] tmp_i_i_i1_cast_fu_1042_p1;
wire   [11:0] ush_1_fu_1046_p3;
wire  signed [31:0] sh_assign_5_cast_fu_1054_p1;
wire   [53:0] tmp_i_i_i1_cast_10_fu_1062_p1;
wire   [136:0] mantissa_V_3_cast_fu_1014_p1;
wire   [136:0] tmp_i_i_i1_9_fu_1058_p1;
wire   [53:0] r_V_2_fu_1066_p2;
wire   [0:0] tmp_25_fu_1078_p3;
wire   [136:0] r_V_3_fu_1072_p2;
wire   [31:0] tmp_12_fu_1086_p1;
wire   [31:0] tmp_13_fu_1090_p4;
wire   [31:0] result_V_1_fu_1108_p2;
wire   [31:0] result_V_3_fu_1119_p2;
wire   [63:0] p_Val2_10_fu_1148_p1;
wire   [51:0] tmp_V_5_fu_1170_p1;
wire   [53:0] mantissa_V_2_fu_1174_p4;
wire   [10:0] tmp_V_4_fu_1160_p4;
wire   [11:0] tmp_i_i_i_i2_cast2_fu_1188_p1;
wire   [11:0] sh_assign_6_fu_1192_p2;
wire   [10:0] tmp_i_i_i2_fu_1206_p2;
wire   [0:0] isNeg_2_fu_1198_p3;
wire  signed [11:0] tmp_i_i_i2_cast_fu_1212_p1;
wire   [11:0] ush_2_fu_1216_p3;
wire  signed [31:0] sh_assign_8_cast_fu_1224_p1;
wire   [53:0] tmp_i_i_i2_cast_12_fu_1232_p1;
wire   [136:0] mantissa_V_5_cast_fu_1184_p1;
wire   [136:0] tmp_i_i_i2_11_fu_1228_p1;
wire   [53:0] r_V_4_fu_1236_p2;
wire   [0:0] tmp_29_fu_1248_p3;
wire   [136:0] r_V_5_fu_1242_p2;
wire   [31:0] tmp_14_fu_1256_p1;
wire   [31:0] tmp_15_fu_1260_p4;
wire   [31:0] result_V_5_fu_1278_p2;
wire   [63:0] p_Val2_15_fu_1298_p1;
wire   [51:0] tmp_V_7_fu_1320_p1;
wire   [53:0] mantissa_V_3_fu_1324_p4;
wire   [10:0] tmp_V_6_fu_1310_p4;
wire   [11:0] tmp_i_i_i_i3_cast1_fu_1338_p1;
wire   [11:0] sh_assign_9_fu_1342_p2;
wire   [10:0] tmp_i_i_i3_fu_1356_p2;
wire   [0:0] isNeg_3_fu_1348_p3;
wire  signed [11:0] tmp_i_i_i3_cast_fu_1362_p1;
wire   [11:0] ush_3_fu_1366_p3;
wire  signed [31:0] sh_assign_11_cast_fu_1374_p1;
wire   [53:0] tmp_i_i_i3_cast_14_fu_1382_p1;
wire   [136:0] mantissa_V_7_cast_fu_1334_p1;
wire   [136:0] tmp_i_i_i3_13_fu_1378_p1;
wire   [53:0] r_V_6_fu_1386_p2;
wire   [0:0] tmp_33_fu_1398_p3;
wire   [136:0] r_V_7_fu_1392_p2;
wire   [31:0] tmp_16_fu_1406_p1;
wire   [31:0] tmp_18_fu_1410_p4;
wire   [31:0] result_V_7_fu_1428_p2;
reg   [1:0] grp_fu_680_opcode;
wire   [63:0] grp_fu_722_p2;
wire    ap_CS_fsm_state168;
reg   [167:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 168'd1;
end

jacobi_HLS_x_prev #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_prev_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_prev_address0),
    .ce0(x_prev_ce0),
    .we0(x_prev_we0),
    .d0(32'd0),
    .q0(x_prev_q0),
    .address1(x_prev_address1),
    .ce1(x_prev_ce1),
    .we1(x_prev_we1),
    .d1(x_new_q1),
    .q1(x_prev_q1)
);

jacobi_HLS_x_prev #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_new_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_new_address0),
    .ce0(x_new_ce0),
    .we0(x_new_we0),
    .d0(x_new_d0),
    .q0(x_new_q0),
    .address1(x_new_address1),
    .ce1(x_new_ce1),
    .we1(x_new_we1),
    .d1(x_new_d1),
    .q1(x_new_q1)
);

jacobi_HLS_dadddsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dadddsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_680_p0),
    .din1(grp_fu_680_p1),
    .opcode(grp_fu_680_opcode),
    .ce(1'b1),
    .dout(grp_fu_680_p2)
);

jacobi_HLS_dsub_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dsub_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_768),
    .din1(reg_761),
    .ce(1'b1),
    .dout(grp_fu_684_p2)
);

jacobi_HLS_dmul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_688_p0),
    .din1(grp_fu_688_p1),
    .ce(1'b1),
    .dout(grp_fu_688_p2)
);

jacobi_HLS_dmul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dmul_6dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_754),
    .din1(tmp_8_0_1_reg_1616),
    .ce(1'b1),
    .dout(grp_fu_692_p2)
);

jacobi_HLS_ddiv_6eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(grp_fu_696_p1),
    .ce(1'b1),
    .dout(grp_fu_696_p2)
);

jacobi_HLS_ddiv_6eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_ddiv_6eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_10_0_1_reg_1641),
    .ce(1'b1),
    .dout(grp_fu_701_p2)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_706_p0),
    .ce(1'b1),
    .dout(grp_fu_706_p1)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_709_p0),
    .ce(1'b1),
    .dout(grp_fu_709_p1)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_713_p0),
    .ce(1'b1),
    .dout(grp_fu_713_p1)
);

jacobi_HLS_sitodpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_sitodpfYi_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_716_p0),
    .ce(1'b1),
    .dout(grp_fu_716_p1)
);

jacobi_HLS_dsqrt_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_HLS_dsqrt_g8j_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_774),
    .ce(1'b1),
    .dout(grp_fu_722_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_815_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_669 <= i_1_fu_821_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_669 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        J_load_1_reg_1525 <= J_q1;
        J_load_reg_1513 <= J_q0;
        x_prev_load_1_reg_1531 <= x_prev_q1;
        x_prev_load_reg_1519 <= x_prev_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        J_load_2_reg_1567 <= J_q0;
        x_prev_load_2_reg_1573 <= x_prev_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        J_load_3_reg_1594 <= J_q1;
        x_prev_load_3_reg_1600 <= x_prev_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_Result_1_reg_1672 <= p_Val2_5_fu_979_p1[32'd63];
        p_Result_s_reg_1661 <= p_Val2_s_fu_849_p1[32'd63];
        p_Val2_20_reg_1666 <= p_Val2_20_fu_971_p3;
        p_Val2_22_reg_1677 <= p_Val2_22_fu_1100_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        p_Result_2_reg_1717 <= p_Val2_10_fu_1148_p1[32'd63];
        p_Val2_24_reg_1722 <= p_Val2_24_fu_1270_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        p_Result_3_reg_1745 <= p_Val2_15_fu_1298_p1[32'd63];
        p_Val2_26_reg_1750 <= p_Val2_26_fu_1420_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        p_Val2_21_reg_1683 <= p_Val2_21_fu_1113_p3;
        p_Val2_23_reg_1689 <= p_Val2_23_fu_1124_p3;
        tmp_3_1_reg_1701 <= tmp_3_1_fu_1135_p2;
        tmp_3_reg_1695 <= tmp_3_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        p_Val2_25_reg_1728 <= p_Val2_25_fu_1283_p3;
        tmp_3_2_reg_1734 <= tmp_3_2_fu_1289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        p_Val2_27_reg_1756 <= p_Val2_27_fu_1433_p3;
        tmp_3_3_reg_1762 <= tmp_3_3_fu_1439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_747 <= grp_fu_706_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_754 <= grp_fu_709_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_761 <= grp_fu_713_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_768 <= grp_fu_716_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_774 <= grp_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_781 <= grp_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state70))) begin
        reg_785 <= grp_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state75))) begin
        reg_789 <= grp_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state71))) begin
        reg_805 <= grp_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state76))) begin
        reg_810 <= grp_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_10_0_1_reg_1641 <= grp_fu_692_p2;
        tmp_s_reg_1636 <= grp_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_10_0_2_reg_1646 <= grp_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_10_0_3_reg_1651 <= grp_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_15_0_1_1_reg_1547 <= tmp_15_0_1_1_fu_837_p2;
        tmp_2_reg_1537 <= tmp_2_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_15_0_2_2_reg_1579 <= tmp_15_0_2_2_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_15_0_3_3_reg_1606 <= tmp_15_0_3_3_fu_845_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_16_0_3_3_reg_1631 <= grp_fu_709_p1;
        tmp_6_0_2_reg_1621 <= grp_fu_706_p1;
        tmp_8_0_2_reg_1626 <= grp_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        tmp_3_12_reg_1914 <= tmp_3_12_fu_1453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        tmp_3_13_reg_1903 <= tmp_3_13_fu_1448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        tmp_3_14_reg_1935 <= tmp_3_14_fu_1466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        tmp_4_12_reg_1920 <= tmp_4_12_fu_1458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        tmp_4_13_reg_1925 <= tmp_4_13_fu_1462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        tmp_4_14_reg_1941 <= tmp_4_14_fu_1471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_4_1_reg_1712 <= tmp_4_1_fu_1144_p2;
        tmp_4_reg_1707 <= tmp_4_fu_1140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        tmp_4_2_reg_1740 <= tmp_4_2_fu_1294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        tmp_4_3_reg_1768 <= tmp_4_3_fu_1444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_8_0_1_reg_1616 <= grp_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        x_assign_1_reg_1656 <= grp_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        x_new_load_10_reg_1873 <= x_new_q0;
        x_new_load_11_reg_1878 <= x_new_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        x_new_load_12_reg_1898 <= x_new_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        J_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        J_address0 = 64'd18446744073709551612;
    end else begin
        J_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        J_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        J_address1 = 64'd1;
    end else begin
        J_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        J_ce0 = 1'b1;
    end else begin
        J_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state3))) begin
        J_ce1 = 1'b1;
    end else begin
        J_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = 64'd0;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        b_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address1 = 64'd1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_680_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state68))) begin
        grp_fu_680_opcode = 2'd0;
    end else begin
        grp_fu_680_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state68))) begin
        grp_fu_680_p0 = reg_774;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_680_p0 = reg_747;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_680_p0 = reg_761;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_680_p0 = reg_768;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_680_p0 = reg_754;
    end else begin
        grp_fu_680_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_680_p1 = reg_754;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_680_p1 = tmp_16_0_3_3_reg_1631;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_680_p1 = reg_761;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state68))) begin
        grp_fu_680_p1 = reg_747;
    end else begin
        grp_fu_680_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_688_p0 = tmp_6_0_2_reg_1621;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_fu_688_p0 = reg_747;
    end else begin
        grp_fu_688_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_688_p1 = tmp_8_0_2_reg_1626;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_fu_688_p1 = reg_774;
    end else begin
        grp_fu_688_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_696_p1 = tmp_10_0_3_reg_1651;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_696_p1 = tmp_10_0_2_reg_1646;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_696_p1 = tmp_s_reg_1636;
    end else begin
        grp_fu_696_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        grp_fu_706_p0 = tmp_4_14_reg_1941;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        grp_fu_706_p0 = tmp_4_13_reg_1925;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        grp_fu_706_p0 = tmp_4_12_reg_1920;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state77))) begin
        grp_fu_706_p0 = reg_810;
    end else if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state72))) begin
        grp_fu_706_p0 = reg_805;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_706_p0 = tmp_4_3_reg_1768;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_706_p0 = tmp_4_2_reg_1740;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_706_p0 = tmp_4_reg_1707;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_706_p0 = J_load_3_reg_1594;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_706_p0 = J_load_2_reg_1567;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_706_p0 = J_load_reg_1513;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_706_p0 = tmp_2_reg_1537;
    end else begin
        grp_fu_706_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_709_p0 = tmp_4_1_reg_1712;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_709_p0 = tmp_15_0_3_3_reg_1606;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_709_p0 = J_load_1_reg_1525;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_709_p0 = b_q0;
    end else begin
        grp_fu_709_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_713_p0 = b_q1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_713_p0 = tmp_15_0_2_2_reg_1579;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_713_p0 = tmp_15_0_1_1_reg_1547;
    end else begin
        grp_fu_713_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_716_p0 = b_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_716_p0 = b_q1;
    end else begin
        grp_fu_716_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        x_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        x_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        x_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        x_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        x_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        x_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        x_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        x_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        x_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        x_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        x_address0 = 64'd4;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        x_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        x_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        x_address1 = 64'd14;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state112))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state112))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        x_d0 = p_Val2_25_reg_1728;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_d0 = x_new_q1;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state70))) begin
        x_d0 = x_new_q0;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        x_d1 = p_Val2_27_reg_1756;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        x_d1 = p_Val2_23_reg_1689;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_d1 = p_Val2_21_reg_1683;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        x_d1 = x_new_q1;
    end else begin
        x_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        x_new_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_new_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        x_new_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        x_new_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        x_new_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        x_new_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        x_new_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        x_new_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        x_new_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        x_new_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        x_new_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        x_new_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_new_address0 = tmp_fu_827_p1;
    end else begin
        x_new_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        x_new_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        x_new_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_new_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        x_new_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        x_new_address1 = 64'd14;
    end else begin
        x_new_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state112))) begin
        x_new_ce0 = 1'b1;
    end else begin
        x_new_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state112))) begin
        x_new_ce1 = 1'b1;
    end else begin
        x_new_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        x_new_d0 = p_Val2_25_reg_1728;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_new_d0 = p_Val2_21_reg_1683;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_new_d0 = 32'd1;
    end else begin
        x_new_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        x_new_d1 = p_Val2_27_reg_1756;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        x_new_d1 = p_Val2_23_reg_1689;
    end else begin
        x_new_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | ((exitcond4_fu_815_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        x_new_we0 = 1'b1;
    end else begin
        x_new_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113))) begin
        x_new_we1 = 1'b1;
    end else begin
        x_new_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        x_prev_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        x_prev_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        x_prev_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        x_prev_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        x_prev_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        x_prev_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x_prev_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_prev_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_prev_address0 = tmp_fu_827_p1;
    end else begin
        x_prev_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state124)) begin
        x_prev_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        x_prev_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        x_prev_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        x_prev_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        x_prev_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        x_prev_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        x_prev_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_prev_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_prev_address1 = 64'd1;
    end else begin
        x_prev_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state112))) begin
        x_prev_ce0 = 1'b1;
    end else begin
        x_prev_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        x_prev_ce1 = 1'b1;
    end else begin
        x_prev_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_815_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_prev_we0 = 1'b1;
    end else begin
        x_prev_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        x_prev_we1 = 1'b1;
    end else begin
        x_prev_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state112))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state112))) begin
        x_we1 = 1'b1;
    end else begin
        x_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_815_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_return = grp_fu_722_p2;

assign exitcond4_fu_815_p2 = ((i_reg_669 == 5'd16) ? 1'b1 : 1'b0);

assign grp_fu_727_p2 = (x_new_q0 - x_prev_q1);

assign grp_fu_733_p2 = (x_new_q0 - x_prev_q0);

assign grp_fu_793_p2 = ($signed(reg_785) * $signed(reg_785));

assign grp_fu_799_p2 = ($signed(reg_789) * $signed(reg_789));

assign i_1_fu_821_p2 = (i_reg_669 + 5'd1);

assign isNeg_1_fu_1028_p3 = sh_assign_3_fu_1022_p2[32'd11];

assign isNeg_2_fu_1198_p3 = sh_assign_6_fu_1192_p2[32'd11];

assign isNeg_3_fu_1348_p3 = sh_assign_9_fu_1342_p2[32'd11];

assign isNeg_fu_899_p3 = sh_assign_fu_893_p2[32'd11];

assign mantissa_V_1_cast_fu_885_p1 = mantissa_V_fu_875_p4;

assign mantissa_V_1_fu_1004_p4 = {{{{1'd1}, {tmp_V_3_fu_1000_p1}}}, {1'd0}};

assign mantissa_V_2_fu_1174_p4 = {{{{1'd1}, {tmp_V_5_fu_1170_p1}}}, {1'd0}};

assign mantissa_V_3_cast_fu_1014_p1 = mantissa_V_1_fu_1004_p4;

assign mantissa_V_3_fu_1324_p4 = {{{{1'd1}, {tmp_V_7_fu_1320_p1}}}, {1'd0}};

assign mantissa_V_5_cast_fu_1184_p1 = mantissa_V_2_fu_1174_p4;

assign mantissa_V_7_cast_fu_1334_p1 = mantissa_V_3_fu_1324_p4;

assign mantissa_V_fu_875_p4 = {{{{1'd1}, {tmp_V_1_fu_871_p1}}}, {1'd0}};

assign p_Val2_10_fu_1148_p1 = reg_781;

assign p_Val2_15_fu_1298_p1 = reg_781;

assign p_Val2_20_fu_971_p3 = ((isNeg_fu_899_p3[0:0] === 1'b1) ? tmp_10_fu_957_p1 : tmp_11_fu_961_p4);

assign p_Val2_21_fu_1113_p3 = ((p_Result_s_reg_1661[0:0] === 1'b1) ? result_V_1_fu_1108_p2 : p_Val2_20_reg_1666);

assign p_Val2_22_fu_1100_p3 = ((isNeg_1_fu_1028_p3[0:0] === 1'b1) ? tmp_12_fu_1086_p1 : tmp_13_fu_1090_p4);

assign p_Val2_23_fu_1124_p3 = ((p_Result_1_reg_1672[0:0] === 1'b1) ? result_V_3_fu_1119_p2 : p_Val2_22_reg_1677);

assign p_Val2_24_fu_1270_p3 = ((isNeg_2_fu_1198_p3[0:0] === 1'b1) ? tmp_14_fu_1256_p1 : tmp_15_fu_1260_p4);

assign p_Val2_25_fu_1283_p3 = ((p_Result_2_reg_1717[0:0] === 1'b1) ? result_V_5_fu_1278_p2 : p_Val2_24_reg_1722);

assign p_Val2_26_fu_1420_p3 = ((isNeg_3_fu_1348_p3[0:0] === 1'b1) ? tmp_16_fu_1406_p1 : tmp_18_fu_1410_p4);

assign p_Val2_27_fu_1433_p3 = ((p_Result_3_reg_1745[0:0] === 1'b1) ? result_V_7_fu_1428_p2 : p_Val2_26_reg_1750);

assign p_Val2_5_fu_979_p1 = x_assign_1_reg_1656;

assign p_Val2_s_fu_849_p1 = reg_781;

assign r_V_1_fu_943_p2 = mantissa_V_1_cast_fu_885_p1 << tmp_i_i_i_7_fu_929_p1;

assign r_V_2_fu_1066_p2 = mantissa_V_1_fu_1004_p4 >> tmp_i_i_i1_cast_10_fu_1062_p1;

assign r_V_3_fu_1072_p2 = mantissa_V_3_cast_fu_1014_p1 << tmp_i_i_i1_9_fu_1058_p1;

assign r_V_4_fu_1236_p2 = mantissa_V_2_fu_1174_p4 >> tmp_i_i_i2_cast_12_fu_1232_p1;

assign r_V_5_fu_1242_p2 = mantissa_V_5_cast_fu_1184_p1 << tmp_i_i_i2_11_fu_1228_p1;

assign r_V_6_fu_1386_p2 = mantissa_V_3_fu_1324_p4 >> tmp_i_i_i3_cast_14_fu_1382_p1;

assign r_V_7_fu_1392_p2 = mantissa_V_7_cast_fu_1334_p1 << tmp_i_i_i3_13_fu_1378_p1;

assign r_V_fu_937_p2 = mantissa_V_fu_875_p4 >> tmp_i_i_i_cast_8_fu_933_p1;

assign result_V_1_fu_1108_p2 = (32'd0 - p_Val2_20_reg_1666);

assign result_V_3_fu_1119_p2 = (32'd0 - p_Val2_22_reg_1677);

assign result_V_5_fu_1278_p2 = (32'd0 - p_Val2_24_reg_1722);

assign result_V_7_fu_1428_p2 = (32'd0 - p_Val2_26_reg_1750);

assign sh_assign_11_cast_fu_1374_p1 = $signed(ush_3_fu_1366_p3);

assign sh_assign_2_cast_fu_925_p1 = $signed(ush_fu_917_p3);

assign sh_assign_3_fu_1022_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i1_cast3_fu_1018_p1));

assign sh_assign_5_cast_fu_1054_p1 = $signed(ush_1_fu_1046_p3);

assign sh_assign_6_fu_1192_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i2_cast2_fu_1188_p1));

assign sh_assign_8_cast_fu_1224_p1 = $signed(ush_2_fu_1216_p3);

assign sh_assign_9_fu_1342_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i3_cast1_fu_1338_p1));

assign sh_assign_fu_893_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast4_fu_889_p1));

assign tmp_10_fu_957_p1 = tmp_17_fu_949_p3;

assign tmp_11_fu_961_p4 = {{r_V_1_fu_943_p2[84:53]}};

assign tmp_12_fu_1086_p1 = tmp_25_fu_1078_p3;

assign tmp_13_fu_1090_p4 = {{r_V_3_fu_1072_p2[84:53]}};

assign tmp_14_fu_1256_p1 = tmp_29_fu_1248_p3;

assign tmp_15_0_1_1_fu_837_p2 = ($signed(J_load_1_reg_1525) * $signed(x_prev_load_1_reg_1531));

assign tmp_15_0_2_2_fu_841_p2 = ($signed(J_load_2_reg_1567) * $signed(x_prev_load_2_reg_1573));

assign tmp_15_0_3_3_fu_845_p2 = ($signed(J_load_3_reg_1594) * $signed(x_prev_load_3_reg_1600));

assign tmp_15_fu_1260_p4 = {{r_V_5_fu_1242_p2[84:53]}};

assign tmp_16_fu_1406_p1 = tmp_33_fu_1398_p3;

assign tmp_17_fu_949_p3 = r_V_fu_937_p2[32'd53];

assign tmp_18_fu_1410_p4 = {{r_V_7_fu_1392_p2[84:53]}};

assign tmp_25_fu_1078_p3 = r_V_2_fu_1066_p2[32'd53];

assign tmp_29_fu_1248_p3 = r_V_4_fu_1236_p2[32'd53];

assign tmp_2_fu_833_p2 = ($signed(J_load_reg_1513) * $signed(x_prev_load_reg_1519));

assign tmp_33_fu_1398_p3 = r_V_6_fu_1386_p2[32'd53];

assign tmp_3_12_fu_1453_p2 = (x_new_load_10_reg_1873 - x_prev_q0);

assign tmp_3_13_fu_1448_p2 = (x_new_load_11_reg_1878 - x_prev_q0);

assign tmp_3_14_fu_1466_p2 = (x_new_load_12_reg_1898 - x_prev_q1);

assign tmp_3_1_fu_1135_p2 = ($signed(p_Val2_23_fu_1124_p3) - $signed(x_prev_load_1_reg_1531));

assign tmp_3_2_fu_1289_p2 = ($signed(p_Val2_25_fu_1283_p3) - $signed(x_prev_load_2_reg_1573));

assign tmp_3_3_fu_1439_p2 = ($signed(p_Val2_27_fu_1433_p3) - $signed(x_prev_load_3_reg_1600));

assign tmp_3_fu_1130_p2 = ($signed(p_Val2_21_fu_1113_p3) - $signed(x_prev_load_reg_1519));

assign tmp_4_12_fu_1458_p2 = ($signed(tmp_3_12_reg_1914) * $signed(tmp_3_12_reg_1914));

assign tmp_4_13_fu_1462_p2 = ($signed(tmp_3_13_reg_1903) * $signed(tmp_3_13_reg_1903));

assign tmp_4_14_fu_1471_p2 = ($signed(tmp_3_14_reg_1935) * $signed(tmp_3_14_reg_1935));

assign tmp_4_1_fu_1144_p2 = ($signed(tmp_3_1_reg_1701) * $signed(tmp_3_1_reg_1701));

assign tmp_4_2_fu_1294_p2 = ($signed(tmp_3_2_reg_1734) * $signed(tmp_3_2_reg_1734));

assign tmp_4_3_fu_1444_p2 = ($signed(tmp_3_3_reg_1762) * $signed(tmp_3_3_reg_1762));

assign tmp_4_fu_1140_p2 = ($signed(tmp_3_reg_1695) * $signed(tmp_3_reg_1695));

assign tmp_V_1_fu_871_p1 = p_Val2_s_fu_849_p1[51:0];

assign tmp_V_2_fu_990_p4 = {{p_Val2_5_fu_979_p1[62:52]}};

assign tmp_V_3_fu_1000_p1 = p_Val2_5_fu_979_p1[51:0];

assign tmp_V_4_fu_1160_p4 = {{p_Val2_10_fu_1148_p1[62:52]}};

assign tmp_V_5_fu_1170_p1 = p_Val2_10_fu_1148_p1[51:0];

assign tmp_V_6_fu_1310_p4 = {{p_Val2_15_fu_1298_p1[62:52]}};

assign tmp_V_7_fu_1320_p1 = p_Val2_15_fu_1298_p1[51:0];

assign tmp_V_fu_861_p4 = {{p_Val2_s_fu_849_p1[62:52]}};

assign tmp_fu_827_p1 = i_reg_669;

assign tmp_i_i_i1_9_fu_1058_p1 = $unsigned(sh_assign_5_cast_fu_1054_p1);

assign tmp_i_i_i1_cast_10_fu_1062_p1 = $unsigned(sh_assign_5_cast_fu_1054_p1);

assign tmp_i_i_i1_cast_fu_1042_p1 = $signed(tmp_i_i_i1_fu_1036_p2);

assign tmp_i_i_i1_fu_1036_p2 = (11'd1023 - tmp_V_2_fu_990_p4);

assign tmp_i_i_i2_11_fu_1228_p1 = $unsigned(sh_assign_8_cast_fu_1224_p1);

assign tmp_i_i_i2_cast_12_fu_1232_p1 = $unsigned(sh_assign_8_cast_fu_1224_p1);

assign tmp_i_i_i2_cast_fu_1212_p1 = $signed(tmp_i_i_i2_fu_1206_p2);

assign tmp_i_i_i2_fu_1206_p2 = (11'd1023 - tmp_V_4_fu_1160_p4);

assign tmp_i_i_i3_13_fu_1378_p1 = $unsigned(sh_assign_11_cast_fu_1374_p1);

assign tmp_i_i_i3_cast_14_fu_1382_p1 = $unsigned(sh_assign_11_cast_fu_1374_p1);

assign tmp_i_i_i3_cast_fu_1362_p1 = $signed(tmp_i_i_i3_fu_1356_p2);

assign tmp_i_i_i3_fu_1356_p2 = (11'd1023 - tmp_V_6_fu_1310_p4);

assign tmp_i_i_i_7_fu_929_p1 = $unsigned(sh_assign_2_cast_fu_925_p1);

assign tmp_i_i_i_cast_8_fu_933_p1 = $unsigned(sh_assign_2_cast_fu_925_p1);

assign tmp_i_i_i_cast_fu_913_p1 = $signed(tmp_i_i_i_fu_907_p2);

assign tmp_i_i_i_fu_907_p2 = (11'd1023 - tmp_V_fu_861_p4);

assign tmp_i_i_i_i1_cast3_fu_1018_p1 = tmp_V_2_fu_990_p4;

assign tmp_i_i_i_i2_cast2_fu_1188_p1 = tmp_V_4_fu_1160_p4;

assign tmp_i_i_i_i3_cast1_fu_1338_p1 = tmp_V_6_fu_1310_p4;

assign tmp_i_i_i_i_cast4_fu_889_p1 = tmp_V_fu_861_p4;

assign ush_1_fu_1046_p3 = ((isNeg_1_fu_1028_p3[0:0] === 1'b1) ? tmp_i_i_i1_cast_fu_1042_p1 : sh_assign_3_fu_1022_p2);

assign ush_2_fu_1216_p3 = ((isNeg_2_fu_1198_p3[0:0] === 1'b1) ? tmp_i_i_i2_cast_fu_1212_p1 : sh_assign_6_fu_1192_p2);

assign ush_3_fu_1366_p3 = ((isNeg_3_fu_1348_p3[0:0] === 1'b1) ? tmp_i_i_i3_cast_fu_1362_p1 : sh_assign_9_fu_1342_p2);

assign ush_fu_917_p3 = ((isNeg_fu_899_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_913_p1 : sh_assign_fu_893_p2);

endmodule //jacobi_HLS
