-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jacobi_HLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    J_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    J_ce0 : OUT STD_LOGIC;
    J_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    J_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    J_ce1 : OUT STD_LOGIC;
    J_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of jacobi_HLS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "jacobi_HLS,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=191,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=43,HLS_SYN_FF=13338,HLS_SYN_LUT=19759,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (91 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (91 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (91 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (91 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (91 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (91 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (91 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (91 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (91 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (91 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (91 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (91 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFC : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (91 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sum_reg_342 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_reg_354 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_prev_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_prev_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_422 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state60_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state65_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_state70_pp1_stage3_iter2 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal exitcond_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1330_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_428 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_434 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_1330_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_452 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal J_load_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal J_load_1_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_1_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_1_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal J_load_2_reg_1174 : STD_LOGIC_VECTOR (31 downto 0);
    signal J_load_3_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_15_0_2_2_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_2_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_3_3_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_3_3_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_0_1_1_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_0_1_reg_1231 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_0_3_3_reg_1236 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_0_3_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_0_1_reg_1246 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_0_2_reg_1251 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_0_3_reg_1256 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1261 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_0_1_reg_1266 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_0_2_reg_1271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_10_0_3_reg_1276 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_20_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_20_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_1297 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_22_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_22_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_1308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal p_Val2_24_fu_904_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_24_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_26_fu_1034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_26_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state57_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state62_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state67_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal q_1_fu_1072_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal q_1_reg_1334 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_2_fu_1078_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_1339 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state58_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state63_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state68_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_4_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state59_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state64_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state69_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state57 : STD_LOGIC;
    signal ap_block_state61_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state66_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal x_prev_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_prev_ce0 : STD_LOGIC;
    signal x_prev_we0 : STD_LOGIC;
    signal x_prev_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_prev_ce1 : STD_LOGIC;
    signal x_prev_we1 : STD_LOGIC;
    signal x_new_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_new_ce0 : STD_LOGIC;
    signal x_new_we0 : STD_LOGIC;
    signal x_new_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_new_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_new_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_new_ce1 : STD_LOGIC;
    signal x_new_we1 : STD_LOGIC;
    signal x_new_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_new_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_331 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_q_phi_fu_358_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal p_Val2_21_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_23_fu_775_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_25_fu_1047_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_27_fu_1059_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp1_stage4 : BOOLEAN;
    signal grp_fu_369_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_374_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_378_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_399_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal p_Val2_s_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_520_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_524_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_510_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast5_fu_538_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_542_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_556_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_566_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_cast_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_cast_8_fu_582_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_1_cast_fu_534_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_7_fu_578_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_586_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_19_fu_598_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_592_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_12_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_610_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_3_fu_650_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_1_fu_654_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_2_fu_640_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i1_cast4_fu_668_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_672_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i1_fu_686_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_678_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i1_cast_fu_692_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_696_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_cast_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i1_cast_10_fu_712_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_3_cast_fu_664_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i1_9_fu_708_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_716_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_27_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_722_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_14_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_740_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_5_fu_804_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_2_fu_808_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_4_fu_794_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i2_cast3_fu_822_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_6_fu_826_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i2_fu_840_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i2_cast_fu_846_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_2_fu_850_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_8_cast_fu_858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i2_cast_12_fu_866_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_5_cast_fu_818_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i2_11_fu_862_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_4_fu_870_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_31_fu_882_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_876_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_16_fu_890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_894_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_7_fu_934_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_3_fu_938_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_6_fu_924_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i3_cast2_fu_952_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_9_fu_956_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i3_fu_970_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_3_fu_962_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i3_cast_fu_976_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_3_fu_980_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_11_cast_fu_988_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i3_cast_14_fu_996_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_7_cast_fu_948_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i3_13_fu_992_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_6_fu_1000_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_35_fu_1012_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_7_fu_1006_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_18_fu_1020_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1024_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_fu_1042_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal grp_fu_365_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage4_00001 : BOOLEAN;
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (91 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component jacobi_HLS_dadddsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_dsub_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_dmul_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_ddiv_6eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_sitodpfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_dsqrt_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component jacobi_HLS_x_prev IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_prev_U : component jacobi_HLS_x_prev
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_prev_address0,
        ce0 => x_prev_ce0,
        we0 => x_prev_we0,
        d0 => ap_const_lv32_0,
        q0 => x_prev_q0,
        address1 => x_prev_address1,
        ce1 => x_prev_ce1,
        we1 => x_prev_we1,
        d1 => x_new_q0,
        q1 => x_prev_q1);

    x_new_U : component jacobi_HLS_x_prev
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_new_address0,
        ce0 => x_new_ce0,
        we0 => x_new_we0,
        d0 => x_new_d0,
        q0 => x_new_q0,
        address1 => x_new_address1,
        ce1 => x_new_ce1,
        we1 => x_new_we1,
        d1 => x_new_d1,
        q1 => x_new_q1);

    jacobi_HLS_dadddsbkb_U1 : component jacobi_HLS_dadddsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        opcode => grp_fu_365_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    jacobi_HLS_dsub_6cud_U2 : component jacobi_HLS_dsub_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_369_p0,
        din1 => grp_fu_369_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    jacobi_HLS_dmul_6dEe_U3 : component jacobi_HLS_dmul_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_374_p0,
        din1 => grp_fu_374_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_374_p2);

    jacobi_HLS_dmul_6dEe_U4 : component jacobi_HLS_dmul_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_378_p0,
        din1 => grp_fu_378_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p2);

    jacobi_HLS_ddiv_6eOg_U5 : component jacobi_HLS_ddiv_6eOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => grp_fu_382_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_382_p2);

    jacobi_HLS_ddiv_6eOg_U6 : component jacobi_HLS_ddiv_6eOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => grp_fu_387_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    jacobi_HLS_sitodpfYi_U7 : component jacobi_HLS_sitodpfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p1);

    jacobi_HLS_sitodpfYi_U8 : component jacobi_HLS_sitodpfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_395_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p1);

    jacobi_HLS_sitodpfYi_U9 : component jacobi_HLS_sitodpfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_399_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_399_p1);

    jacobi_HLS_sitodpfYi_U10 : component jacobi_HLS_sitodpfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p1);

    jacobi_HLS_dsqrt_g8j_U11 : component jacobi_HLS_dsqrt_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => sum_reg_342,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state57) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_460_p2 = ap_const_lv1_0))) then 
                i_reg_331 <= i_1_fu_466_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_331 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    q_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                q_reg_354 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_reg_1330 = ap_const_lv1_0))) then 
                q_reg_354 <= q_1_reg_1334;
            end if; 
        end if;
    end process;

    reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_412 <= x_prev_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_412 <= x_prev_q0;
            end if; 
        end if;
    end process;

    reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_417 <= x_prev_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_417 <= x_prev_q1;
            end if; 
        end if;
    end process;

    sum_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                sum_reg_342 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (exitcond_reg_1330_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001))) then 
                sum_reg_342 <= grp_fu_365_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                J_load_1_reg_1138 <= J_q1;
                J_load_reg_1132 <= J_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                J_load_2_reg_1174 <= J_q0;
                J_load_3_reg_1180 <= J_q1;
                tmp_10_reg_1154 <= tmp_10_fu_478_p2;
                tmp_15_0_1_1_reg_1164 <= tmp_15_0_1_1_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_reg_1330 <= exitcond_fu_1066_p2;
                exitcond_reg_1330_pp1_iter1_reg <= exitcond_reg_1330;
                exitcond_reg_1330_pp1_iter2_reg <= exitcond_reg_1330_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                p_Result_1_reg_1297 <= p_Val2_5_fu_628_p1(63 downto 63);
                p_Result_s_reg_1286 <= p_Val2_s_fu_498_p1(63 downto 63);
                p_Val2_20_reg_1291 <= p_Val2_20_fu_620_p3;
                p_Val2_22_reg_1302 <= p_Val2_22_fu_750_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                p_Result_2_reg_1308 <= p_Val2_10_fu_782_p1(63 downto 63);
                p_Result_3_reg_1319 <= p_Val2_15_fu_912_p1(63 downto 63);
                p_Val2_24_reg_1313 <= p_Val2_24_fu_904_p3;
                p_Val2_26_reg_1324 <= p_Val2_26_fu_1034_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                q_1_reg_1334 <= q_1_fu_1072_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (exitcond_reg_1330_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)))) then
                reg_422 <= grp_fu_392_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_428 <= grp_fu_395_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_434 <= grp_fu_392_p1;
                reg_440 <= grp_fu_395_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (exitcond_reg_1330_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)))) then
                reg_446 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53))) then
                reg_452 <= grp_fu_382_p2;
                reg_456 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_10_0_1_reg_1266 <= grp_fu_378_p2;
                tmp_9_reg_1261 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_10_0_2_reg_1271 <= grp_fu_374_p2;
                tmp_10_0_3_reg_1276 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_15_0_2_2_reg_1196 <= tmp_15_0_2_2_fu_488_p2;
                tmp_15_0_3_3_reg_1206 <= tmp_15_0_3_3_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_16_0_1_1_reg_1226 <= grp_fu_399_p1;
                tmp_7_0_1_reg_1231 <= grp_fu_402_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_16_0_3_3_reg_1236 <= grp_fu_399_p1;
                tmp_7_0_3_reg_1241 <= grp_fu_402_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_fu_1066_p2 = ap_const_lv1_0))) then
                    tmp_2_reg_1339(4 downto 0) <= tmp_2_fu_1078_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1330 = ap_const_lv1_0))) then
                tmp_3_reg_1354 <= tmp_3_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (exitcond_reg_1330 = ap_const_lv1_0))) then
                tmp_4_reg_1360 <= tmp_4_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_8_0_1_reg_1246 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_8_0_2_reg_1251 <= grp_fu_365_p2;
                tmp_8_0_3_reg_1256 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    tmp_2_reg_1339(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, exitcond_fu_1066_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage3_subdone, exitcond4_fu_460_p2, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_460_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_1066_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_1066_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    J_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            J_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            J_address0 <= ap_const_lv64_FFFFFFFFFFFFFFFC(4 - 1 downto 0);
        else 
            J_address0 <= "XXXX";
        end if; 
    end process;


    J_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            J_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            J_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            J_address1 <= "XXXX";
        end if; 
    end process;


    J_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            J_ce0 <= ap_const_logic_1;
        else 
            J_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    J_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            J_ce1 <= ap_const_logic_1;
        else 
            J_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(56);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(57);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(58);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(59);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(60);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(91);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(61);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp1_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state57_assign_proc : process(exitcond_fu_1066_p2)
    begin
        if ((exitcond_fu_1066_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state57 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state57 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_q_phi_fu_358_p4_assign_proc : process(q_reg_354, ap_enable_reg_pp1_iter1, exitcond_reg_1330, ap_CS_fsm_pp1_stage0, q_1_reg_1334, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_reg_1330 = ap_const_lv1_0))) then 
            ap_phi_mux_q_phi_fu_358_p4 <= q_1_reg_1334;
        else 
            ap_phi_mux_q_phi_fu_358_p4 <= q_reg_354;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_406_p2;

    b_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            b_address0 <= "XX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            b_address1 <= "XX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_460_p2 <= "1" when (i_reg_331 = ap_const_lv5_10) else "0";
    exitcond_fu_1066_p2 <= "1" when (ap_phi_mux_q_phi_fu_358_p4 = ap_const_lv5_10) else "0";

    grp_fu_365_opcode_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond_reg_1330_pp1_iter1_reg, ap_CS_fsm_state12, ap_CS_fsm_pp1_stage4, ap_CS_fsm_state13, ap_block_pp1_stage4_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_365_opcode <= ap_const_lv2_1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage4_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond_reg_1330_pp1_iter1_reg = ap_const_lv1_0))) then 
            grp_fu_365_opcode <= ap_const_lv2_0;
        else 
            grp_fu_365_opcode <= "XX";
        end if; 
    end process;


    grp_fu_365_p0_assign_proc : process(sum_reg_342, ap_enable_reg_pp1_iter1, reg_428, ap_CS_fsm_state12, reg_440, ap_CS_fsm_pp1_stage4, ap_CS_fsm_state13, ap_block_pp1_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_365_p0 <= sum_reg_342;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_365_p0 <= reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_365_p0 <= reg_428;
        else 
            grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p1_assign_proc : process(reg_422, ap_enable_reg_pp1_iter1, reg_434, ap_CS_fsm_state12, ap_CS_fsm_pp1_stage4, ap_CS_fsm_state13, ap_block_pp1_stage4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_365_p1 <= reg_434;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_365_p1 <= reg_422;
        else 
            grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_369_p0_assign_proc : process(ap_CS_fsm_state12, tmp_7_0_1_reg_1231, tmp_7_0_3_reg_1241, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_369_p0 <= tmp_7_0_3_reg_1241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_369_p0 <= tmp_7_0_1_reg_1231;
        else 
            grp_fu_369_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_369_p1_assign_proc : process(ap_CS_fsm_state12, tmp_16_0_1_1_reg_1226, tmp_16_0_3_3_reg_1236, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_369_p1 <= tmp_16_0_3_3_reg_1236;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_369_p1 <= tmp_16_0_1_1_reg_1226;
        else 
            grp_fu_369_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_374_p0_assign_proc : process(reg_422, reg_434, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_374_p0 <= reg_434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_374_p0 <= reg_422;
        else 
            grp_fu_374_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_374_p1_assign_proc : process(ap_CS_fsm_state17, reg_446, tmp_8_0_2_reg_1251, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_374_p1 <= tmp_8_0_2_reg_1251;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_374_p1 <= reg_446;
        else 
            grp_fu_374_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_p0_assign_proc : process(reg_428, ap_CS_fsm_state17, reg_440, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_378_p0 <= reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_378_p0 <= reg_428;
        else 
            grp_fu_378_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_p1_assign_proc : process(ap_CS_fsm_state17, tmp_8_0_1_reg_1246, tmp_8_0_3_reg_1256, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_378_p1 <= tmp_8_0_3_reg_1256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_378_p1 <= tmp_8_0_1_reg_1246;
        else 
            grp_fu_378_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_382_p1_assign_proc : process(tmp_9_reg_1261, tmp_10_0_2_reg_1271, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_382_p1 <= tmp_10_0_2_reg_1271;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_382_p1 <= tmp_9_reg_1261;
        else 
            grp_fu_382_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p1_assign_proc : process(tmp_10_0_1_reg_1266, ap_CS_fsm_state23, tmp_10_0_3_reg_1276, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_387_p1 <= tmp_10_0_3_reg_1276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_387_p1 <= tmp_10_0_1_reg_1266;
        else 
            grp_fu_387_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_pp1_stage3, ap_CS_fsm_state12, J_load_reg_1132, tmp_10_reg_1154, J_load_2_reg_1174, ap_CS_fsm_state6, tmp_15_0_2_2_reg_1196, ap_CS_fsm_state7, ap_enable_reg_pp1_iter0, tmp_4_reg_1360, ap_block_pp1_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            grp_fu_392_p0 <= tmp_4_reg_1360;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_392_p0 <= J_load_2_reg_1174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_392_p0 <= J_load_reg_1132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_392_p0 <= tmp_15_0_2_2_reg_1196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_392_p0 <= tmp_10_reg_1154;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p0_assign_proc : process(b_q0, ap_CS_fsm_state11, ap_CS_fsm_state12, J_load_1_reg_1138, J_load_3_reg_1180, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_395_p0 <= J_load_3_reg_1180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_395_p0 <= J_load_1_reg_1138;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_395_p0 <= b_q0;
        else 
            grp_fu_395_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_399_p0_assign_proc : process(tmp_15_0_1_1_reg_1164, ap_CS_fsm_state6, tmp_15_0_3_3_reg_1206, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_399_p0 <= tmp_15_0_3_3_reg_1206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_399_p0 <= tmp_15_0_1_1_reg_1164;
        else 
            grp_fu_399_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_466_p2 <= std_logic_vector(unsigned(i_reg_331) + unsigned(ap_const_lv5_1));
    isNeg_1_fu_678_p3 <= sh_assign_3_fu_672_p2(11 downto 11);
    isNeg_2_fu_832_p3 <= sh_assign_6_fu_826_p2(11 downto 11);
    isNeg_3_fu_962_p3 <= sh_assign_9_fu_956_p2(11 downto 11);
    isNeg_fu_548_p3 <= sh_assign_fu_542_p2(11 downto 11);
    mantissa_V_1_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_524_p4),137));
    mantissa_V_1_fu_654_p4 <= ((ap_const_lv1_1 & tmp_V_3_fu_650_p1) & ap_const_lv1_0);
    mantissa_V_2_fu_808_p4 <= ((ap_const_lv1_1 & tmp_V_5_fu_804_p1) & ap_const_lv1_0);
    mantissa_V_3_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_654_p4),137));
    mantissa_V_3_fu_938_p4 <= ((ap_const_lv1_1 & tmp_V_7_fu_934_p1) & ap_const_lv1_0);
    mantissa_V_5_cast_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_2_fu_808_p4),137));
    mantissa_V_7_cast_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_3_fu_938_p4),137));
    mantissa_V_fu_524_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_520_p1) & ap_const_lv1_0);
    p_Val2_10_fu_782_p1 <= reg_452;
    p_Val2_15_fu_912_p1 <= reg_456;
    p_Val2_20_fu_620_p3 <= 
        tmp_12_fu_606_p1 when (isNeg_fu_548_p3(0) = '1') else 
        tmp_13_fu_610_p4;
    p_Val2_21_fu_763_p3 <= 
        result_V_1_fu_758_p2 when (p_Result_s_reg_1286(0) = '1') else 
        p_Val2_20_reg_1291;
    p_Val2_22_fu_750_p3 <= 
        tmp_14_fu_736_p1 when (isNeg_1_fu_678_p3(0) = '1') else 
        tmp_15_fu_740_p4;
    p_Val2_23_fu_775_p3 <= 
        result_V_3_fu_770_p2 when (p_Result_1_reg_1297(0) = '1') else 
        p_Val2_22_reg_1302;
    p_Val2_24_fu_904_p3 <= 
        tmp_16_fu_890_p1 when (isNeg_2_fu_832_p3(0) = '1') else 
        tmp_17_fu_894_p4;
    p_Val2_25_fu_1047_p3 <= 
        result_V_5_fu_1042_p2 when (p_Result_2_reg_1308(0) = '1') else 
        p_Val2_24_reg_1313;
    p_Val2_26_fu_1034_p3 <= 
        tmp_18_fu_1020_p1 when (isNeg_3_fu_962_p3(0) = '1') else 
        tmp_20_fu_1024_p4;
    p_Val2_27_fu_1059_p3 <= 
        result_V_7_fu_1054_p2 when (p_Result_3_reg_1319(0) = '1') else 
        p_Val2_26_reg_1324;
    p_Val2_5_fu_628_p1 <= reg_456;
    p_Val2_s_fu_498_p1 <= reg_452;
    q_1_fu_1072_p2 <= std_logic_vector(unsigned(ap_phi_mux_q_phi_fu_358_p4) + unsigned(ap_const_lv5_1));
    r_V_1_fu_592_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast_fu_534_p1),to_integer(unsigned('0' & tmp_i_i_i_7_fu_578_p1(31-1 downto 0)))));
    r_V_2_fu_716_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_654_p4),to_integer(unsigned('0' & tmp_i_i_i1_cast_10_fu_712_p1(31-1 downto 0)))));
    r_V_3_fu_722_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_3_cast_fu_664_p1),to_integer(unsigned('0' & tmp_i_i_i1_9_fu_708_p1(31-1 downto 0)))));
    r_V_4_fu_870_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_2_fu_808_p4),to_integer(unsigned('0' & tmp_i_i_i2_cast_12_fu_866_p1(31-1 downto 0)))));
    r_V_5_fu_876_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_5_cast_fu_818_p1),to_integer(unsigned('0' & tmp_i_i_i2_11_fu_862_p1(31-1 downto 0)))));
    r_V_6_fu_1000_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_3_fu_938_p4),to_integer(unsigned('0' & tmp_i_i_i3_cast_14_fu_996_p1(31-1 downto 0)))));
    r_V_7_fu_1006_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_7_cast_fu_948_p1),to_integer(unsigned('0' & tmp_i_i_i3_13_fu_992_p1(31-1 downto 0)))));
    r_V_fu_586_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_524_p4),to_integer(unsigned('0' & tmp_i_i_i_cast_8_fu_582_p1(31-1 downto 0)))));
    result_V_1_fu_758_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_20_reg_1291));
    result_V_3_fu_770_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_22_reg_1302));
    result_V_5_fu_1042_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_24_reg_1313));
    result_V_7_fu_1054_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_26_reg_1324));
        sh_assign_11_cast_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_980_p3),32));

        sh_assign_2_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_566_p3),32));

    sh_assign_3_fu_672_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i1_cast4_fu_668_p1));
        sh_assign_5_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_696_p3),32));

    sh_assign_6_fu_826_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i2_cast3_fu_822_p1));
        sh_assign_8_cast_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_850_p3),32));

    sh_assign_9_fu_956_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i3_cast2_fu_952_p1));
    sh_assign_fu_542_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast5_fu_538_p1));
    tmp_10_fu_478_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(J_load_reg_1132) * signed(reg_412))), 32));
    tmp_12_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_598_p3),32));
    tmp_13_fu_610_p4 <= r_V_1_fu_592_p2(84 downto 53);
    tmp_14_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_728_p3),32));
    tmp_15_0_1_1_fu_483_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(J_load_1_reg_1138) * signed(reg_417))), 32));
    tmp_15_0_2_2_fu_488_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(J_load_2_reg_1174) * signed(reg_412))), 32));
    tmp_15_0_3_3_fu_493_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(J_load_3_reg_1180) * signed(reg_417))), 32));
    tmp_15_fu_740_p4 <= r_V_3_fu_722_p2(84 downto 53);
    tmp_16_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_882_p3),32));
    tmp_17_fu_894_p4 <= r_V_5_fu_876_p2(84 downto 53);
    tmp_18_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1012_p3),32));
    tmp_19_fu_598_p3 <= r_V_fu_586_p2(53 downto 53);
    tmp_20_fu_1024_p4 <= r_V_7_fu_1006_p2(84 downto 53);
    tmp_27_fu_728_p3 <= r_V_2_fu_716_p2(53 downto 53);
    tmp_2_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_q_phi_fu_358_p4),64));
    tmp_31_fu_882_p3 <= r_V_4_fu_870_p2(53 downto 53);
    tmp_35_fu_1012_p3 <= r_V_6_fu_1000_p2(53 downto 53);
    tmp_3_fu_1084_p2 <= std_logic_vector(unsigned(x_new_q1) - unsigned(x_prev_q0));
    tmp_4_fu_1090_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_3_reg_1354) * signed(tmp_3_reg_1354))), 32));
    tmp_V_1_fu_520_p1 <= p_Val2_s_fu_498_p1(52 - 1 downto 0);
    tmp_V_2_fu_640_p4 <= p_Val2_5_fu_628_p1(62 downto 52);
    tmp_V_3_fu_650_p1 <= p_Val2_5_fu_628_p1(52 - 1 downto 0);
    tmp_V_4_fu_794_p4 <= p_Val2_10_fu_782_p1(62 downto 52);
    tmp_V_5_fu_804_p1 <= p_Val2_10_fu_782_p1(52 - 1 downto 0);
    tmp_V_6_fu_924_p4 <= p_Val2_15_fu_912_p1(62 downto 52);
    tmp_V_7_fu_934_p1 <= p_Val2_15_fu_912_p1(52 - 1 downto 0);
    tmp_V_fu_510_p4 <= p_Val2_s_fu_498_p1(62 downto 52);
    tmp_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_331),64));
    tmp_i_i_i1_9_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_704_p1),137));
    tmp_i_i_i1_cast_10_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_704_p1),54));
        tmp_i_i_i1_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i1_fu_686_p2),12));

    tmp_i_i_i1_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_2_fu_640_p4));
    tmp_i_i_i2_11_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_8_cast_fu_858_p1),137));
    tmp_i_i_i2_cast_12_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_8_cast_fu_858_p1),54));
        tmp_i_i_i2_cast_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i2_fu_840_p2),12));

    tmp_i_i_i2_fu_840_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_4_fu_794_p4));
    tmp_i_i_i3_13_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_11_cast_fu_988_p1),137));
    tmp_i_i_i3_cast_14_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_11_cast_fu_988_p1),54));
        tmp_i_i_i3_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i3_fu_970_p2),12));

    tmp_i_i_i3_fu_970_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_6_fu_924_p4));
    tmp_i_i_i_7_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_574_p1),137));
    tmp_i_i_i_cast_8_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_574_p1),54));
        tmp_i_i_i_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_556_p2),12));

    tmp_i_i_i_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_510_p4));
    tmp_i_i_i_i1_cast4_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_640_p4),12));
    tmp_i_i_i_i2_cast3_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_fu_794_p4),12));
    tmp_i_i_i_i3_cast2_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_6_fu_924_p4),12));
    tmp_i_i_i_i_cast5_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_510_p4),12));
    ush_1_fu_696_p3 <= 
        tmp_i_i_i1_cast_fu_692_p1 when (isNeg_1_fu_678_p3(0) = '1') else 
        sh_assign_3_fu_672_p2;
    ush_2_fu_850_p3 <= 
        tmp_i_i_i2_cast_fu_846_p1 when (isNeg_2_fu_832_p3(0) = '1') else 
        sh_assign_6_fu_826_p2;
    ush_3_fu_980_p3 <= 
        tmp_i_i_i3_cast_fu_976_p1 when (isNeg_3_fu_962_p3(0) = '1') else 
        sh_assign_9_fu_956_p2;
    ush_fu_566_p3 <= 
        tmp_i_i_i_cast_fu_562_p1 when (isNeg_fu_548_p3(0) = '1') else 
        sh_assign_fu_542_p2;
    x_address0 <= tmp_2_reg_1339(4 - 1 downto 0);

    x_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= x_new_q1;

    x_new_address0_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state2, ap_CS_fsm_state55, ap_CS_fsm_state56, tmp_fu_472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            x_new_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x_new_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            x_new_address0 <= ap_const_lv64_10(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_new_address0 <= tmp_fu_472_p1(4 - 1 downto 0);
        else 
            x_new_address0 <= "XXXX";
        end if; 
    end process;


    x_new_address1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_2_fu_1078_p1, ap_CS_fsm_state56, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            x_new_address1 <= tmp_2_fu_1078_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            x_new_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x_new_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            x_new_address1 <= "XXXX";
        end if; 
    end process;


    x_new_ce0_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            x_new_ce0 <= ap_const_logic_1;
        else 
            x_new_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_new_ce1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            x_new_ce1 <= ap_const_logic_1;
        else 
            x_new_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_new_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state55, ap_CS_fsm_state56, p_Val2_21_fu_763_p3, p_Val2_27_fu_1059_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            x_new_d0 <= p_Val2_27_fu_1059_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x_new_d0 <= p_Val2_21_fu_763_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_new_d0 <= ap_const_lv32_1;
        else 
            x_new_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_new_d1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56, p_Val2_23_fu_775_p3, p_Val2_25_fu_1047_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            x_new_d1 <= p_Val2_25_fu_1047_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x_new_d1 <= p_Val2_23_fu_775_p3;
        else 
            x_new_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_new_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state55, ap_CS_fsm_state56, exitcond4_fu_460_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_460_p2 = ap_const_lv1_0)))) then 
            x_new_we0 <= ap_const_logic_1;
        else 
            x_new_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_new_we1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x_new_we1 <= ap_const_logic_1;
        else 
            x_new_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x_prev_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_2_fu_1078_p1, ap_block_pp1_stage0, tmp_fu_472_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            x_prev_address0 <= tmp_2_fu_1078_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_prev_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_prev_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_prev_address0 <= tmp_fu_472_p1(4 - 1 downto 0);
        else 
            x_prev_address0 <= "XXXX";
        end if; 
    end process;


    x_prev_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x_prev_address1 <= ap_const_lv64_10(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_prev_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_prev_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            x_prev_address1 <= "XXXX";
        end if; 
    end process;


    x_prev_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            x_prev_ce0 <= ap_const_logic_1;
        else 
            x_prev_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_prev_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x_prev_ce1 <= ap_const_logic_1;
        else 
            x_prev_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_prev_we0_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_460_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_460_p2 = ap_const_lv1_0))) then 
            x_prev_we0 <= ap_const_logic_1;
        else 
            x_prev_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_prev_we1_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x_prev_we1 <= ap_const_logic_1;
        else 
            x_prev_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x_we0_assign_proc : process(exitcond_reg_1330, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_reg_1330 = ap_const_lv1_0))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
