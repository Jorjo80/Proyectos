// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="producer_jacobi,hls_ip_2018_3,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=5987,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=5090,HLS_SYN_LUT=7114,HLS_VERSION=2018_3}" *)

module producer_jacobi (
        ap_clk,
        ap_rst
);


input   ap_clk;
input   ap_rst;

wire   [3:0] producer_x_m_if_Val_address0;
wire    producer_x_m_if_Val_ce0;
wire    producer_x_m_if_Val_we0;
wire    producer_A_m_if_Val_ce0;
wire   [unknown:unknown] producer_A_m_if_Val_q0;
wire   [1:0] producer_b_m_if_Val_address0;
wire    producer_b_m_if_Val_ce0;
wire   [31:0] producer_b_m_if_Val_q0;
reg  signed [31:0] reg_338;
wire   [63:0] grp_fu_333_p1;
reg   [63:0] reg_343;
wire   [63:0] grp_fu_317_p2;
reg   [63:0] reg_350;
wire   [63:0] tmp_2_fu_386_p1;
reg   [63:0] tmp_2_reg_627;
wire   [0:0] exitcond2_fu_374_p2;
wire   [63:0] tmp_9_fu_403_p1;
reg   [63:0] tmp_9_reg_645;
wire   [0:0] exitcond3_fu_391_p2;
reg   [1:0] producer_A_m_if_Val_s_reg_657;
wire   [31:0] x_prev_q0;
reg  signed [31:0] x_prev_load_1_reg_662;
wire   [31:0] tmp_18_fu_437_p2;
reg   [31:0] tmp_18_reg_683;
wire   [63:0] grp_fu_324_p2;
reg   [63:0] tmp_14_reg_698;
wire   [63:0] grp_fu_328_p2;
reg   [63:0] x_assign_reg_703;
reg   [0:0] p_Result_s_reg_708;
wire   [31:0] p_Val2_5_fu_563_p3;
reg   [31:0] p_Val2_5_reg_713;
wire   [63:0] tmp_5_fu_595_p1;
reg   [63:0] tmp_5_reg_727;
wire   [0:0] exitcond_fu_583_p2;
wire  signed [31:0] tmp_6_fu_601_p2;
reg  signed [31:0] tmp_6_reg_742;
wire   [31:0] tmp_7_fu_607_p2;
reg   [31:0] tmp_7_reg_748;
reg   [3:0] x_prev_address0;
wire    x_prev_ce0;
wire    x_prev_we0;
reg   [31:0] x_prev_d0;
reg   [3:0] x_new_address0;
wire    x_new_ce0;
wire    x_new_we0;
reg   [31:0] x_new_d0;
wire   [31:0] x_new_q0;
wire   [4:0] ap_phi_mux_i_phi_fu_228_p4;
wire   [4:0] ap_phi_mux_i1_phi_fu_239_p4;
wire   [2:0] ap_phi_mux_i2_phi_fu_250_p4;
wire   [4:0] ap_phi_mux_i3_phi_fu_310_p4;
wire   [63:0] tmp_fu_368_p1;
wire  signed [63:0] tmp_4_fu_414_p1;
wire   [31:0] p_Val2_6_fu_576_p3;
reg   [63:0] grp_fu_317_p0;
reg   [63:0] sigma_reg_258;
reg   [63:0] tmp_1_reg_293;
reg   [63:0] grp_fu_317_p1;
reg   [31:0] grp_fu_333_p0;
reg   [2:0] i2_reg_246;
wire   [2:0] tmp_s_fu_408_p2;
wire   [63:0] p_Val2_s_fu_442_p1;
wire   [51:0] tmp_V_1_fu_463_p1;
wire   [53:0] mantissa_V_fu_467_p4;
wire   [10:0] tmp_V_fu_453_p4;
wire   [11:0] tmp_i_i_i_i_cast2_fu_481_p1;
wire   [11:0] sh_assign_fu_485_p2;
wire   [10:0] tmp_i_i_i_fu_499_p2;
wire   [0:0] isNeg_fu_491_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_505_p1;
wire   [11:0] ush_fu_509_p3;
wire  signed [31:0] sh_assign_2_cast_fu_517_p1;
wire   [53:0] tmp_i_i_i_cast_11_fu_525_p1;
wire   [136:0] mantissa_V_1_cast_fu_477_p1;
wire   [136:0] tmp_i_i_i_10_fu_521_p1;
wire   [53:0] r_V_fu_529_p2;
wire   [0:0] tmp_23_fu_541_p3;
wire   [136:0] r_V_1_fu_535_p2;
wire   [31:0] tmp_15_fu_549_p1;
wire   [31:0] tmp_16_fu_553_p4;
wire   [31:0] result_V_1_fu_571_p2;
wire   [1:0] grp_fu_317_opcode;

producer_jacobi_pbkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
producer_x_m_if_Val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(producer_x_m_if_Val_address0),
    .ce0(producer_x_m_if_Val_ce0),
    .we0(producer_x_m_if_Val_we0),
    .d0(x_new_q0)
);

producer_jacobi_pcud #(
    .DataWidth( 0 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
producer_A_m_if_Val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(producer_A_m_if_Val_s_reg_657),
    .ce0(producer_A_m_if_Val_ce0),
    .q0(producer_A_m_if_Val_q0)
);

producer_jacobi_pdEe #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
producer_b_m_if_Val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(producer_b_m_if_Val_address0),
    .ce0(producer_b_m_if_Val_ce0),
    .q0(producer_b_m_if_Val_q0)
);

producer_jacobi_xeOg #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_prev_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_prev_address0),
    .ce0(x_prev_ce0),
    .we0(x_prev_we0),
    .d0(x_prev_d0),
    .q0(x_prev_q0)
);

producer_jacobi_xeOg #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_new_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_new_address0),
    .ce0(x_new_ce0),
    .we0(x_new_we0),
    .d0(x_new_d0),
    .q0(x_new_q0)
);

producer_jacobi_dg8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
producer_jacobi_dg8j_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_317_p0),
    .din1(grp_fu_317_p1),
    .opcode(grp_fu_317_opcode),
    .ce(1'b1),
    .dout(grp_fu_317_p2)
);

producer_jacobi_dhbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
producer_jacobi_dhbi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_343),
    .din1(reg_350),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

producer_jacobi_dibs #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
producer_jacobi_dibs_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_14_reg_698),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

producer_jacobi_sjbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
producer_jacobi_sjbC_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .ce(1'b1),
    .dout(grp_fu_333_p1)
);

always @ (posedge ap_clk) begin
    p_Result_s_reg_708 <= p_Val2_s_fu_442_p1[32'd63];
end

always @ (posedge ap_clk) begin
    p_Val2_5_reg_713 <= p_Val2_5_fu_563_p3;
end

always @ (posedge ap_clk) begin
    reg_338 <= producer_A_m_if_Val_q0;
end

always @ (posedge ap_clk) begin
    reg_343 <= grp_fu_333_p1;
end

always @ (posedge ap_clk) begin
    reg_350 <= grp_fu_317_p2;
end

always @ (posedge ap_clk) begin
    tmp_14_reg_698 <= grp_fu_324_p2;
end

always @ (posedge ap_clk) begin
    tmp_18_reg_683 <= tmp_18_fu_437_p2;
end

always @ (posedge ap_clk) begin
    tmp_6_reg_742 <= tmp_6_fu_601_p2;
end

always @ (posedge ap_clk) begin
    tmp_7_reg_748 <= tmp_7_fu_607_p2;
end

always @ (posedge ap_clk) begin
    x_assign_reg_703 <= grp_fu_328_p2;
end

always @ (posedge ap_clk) begin
    x_prev_load_1_reg_662 <= x_prev_q0;
end

assign grp_fu_317_opcode = 2'd0;

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        grp_fu_317_p0 = tmp_1_reg_293;
    end else begin
        grp_fu_317_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        grp_fu_317_p1 = sigma_reg_258;
    end else begin
        grp_fu_317_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        grp_fu_333_p0 = tmp_7_reg_748;
    end else begin
        grp_fu_333_p0 = 'bx;
    end
end

assign producer_A_m_if_Val_ce0 = 1'b1;

assign producer_b_m_if_Val_ce0 = 1'b1;

assign producer_x_m_if_Val_ce0 = 1'b1;

assign producer_x_m_if_Val_we0 = 1'b1;

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        x_new_address0 = tmp_5_fu_595_p1;
    end else begin
        x_new_address0 = 'bx;
    end
end

assign x_new_ce0 = 1'b1;

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        x_new_d0 = p_Val2_6_fu_576_p3;
    end else begin
        x_new_d0 = 'bx;
    end
end

assign x_new_we0 = 1'b1;

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        x_prev_address0 = tmp_5_fu_595_p1;
    end else begin
        x_prev_address0 = 'bx;
    end
end

assign x_prev_ce0 = 1'b1;

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        x_prev_d0 = x_new_q0;
    end else begin
        x_prev_d0 = 'bx;
    end
end

assign x_prev_we0 = 1'b1;

assign ap_phi_mux_i1_phi_fu_239_p4 = 5'd0;

assign ap_phi_mux_i2_phi_fu_250_p4 = 3'd0;

assign ap_phi_mux_i3_phi_fu_310_p4 = 5'd0;

assign ap_phi_mux_i_phi_fu_228_p4 = 5'd0;

assign exitcond2_fu_374_p2 = ((ap_phi_mux_i1_phi_fu_239_p4 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond3_fu_391_p2 = ((ap_phi_mux_i2_phi_fu_250_p4 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_583_p2 = ((ap_phi_mux_i3_phi_fu_310_p4 == 5'd16) ? 1'b1 : 1'b0);

assign isNeg_fu_491_p3 = sh_assign_fu_485_p2[32'd11];

assign mantissa_V_1_cast_fu_477_p1 = mantissa_V_fu_467_p4;

assign mantissa_V_fu_467_p4 = {{{{1'd1}, {tmp_V_1_fu_463_p1}}}, {1'd0}};

assign p_Val2_5_fu_563_p3 = ((isNeg_fu_491_p3[0:0] === 1'b1) ? tmp_15_fu_549_p1 : tmp_16_fu_553_p4);

assign p_Val2_6_fu_576_p3 = ((p_Result_s_reg_708[0:0] === 1'b1) ? result_V_1_fu_571_p2 : p_Val2_5_reg_713);

assign p_Val2_s_fu_442_p1 = x_assign_reg_703;

assign producer_b_m_if_Val_address0 = tmp_9_reg_645;

assign producer_x_m_if_Val_address0 = tmp_5_reg_727;

assign r_V_1_fu_535_p2 = mantissa_V_1_cast_fu_477_p1 << tmp_i_i_i_10_fu_521_p1;

assign r_V_fu_529_p2 = mantissa_V_fu_467_p4 >> tmp_i_i_i_cast_11_fu_525_p1;

assign result_V_1_fu_571_p2 = (32'd0 - p_Val2_5_reg_713);

assign sh_assign_2_cast_fu_517_p1 = $signed(ush_fu_509_p3);

assign sh_assign_fu_485_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast2_fu_481_p1));

assign tmp_15_fu_549_p1 = tmp_23_fu_541_p3;

assign tmp_16_fu_553_p4 = {{r_V_1_fu_535_p2[84:53]}};

assign tmp_18_fu_437_p2 = ($signed(reg_338) * $signed(x_prev_load_1_reg_662));

assign tmp_23_fu_541_p3 = r_V_fu_529_p2[32'd53];

assign tmp_2_fu_386_p1 = ap_phi_mux_i1_phi_fu_239_p4;

assign tmp_4_fu_414_p1 = $signed(tmp_s_fu_408_p2);

assign tmp_5_fu_595_p1 = ap_phi_mux_i3_phi_fu_310_p4;

assign tmp_6_fu_601_p2 = (x_new_q0 - x_prev_q0);

assign tmp_7_fu_607_p2 = ($signed(tmp_6_reg_742) * $signed(tmp_6_reg_742));

assign tmp_9_fu_403_p1 = ap_phi_mux_i2_phi_fu_250_p4;

assign tmp_V_1_fu_463_p1 = p_Val2_s_fu_442_p1[51:0];

assign tmp_V_fu_453_p4 = {{p_Val2_s_fu_442_p1[62:52]}};

assign tmp_fu_368_p1 = ap_phi_mux_i_phi_fu_228_p4;

assign tmp_i_i_i_10_fu_521_p1 = $unsigned(sh_assign_2_cast_fu_517_p1);

assign tmp_i_i_i_cast_11_fu_525_p1 = $unsigned(sh_assign_2_cast_fu_517_p1);

assign tmp_i_i_i_cast_fu_505_p1 = $signed(tmp_i_i_i_fu_499_p2);

assign tmp_i_i_i_fu_499_p2 = (11'd1023 - tmp_V_fu_453_p4);

assign tmp_i_i_i_i_cast2_fu_481_p1 = tmp_V_fu_453_p4;

assign tmp_s_fu_408_p2 = ($signed(i2_reg_246) + $signed(3'd7));

assign ush_fu_509_p3 = ((isNeg_fu_491_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_505_p1 : sh_assign_fu_485_p2);

always @ (posedge ap_clk) begin
    tmp_2_reg_627[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    tmp_9_reg_645[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    producer_A_m_if_Val_s_reg_657[1:0] <= 2'b11;
    tmp_5_reg_727[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    sigma_reg_258[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    tmp_1_reg_293[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    i2_reg_246[2:0] <= 3'b000;
end

endmodule //producer_jacobi
