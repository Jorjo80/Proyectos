-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity producer_jacobi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of producer_jacobi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "producer_jacobi,hls_ip_2018_3,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=5987,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=5090,HLS_SYN_LUT=7114,HLS_VERSION=2018_3}";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal producer_x_m_if_Val_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal producer_x_m_if_Val_ce0 : STD_LOGIC;
    signal producer_x_m_if_Val_we0 : STD_LOGIC;
    signal producer_A_m_if_Val_ce0 : STD_LOGIC;
    signal producer_A_m_if_Val_q0 : STD_LOGIC_VECTOR (unknown downto unknown);
    signal producer_b_m_if_Val_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal producer_b_m_if_Val_ce0 : STD_LOGIC;
    signal producer_b_m_if_Val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_350 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_627 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal producer_A_m_if_Val_s_reg_657 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_prev_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_prev_load_1_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_727 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_prev_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_prev_ce0 : STD_LOGIC;
    signal x_prev_we0 : STD_LOGIC;
    signal x_prev_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_new_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_new_ce0 : STD_LOGIC;
    signal x_new_we0 : STD_LOGIC;
    signal x_new_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_new_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_phi_fu_228_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i1_phi_fu_239_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i2_phi_fu_250_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_i3_phi_fu_310_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_6_fu_576_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sigma_reg_258 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_293 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_246 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_408_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_463_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_467_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_453_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast2_fu_481_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_485_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_499_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_505_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_509_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_cast_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_cast_11_fu_525_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_1_cast_fu_477_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_10_fu_521_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_529_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_23_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_535_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_15_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_553_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_opcode : STD_LOGIC_VECTOR (1 downto 0);

    component producer_jacobi_dg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component producer_jacobi_dhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component producer_jacobi_dibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component producer_jacobi_sjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component producer_jacobi_pbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component producer_jacobi_pcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (unknown downto unknown) );
    end component;


    component producer_jacobi_pdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component producer_jacobi_xeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    producer_x_m_if_Val_U : component producer_jacobi_pbkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => producer_x_m_if_Val_address0,
        ce0 => producer_x_m_if_Val_ce0,
        we0 => producer_x_m_if_Val_we0,
        d0 => x_new_q0);

    producer_A_m_if_Val_U : component producer_jacobi_pcud
    generic map (
        DataWidth => 0,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => producer_A_m_if_Val_s_reg_657,
        ce0 => producer_A_m_if_Val_ce0,
        q0 => producer_A_m_if_Val_q0);

    producer_b_m_if_Val_U : component producer_jacobi_pdEe
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => producer_b_m_if_Val_address0,
        ce0 => producer_b_m_if_Val_ce0,
        q0 => producer_b_m_if_Val_q0);

    x_prev_U : component producer_jacobi_xeOg
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_prev_address0,
        ce0 => x_prev_ce0,
        we0 => x_prev_we0,
        d0 => x_prev_d0,
        q0 => x_prev_q0);

    x_new_U : component producer_jacobi_xeOg
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_new_address0,
        ce0 => x_new_ce0,
        we0 => x_new_we0,
        d0 => x_new_d0,
        q0 => x_new_q0);

    producer_jacobi_dg8j_U1 : component producer_jacobi_dg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_317_p0,
        din1 => grp_fu_317_p1,
        opcode => grp_fu_317_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_317_p2);

    producer_jacobi_dhbi_U2 : component producer_jacobi_dhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_343,
        din1 => reg_350,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    producer_jacobi_dibs_U3 : component producer_jacobi_dibs
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => tmp_14_reg_698,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    producer_jacobi_sjbC_U4 : component producer_jacobi_sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p1);





    i2_reg_246_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
        end if;
    end process;


    p_Result_s_reg_708_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            p_Result_s_reg_708 <= p_Val2_s_fu_442_p1(63 downto 63);
        end if;
    end process;


    p_Val2_5_reg_713_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            p_Val2_5_reg_713 <= p_Val2_5_fu_563_p3;
        end if;
    end process;


    producer_A_m_if_Val_s_reg_657_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
        end if;
    end process;


    reg_338_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            reg_338 <= std_logic_vector(IEEE.numeric_std.resize(signed(producer_A_m_if_Val_q0),32));
        end if;
    end process;


    reg_343_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            reg_343 <= grp_fu_333_p1;
        end if;
    end process;


    reg_350_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            reg_350 <= grp_fu_317_p2;
        end if;
    end process;


    sigma_reg_258_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
        end if;
    end process;


    tmp_14_reg_698_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            tmp_14_reg_698 <= grp_fu_324_p2;
        end if;
    end process;


    tmp_18_reg_683_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            tmp_18_reg_683 <= tmp_18_fu_437_p2;
        end if;
    end process;


    tmp_1_reg_293_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
        end if;
    end process;


    tmp_2_reg_627_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
        end if;
    end process;


    tmp_5_reg_727_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
        end if;
    end process;


    tmp_6_reg_742_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            tmp_6_reg_742 <= tmp_6_fu_601_p2;
        end if;
    end process;


    tmp_7_reg_748_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            tmp_7_reg_748 <= tmp_7_fu_607_p2;
        end if;
    end process;


    tmp_9_reg_645_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
        end if;
    end process;


    x_assign_reg_703_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            x_assign_reg_703 <= grp_fu_328_p2;
        end if;
    end process;


    x_prev_load_1_reg_662_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            x_prev_load_1_reg_662 <= x_prev_q0;
        end if;
    end process;

    tmp_2_reg_627(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    tmp_9_reg_645(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    producer_A_m_if_Val_s_reg_657(1 downto 0) <= "11";
    tmp_5_reg_727(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    sigma_reg_258(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_293(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    i2_reg_246(2 downto 0) <= "000";
    ap_phi_mux_i1_phi_fu_239_p4 <= ap_const_lv5_0;
    ap_phi_mux_i2_phi_fu_250_p4 <= ap_const_lv3_0;
    ap_phi_mux_i3_phi_fu_310_p4 <= ap_const_lv5_0;
    ap_phi_mux_i_phi_fu_228_p4 <= ap_const_lv5_0;
    exitcond2_fu_374_p2 <= "1" when (ap_phi_mux_i1_phi_fu_239_p4 = ap_const_lv5_10) else "0";
    exitcond3_fu_391_p2 <= "1" when (ap_phi_mux_i2_phi_fu_250_p4 = ap_const_lv3_4) else "0";
    exitcond_fu_583_p2 <= "1" when (ap_phi_mux_i3_phi_fu_310_p4 = ap_const_lv5_10) else "0";
    grp_fu_317_opcode <= ap_const_lv2_0;

    grp_fu_317_p0_assign_proc : process(reg_343, sigma_reg_258, tmp_1_reg_293)
    begin
        grp_fu_317_p0 <= tmp_1_reg_293;
    end process;


    grp_fu_317_p1_assign_proc : process(reg_343, sigma_reg_258)
    begin
        grp_fu_317_p1 <= sigma_reg_258;
    end process;


    grp_fu_333_p0_assign_proc : process(producer_A_m_if_Val_q0, producer_b_m_if_Val_q0, tmp_18_reg_683, tmp_7_reg_748)
    begin
        grp_fu_333_p0 <= tmp_7_reg_748;
    end process;

    isNeg_fu_491_p3 <= sh_assign_fu_485_p2(11 downto 11);
    mantissa_V_1_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_467_p4),137));
    mantissa_V_fu_467_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_463_p1) & ap_const_lv1_0);
    p_Val2_5_fu_563_p3 <= 
        tmp_15_fu_549_p1 when (isNeg_fu_491_p3(0) = '1') else 
        tmp_16_fu_553_p4;
    p_Val2_6_fu_576_p3 <= 
        result_V_1_fu_571_p2 when (p_Result_s_reg_708(0) = '1') else 
        p_Val2_5_reg_713;
    p_Val2_s_fu_442_p1 <= x_assign_reg_703;
    producer_A_m_if_Val_ce0 <= ap_const_logic_1;
    producer_b_m_if_Val_address0 <= tmp_9_reg_645(2 - 1 downto 0);
    producer_b_m_if_Val_ce0 <= ap_const_logic_1;
    producer_x_m_if_Val_address0 <= tmp_5_reg_727(4 - 1 downto 0);
    producer_x_m_if_Val_ce0 <= ap_const_logic_1;
    producer_x_m_if_Val_we0 <= ap_const_logic_1;
    r_V_1_fu_535_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast_fu_477_p1),to_integer(unsigned('0' & tmp_i_i_i_10_fu_521_p1(31-1 downto 0)))));
    r_V_fu_529_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_467_p4),to_integer(unsigned('0' & tmp_i_i_i_cast_11_fu_525_p1(31-1 downto 0)))));
    result_V_1_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_713));
        sh_assign_2_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_509_p3),32));

    sh_assign_fu_485_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast2_fu_481_p1));
    tmp_15_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_541_p3),32));
    tmp_16_fu_553_p4 <= r_V_1_fu_535_p2(84 downto 53);
    tmp_18_fu_437_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_338) * signed(x_prev_load_1_reg_662))), 32));
    tmp_23_fu_541_p3 <= r_V_fu_529_p2(53 downto 53);
    tmp_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i1_phi_fu_239_p4),64));
        tmp_4_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_408_p2),64));

    tmp_5_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i3_phi_fu_310_p4),64));
    tmp_6_fu_601_p2 <= std_logic_vector(unsigned(x_new_q0) - unsigned(x_prev_q0));
    tmp_7_fu_607_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_reg_742) * signed(tmp_6_reg_742))), 32));
    tmp_9_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i2_phi_fu_250_p4),64));
    tmp_V_1_fu_463_p1 <= p_Val2_s_fu_442_p1(52 - 1 downto 0);
    tmp_V_fu_453_p4 <= p_Val2_s_fu_442_p1(62 downto 52);
    tmp_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_228_p4),64));
    tmp_i_i_i_10_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_517_p1),137));
    tmp_i_i_i_cast_11_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_517_p1),54));
        tmp_i_i_i_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_499_p2),12));

    tmp_i_i_i_fu_499_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_453_p4));
    tmp_i_i_i_i_cast2_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_453_p4),12));
    tmp_s_fu_408_p2 <= std_logic_vector(unsigned(i2_reg_246) + unsigned(ap_const_lv3_7));
    ush_fu_509_p3 <= 
        tmp_i_i_i_cast_fu_505_p1 when (isNeg_fu_491_p3(0) = '1') else 
        sh_assign_fu_485_p2;

    x_new_address0_assign_proc : process(tmp_2_fu_386_p1, tmp_9_reg_645, tmp_5_fu_595_p1, tmp_fu_368_p1)
    begin
        x_new_address0 <= tmp_5_fu_595_p1(4 - 1 downto 0);
    end process;

    x_new_ce0 <= ap_const_logic_1;

    x_new_d0_assign_proc : process(p_Val2_6_fu_576_p3)
    begin
        x_new_d0 <= p_Val2_6_fu_576_p3;
    end process;

    x_new_we0 <= ap_const_logic_1;

    x_prev_address0_assign_proc : process(tmp_2_reg_627, tmp_9_fu_403_p1, tmp_5_fu_595_p1, tmp_fu_368_p1)
    begin
        x_prev_address0 <= tmp_5_fu_595_p1(4 - 1 downto 0);
    end process;

    x_prev_ce0 <= ap_const_logic_1;

    x_prev_d0_assign_proc : process(x_new_q0)
    begin
        x_prev_d0 <= x_new_q0;
    end process;

    x_prev_we0 <= ap_const_logic_1;
end behav;
